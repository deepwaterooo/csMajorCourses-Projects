====================================
FILE: aamain2.c-
-rw------- 1 jenny jenny  121 Nov 20 21:16 aamain2.c-
-rw------- 1 jenny jenny  224 Dec 10 18:12 aamain2.expected
-rw------- 1 jenny jenny   20 Nov 21 11:33 aamain2.in
-rw-r--r-- 1 jenny jenny 1114 Dec 12 22:55 aamain2.out
-rw-r--r-- 1 jenny jenny 3655 Dec 12 22:55 aamain2.tm
aamain2.out ztmp9829.txt differ: byte 1, line 1
aamain2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: aamain2.tm					Loading file: aamain2.tm
666 F 							   |	666 T 
entered: 496							entered: 496
entered: T							entered: T
Halted								Halted
Bye.								Bye.
====================================
FILE: aamain3.c-
-rw------- 1 jenny jenny   94 Nov 20 21:16 aamain3.c-
-rw------- 1 jenny jenny  284 Dec 10 18:12 aamain3.expected
-rw-r--r-- 1 jenny jenny 1293 Dec 12 22:55 aamain3.out
-rw-r--r-- 1 jenny jenny 3170 Dec 12 22:55 aamain3.tm
aamain3.out ztmp9829.txt differ: byte 206, line 3
aamain3 (Output DIFF)
ERROR(5): Expecting type int in parameter 1 of call to '	ERROR(5): Expecting type int in parameter 1 of call to '
ERROR(6): Expecting type bool in parameter 1 of call to 	ERROR(6): Expecting type bool in parameter 1 of call to 
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 2						Number of errors: 2
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: aamain3.tm				   <
0 T 							   <
Halted							   <
Bye.							   <
====================================
FILE: aamain4.c-
-rw------- 1 jenny jenny   33 Nov 20 21:16 aamain4.c-
-rw------- 1 jenny jenny  279 Dec 10 18:12 aamain4.expected
-rw-r--r-- 1 jenny jenny 1168 Dec 12 22:55 aamain4.out
-rw-r--r-- 1 jenny jenny 2127 Dec 12 22:55 aamain4.tm
aamain4.out ztmp9829.txt differ: byte 87, line 2
aamain4 (Output DIFF)
WARNING(3): Expecting to return type int but function 'm	WARNING(3): Expecting to return type int but function 'm
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 1						Number of warnings: 1
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: aamain4.tm					Loading file: aamain4.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: aamain5.c-
-rw------- 1 jenny jenny   87 Nov 20 21:16 aamain5.c-
-rw------- 1 jenny jenny  125 Dec 10 18:12 aamain5.expected
-rw-r--r-- 1 jenny jenny 1147 Dec 12 22:55 aamain5.out
-rw-r--r-- 1 jenny jenny    0 Dec 12 22:55 aamain5.tm
aamain5.out ztmp9829.txt differ: byte 1, line 1
aamain5 (Output DIFF)
							   |	ERROR(LINKER): Procedure main is not defined.
Symbol Stack:						   |	Number of warnings: 0
              globals ---- 				   |	Number of errors: 1
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
ThereIsNoProcedureCalledMainInThisFileToBeFoundAnywhereA   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: aamain5.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: aamain.c-
-rw------- 1 jenny jenny   57 Nov 20 21:16 aamain.c-
-rw------- 1 jenny jenny  278 Dec 10 18:12 aamain.expected
-rw-r--r-- 1 jenny jenny 1176 Dec 12 22:55 aamain.out
-rw-r--r-- 1 jenny jenny 2365 Dec 12 22:55 aamain.tm
aamain.out ztmp9829.txt differ: byte 87, line 2
aamain (Output DIFF)
WARNING(3): Expecting to return type int but function 'm	WARNING(3): Expecting to return type int but function 'm
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
FuncK->size: -3						   <
toff: -3						   <
Loop through global scope				   <
Number of warnings: 1						Number of warnings: 1
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: aamain.tm						Loading file: aamain.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: aasmaller.c-
-rw------- 1 jenny jenny   49 Dec  5 15:35 aasmaller.c-
-rw------- 1 jenny jenny  125 Dec 10 18:12 aasmaller.expected
-rw-r--r-- 1 jenny jenny 1060 Dec 12 22:55 aasmaller.out
-rw-r--r-- 1 jenny jenny    0 Dec 12 22:55 aasmaller.tm
aasmaller.out ztmp9829.txt differ: byte 1, line 1
aasmaller (Output DIFF)
							   |	ERROR(LINKER): Procedure main is not defined.
Symbol Stack:						   |	Number of warnings: 0
              globals ---- 				   |	Number of errors: 1
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       dog    globals 1 Func dog returns type void alloc   <
							   <
FuncK->size: -3						   <
toff: -3						   <
toff: -3						   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: aasmaller.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: all.c-
-rw------- 1 jenny jenny  74 Nov 20 21:16 all.c-
-rw------- 1 jenny jenny 322 Dec 10 18:12 all.expected
-rw------- 1 jenny jenny   2 Nov 21 11:33 all.in
-rw-r--r-- 1 jenny jenny  37 Dec 12 22:55 all.out
all.out ztmp9829.txt differ: byte 1, line 1
all (Output DIFF)
							   >	ERROR(5): Syntax error.  Unexpected ';'.  Expecting id.
							   >	ERROR(6): Syntax error.  Unexpected '='.
							   >	ERROR(7): Syntax error.  Unexpected int.
							   >	ERROR(8): Syntax error.  Unexpected number: 10.
							   >	ERROR(8): Syntax error.  Unexpected ']'.  Expecting ';'.
							   >	Number of warnings: 0
							   >	Number of errors: 5
------------------------------------				------------------------------------
====================================
FILE: allErrors2.c-
-rw------- 1 jenny jenny  2996 Nov 21 12:43 allErrors2.c-
-rw------- 1 jenny jenny  8389 Dec 10 18:12 allErrors2.expected
-rw------- 1 jenny jenny     2 Nov 21 11:33 allErrors2.in
-rw-r--r-- 1 jenny jenny 11195 Dec 12 22:55 allErrors2.out
-rw-r--r-- 1 jenny jenny  4096 Dec 12 22:55 allErrors2.tm
allErrors2.out ztmp9829.txt differ: byte 8309, line 111
allErrors2 (Output DIFF)
ERROR(6): Function 'dog' at line 2 is expecting to retur	ERROR(6): Function 'dog' at line 2 is expecting to retur
ERROR(13): Function 'cat' at line 9 is expecting to retu	ERROR(13): Function 'cat' at line 9 is expecting to retu
ERROR(16): Symbol 'cat' is already defined at line 9.		ERROR(16): Symbol 'cat' is already defined at line 9.
ERROR(25): Function 'ox' at line 23 is expecting no retu	ERROR(25): Function 'ox' at line 23 is expecting no retu
WARNING(28): Expecting to return type int but function '	WARNING(28): Expecting to return type int but function '
ERROR(44): Expecting Boolean test condition in if statem	ERROR(44): Expecting Boolean test condition in if statem
ERROR(45): Expecting Boolean test condition in while sta	ERROR(45): Expecting Boolean test condition in while sta
ERROR(47): Cannot use function 'cat' as a simple variabl	ERROR(47): Cannot use function 'cat' as a simple variabl
ERROR(48): '=' requires operands of the same type but lh	ERROR(48): '=' requires operands of the same type but lh
ERROR(49): '+=' requires operands of type int but rhs is	ERROR(49): '+=' requires operands of type int but rhs is
ERROR(50): '-=' requires operands of type int but lhs is	ERROR(50): '-=' requires operands of type int but lhs is
ERROR(52): Cannot use array as test condition in if stat	ERROR(52): Cannot use array as test condition in if stat
ERROR(53): Cannot use array as test condition in while s	ERROR(53): Cannot use array as test condition in while s
ERROR(58): Cannot have a break statement outside of loop	ERROR(58): Cannot have a break statement outside of loop
ERROR(61): The operation '+' does not work with arrays.		ERROR(61): The operation '+' does not work with arrays.
ERROR(62): The operation '-' does not work with arrays.		ERROR(62): The operation '-' does not work with arrays.
ERROR(63): Unary 'not' requires an operand of type bool 	ERROR(63): Unary 'not' requires an operand of type bool 
ERROR(63): The operation 'not' does not work with arrays	ERROR(63): The operation 'not' does not work with arrays
ERROR(65): '==' requires operands of the same type but l	ERROR(65): '==' requires operands of the same type but l
ERROR(67): '+' requires operands of type int but lhs is 	ERROR(67): '+' requires operands of type int but lhs is 
ERROR(69): '*' requires operands of type int but rhs is 	ERROR(69): '*' requires operands of type int but rhs is 
ERROR(71): Unary 'not' requires an operand of type bool 	ERROR(71): Unary 'not' requires an operand of type bool 
ERROR(73): Cannot index nonarray 'x'.				ERROR(73): Cannot index nonarray 'x'.
ERROR(75): Array 'aa' should be indexed by type int but 	ERROR(75): Array 'aa' should be indexed by type int but 
ERROR(77): Array index is the unindexed array 'zz'.		ERROR(77): Array index is the unindexed array 'zz'.
ERROR(79): Symbol 'xyzzy' is not defined.			ERROR(79): Symbol 'xyzzy' is not defined.
ERROR(80): Symbol 'meerkat' is not defined.			ERROR(80): Symbol 'meerkat' is not defined.
ERROR(82): 'x' is a simple variable and cannot be called	ERROR(82): 'x' is a simple variable and cannot be called
ERROR(84): Too many parameters passed for function 'dog'	ERROR(84): Too many parameters passed for function 'dog'
ERROR(85): Too few parameters passed for function 'ibex'	ERROR(85): Too few parameters passed for function 'ibex'
ERROR(87): Expecting type int in parameter 1 of call to 	ERROR(87): Expecting type int in parameter 1 of call to 
ERROR(89): Not expecting array in parameter 1 of call to	ERROR(89): Not expecting array in parameter 1 of call to
ERROR(90): Expecting type int in parameter 1 of call to 	ERROR(90): Expecting type int in parameter 1 of call to 
ERROR(92): Expecting array in parameter 1 of call to 'ib	ERROR(92): Expecting array in parameter 1 of call to 'ib
ERROR(93): Cannot use function 'ibex' as a simple variab	ERROR(93): Cannot use function 'ibex' as a simple variab
ERROR(95): Cannot use function 'ibex' as a simple variab	ERROR(95): Cannot use function 'ibex' as a simple variab
ERROR(95): '+' requires operands of type int but lhs is 	ERROR(95): '+' requires operands of type int but lhs is 
ERROR(97): The operation '*' only works with arrays.		ERROR(97): The operation '*' only works with arrays.
ERROR(99): '*' requires operands of type int but lhs is 	ERROR(99): '*' requires operands of type int but lhs is 
ERROR(99): The operation '*' does not work with arrays.		ERROR(99): The operation '*' does not work with arrays.
ERROR(99): '+' requires operands of type int but lhs is 	ERROR(99): '+' requires operands of type int but lhs is 
ERROR(99): The operation '*' only works with arrays.		ERROR(99): The operation '*' only works with arrays.
ERROR(99): The operation 'not' does not work with arrays	ERROR(99): The operation 'not' does not work with arrays
ERROR(99): Unary 'not' requires an operand of type bool 	ERROR(99): Unary 'not' requires an operand of type bool 
ERROR(99): 'or' requires operands of type bool but lhs i	ERROR(99): 'or' requires operands of type bool but lhs i
ERROR(99): Cannot have a break statement outside of loop	ERROR(99): Cannot have a break statement outside of loop
ERROR(100): 'and' requires operands of type bool but lhs	ERROR(100): 'and' requires operands of type bool but lhs
ERROR(100): 'and' requires operands of type bool but rhs	ERROR(100): 'and' requires operands of type bool but rhs
ERROR(102): Cannot return an array.				ERROR(102): Cannot return an array.
ERROR(107): Symbol 'main' is already defined at line 32.	ERROR(107): Symbol 'main' is already defined at line 32.
ERROR(121): '==' requires operands of the same type but 	ERROR(121): '==' requires operands of the same type but 
ERROR(126): '=' requires operands of the same type but l	ERROR(126): '=' requires operands of the same type but l
ERROR(130): '!=' requires operands of the same type but 	ERROR(130): '!=' requires operands of the same type but 
ERROR(136): Symbol 'z' is already defined at line 105.		ERROR(136): Symbol 'z' is already defined at line 105.
ERROR(138): Variable 'a' is of type int but is being ini	ERROR(138): Variable 'a' is of type int but is being ini
ERROR(138): Variable 'b' is of type int but is being ini	ERROR(138): Variable 'b' is of type int but is being ini
ERROR(138): Variable 'zz' is of type int but is being in	ERROR(138): Variable 'zz' is of type int but is being in
ERROR(140): Initializer for variable 'd' is not a consta	ERROR(140): Initializer for variable 'd' is not a consta
ERROR(141): '*' requires operands of type int but rhs is	ERROR(141): '*' requires operands of type int but rhs is
ERROR(142): Initializer for variable 'e' is not a consta	ERROR(142): Initializer for variable 'e' is not a consta
ERROR(143): Initializer for variable 'f' is not a consta	ERROR(143): Initializer for variable 'f' is not a consta
ERROR(145): Symbol 'main' is already defined at line 32.	ERROR(145): Symbol 'main' is already defined at line 32.
ERROR(158): '==' requires operands of the same type but 	ERROR(158): '==' requires operands of the same type but 
ERROR(164): '=' requires operands of the same type but l	ERROR(164): '=' requires operands of the same type but l
ERROR(182): In foreach statement the variable to the lef	ERROR(182): In foreach statement the variable to the lef
ERROR(183): In foreach statement the variable to the lef	ERROR(183): In foreach statement the variable to the lef
ERROR(183): Foreach requires operands of 'in' be the sam	ERROR(183): Foreach requires operands of 'in' be the sam
ERROR(186): Foreach requires operands of 'in' be the sam	ERROR(186): Foreach requires operands of 'in' be the sam
ERROR(188): If not an array, foreach requires rhs of 'in	ERROR(188): If not an array, foreach requires rhs of 'in
ERROR(189): If not an array, foreach requires lhs of 'in	ERROR(189): If not an array, foreach requires lhs of 'in
ERROR(195): Initializer for nonarray variable 'w' of typ	ERROR(195): Initializer for nonarray variable 'w' of typ
ERROR(196): Variable 'u' is of type int but is being ini	ERROR(196): Variable 'u' is of type int but is being ini
ERROR(196): Initializer for nonarray variable 'u' of typ	ERROR(196): Initializer for nonarray variable 'u' of typ
ERROR(197): Array 't' must be of type char to be initial	ERROR(197): Array 't' must be of type char to be initial
ERROR(197): Initializer for array variable 't' must be a	ERROR(197): Initializer for array variable 't' must be a
ERROR(198): Initializer for array variable 's' must be a	ERROR(198): Initializer for array variable 's' must be a
ERROR(204): Symbol 'main' is already defined at line 32.	ERROR(204): Symbol 'main' is already defined at line 32.
ERROR(206): Initializer for variable 'x' is not a consta	ERROR(206): Initializer for variable 'x' is not a consta
ERROR(207): Initializer for nonarray variable 'c' of typ	ERROR(207): Initializer for nonarray variable 'c' of typ
ERROR(208): Initializer for array variable 'd' must be a	ERROR(208): Initializer for array variable 'd' must be a
ERROR(209): Variable 'e' is of type char but is being in	ERROR(209): Variable 'e' is of type char but is being in
ERROR(210): Initializer for array variable 'f' must be a	ERROR(210): Initializer for array variable 'f' must be a
ERROR(211): Array 'z' must be of type char to be initial	ERROR(211): Array 'z' must be of type char to be initial
ERROR(213): '=' requires that if one operand is an array	ERROR(213): '=' requires that if one operand is an array
ERROR(214): '=' requires that if one operand is an array	ERROR(214): '=' requires that if one operand is an array
ERROR(215): '=' requires operands of the same type but l	ERROR(215): '=' requires operands of the same type but l
ERROR(216): '=' requires operands of the same type but l	ERROR(216): '=' requires operands of the same type but l
ERROR(216): '=' requires that if one operand is an array	ERROR(216): '=' requires that if one operand is an array
ERROR(217): '=' requires operands of the same type but l	ERROR(217): '=' requires operands of the same type but l
ERROR(219): '==' requires operands of the same type but 	ERROR(219): '==' requires operands of the same type but 
ERROR(220): '>' requires operands of type char or type i	ERROR(220): '>' requires operands of type char or type i
ERROR(221): '>' requires operands of type char or type i	ERROR(221): '>' requires operands of type char or type i
ERROR(222): The operation '>' does not work with arrays.	ERROR(222): The operation '>' does not work with arrays.
ERROR(223): The operation '>' does not work with arrays.	ERROR(223): The operation '>' does not work with arrays.
ERROR(224): The operation '>' does not work with arrays.	ERROR(224): The operation '>' does not work with arrays.
ERROR(226): Unary '-' requires an operand of type int bu	ERROR(226): Unary '-' requires an operand of type int bu
ERROR(227): The operation '*' only works with arrays.		ERROR(227): The operation '*' only works with arrays.
ERROR(228): The operation '-' does not work with arrays.	ERROR(228): The operation '-' does not work with arrays.
ERROR(231): Unary '++' requires an operand of type int b	ERROR(231): Unary '++' requires an operand of type int b
ERROR(231): The operation '++' does not work with arrays	ERROR(231): The operation '++' does not work with arrays
ERROR(232): The operation '++' does not work with arrays	ERROR(232): The operation '++' does not work with arrays
ERROR(233): Unary '--' requires an operand of type int b	ERROR(233): Unary '--' requires an operand of type int b
ERROR(233): The operation '--' does not work with arrays	ERROR(233): The operation '--' does not work with arrays
ERROR(234): The operation '--' does not work with arrays	ERROR(234): The operation '--' does not work with arrays
WARNING(204): Expecting to return type int but function 	WARNING(204): Expecting to return type int but function 
ERROR(238): Symbol 'fred' is already defined at line 237	ERROR(238): Symbol 'fred' is already defined at line 237
ERROR(240): Symbol 'fred' is already defined at line 239	ERROR(240): Symbol 'fred' is already defined at line 239
ERROR(241): Symbol 'fred' is already defined at line 239	ERROR(241): Symbol 'fred' is already defined at line 239
ERROR(242): Symbol 'fred' is already defined at line 239	ERROR(242): Symbol 'fred' is already defined at line 239
WARNING(238): Expecting to return type int but function 	WARNING(238): Expecting to return type int but function 
							   |	Number of warnings: 3
Symbol Stack:						   |	Number of errors: 107
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
       cat    globals 1 Func cat returns type int alloca   <
							   <
      ibex    globals 1 Func ibex returns type bool allo   <
							   <
        ox    globals 1 Func ox returns type void alloca   <
							   <
       emu    globals 1 Func emu returns type int alloca   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
         z    globals 1 Var z  of type int allocated as    <
							   <
         x    globals 1 Var x  of type int allocated as    <
							   <
         y    globals 1 Var y  of type bool allocated as   <
							   <
         a    globals 1 Var a  of type int allocated as    <
							   <
         b    globals 1 Var b  of type int allocated as    <
							   <
        zz    globals 1 Var zz  of type int allocated as   <
							   <
         c    globals 1 Var c  of type int allocated as    <
							   <
         d    globals 1 Var d  of type int allocated as    <
							   <
        d2    globals 1 Var d2  of type int allocated as   <
							   <
         e    globals 1 Var e  of type int allocated as    <
							   <
         f    globals 1 Var f  of type int allocated as    <
							   <
      fred    globals 1 Var fred  of type int allocated    <
							   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: allErrors2.tm				   <
====================================
FILE: allErrors.c-
-rw------- 1 jenny jenny 2556 Nov 20 21:16 allErrors.c-
-rw------- 1 jenny jenny 2547 Dec 10 18:12 allErrors.expected
-rw------- 1 jenny jenny    2 Nov 21 11:33 allErrors.in
-rw-r--r-- 1 jenny jenny 3943 Dec 12 22:55 allErrors.out
-rw-r--r-- 1 jenny jenny 4096 Dec 12 22:55 allErrors.tm
allErrors.out ztmp9829.txt differ: byte 2468, line 37
allErrors (Output DIFF)
ERROR(7): Function 'dog' at line 3 is expecting to retur	ERROR(7): Function 'dog' at line 3 is expecting to retur
ERROR(14): Function 'cat' at line 10 is expecting to ret	ERROR(14): Function 'cat' at line 10 is expecting to ret
ERROR(17): Symbol 'cat' is already defined at line 10.		ERROR(17): Symbol 'cat' is already defined at line 10.
ERROR(26): Function 'ox' at line 24 is expecting no retu	ERROR(26): Function 'ox' at line 24 is expecting no retu
WARNING(29): Expecting to return type int but function '	WARNING(29): Expecting to return type int but function '
ERROR(36): Symbol 'x' is already defined at line 35.		ERROR(36): Symbol 'x' is already defined at line 35.
ERROR(44): Symbol 'v' is not defined.				ERROR(44): Symbol 'v' is not defined.
ERROR(46): Expecting Boolean test condition in if statem	ERROR(46): Expecting Boolean test condition in if statem
ERROR(47): Expecting Boolean test condition in while sta	ERROR(47): Expecting Boolean test condition in while sta
ERROR(49): Cannot use function 'cat' as a simple variabl	ERROR(49): Cannot use function 'cat' as a simple variabl
ERROR(50): '=' requires operands of the same type but lh	ERROR(50): '=' requires operands of the same type but lh
ERROR(51): '+=' requires operands of type int but rhs is	ERROR(51): '+=' requires operands of type int but rhs is
ERROR(52): '-=' requires operands of type int but lhs is	ERROR(52): '-=' requires operands of type int but lhs is
ERROR(54): Cannot use array as test condition in if stat	ERROR(54): Cannot use array as test condition in if stat
ERROR(55): Cannot use array as test condition in while s	ERROR(55): Cannot use array as test condition in while s
ERROR(57): Cannot have a break statement outside of loop	ERROR(57): Cannot have a break statement outside of loop
ERROR(61): The operation '+' does not work with arrays.		ERROR(61): The operation '+' does not work with arrays.
ERROR(63): '==' requires operands of the same type but l	ERROR(63): '==' requires operands of the same type but l
ERROR(65): '+' requires operands of type int but lhs is 	ERROR(65): '+' requires operands of type int but lhs is 
ERROR(67): '*' requires operands of type int but rhs is 	ERROR(67): '*' requires operands of type int but rhs is 
ERROR(69): Unary 'not' requires an operand of type bool 	ERROR(69): Unary 'not' requires an operand of type bool 
ERROR(71): Cannot index nonarray 'x'.				ERROR(71): Cannot index nonarray 'x'.
ERROR(73): Array 'aa' should be indexed by type int but 	ERROR(73): Array 'aa' should be indexed by type int but 
ERROR(75): Symbol 'xyzzy' is not defined.			ERROR(75): Symbol 'xyzzy' is not defined.
ERROR(76): Symbol 'meerkat' is not defined.			ERROR(76): Symbol 'meerkat' is not defined.
ERROR(78): 'x' is a simple variable and cannot be called	ERROR(78): 'x' is a simple variable and cannot be called
ERROR(80): Too many parameters passed for function 'dog'	ERROR(80): Too many parameters passed for function 'dog'
ERROR(81): Too few parameters passed for function 'ibex'	ERROR(81): Too few parameters passed for function 'ibex'
ERROR(83): Expecting type int in parameter 1 of call to 	ERROR(83): Expecting type int in parameter 1 of call to 
ERROR(85): Not expecting array in parameter 1 of call to	ERROR(85): Not expecting array in parameter 1 of call to
ERROR(87): Expecting array in parameter 1 of call to 'ib	ERROR(87): Expecting array in parameter 1 of call to 'ib
ERROR(88): Cannot use function 'ibex' as a simple variab	ERROR(88): Cannot use function 'ibex' as a simple variab
ERROR(90): Cannot use function 'ibex' as a simple variab	ERROR(90): Cannot use function 'ibex' as a simple variab
ERROR(90): '+' requires operands of type int but lhs is 	ERROR(90): '+' requires operands of type int but lhs is 
ERROR(93): Array index is the unindexed array 'zz'.		ERROR(93): Array index is the unindexed array 'zz'.
ERROR(95): Cannot return an array.				ERROR(95): Cannot return an array.
							   |	Number of warnings: 1
Symbol Stack:						   |	Number of errors: 35
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
       cat    globals 1 Func cat returns type int alloca   <
							   <
      ibex    globals 1 Func ibex returns type bool allo   <
							   <
        ox    globals 1 Func ox returns type void alloca   <
							   <
       emu    globals 1 Func emu returns type int alloca   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: allErrors.tm				   <
====================================
FILE: arglist2.c-
-rw------- 1 jenny jenny   787 Nov 20 21:16 arglist2.c-
-rw------- 1 jenny jenny  2940 Dec 10 18:12 arglist2.expected
-rw-r--r-- 1 jenny jenny  4924 Dec 12 22:55 arglist2.out
-rw-r--r-- 1 jenny jenny 12288 Dec 12 22:55 arglist2.tm
arglist2.out ztmp9829.txt differ: byte 2692, line 32
arglist2 (Output DIFF)
ERROR(13): Too few parameters passed for function 'kate'	ERROR(13): Too few parameters passed for function 'kate'
ERROR(14): Too few parameters passed for function 'kate'	ERROR(14): Too few parameters passed for function 'kate'
ERROR(15): Too few parameters passed for function 'kate'	ERROR(15): Too few parameters passed for function 'kate'
ERROR(17): Too many parameters passed for function 'kate	ERROR(17): Too many parameters passed for function 'kate
ERROR(18): Too many parameters passed for function 'kate	ERROR(18): Too many parameters passed for function 'kate
ERROR(20): Expecting type int in parameter 1 of call to 	ERROR(20): Expecting type int in parameter 1 of call to 
ERROR(20): Expecting type bool in parameter 2 of call to	ERROR(20): Expecting type bool in parameter 2 of call to
ERROR(20): Not expecting array in parameter 2 of call to	ERROR(20): Not expecting array in parameter 2 of call to
ERROR(20): Expecting type int in parameter 3 of call to 	ERROR(20): Expecting type int in parameter 3 of call to 
ERROR(20): Expecting type bool in parameter 4 of call to	ERROR(20): Expecting type bool in parameter 4 of call to
ERROR(20): Expecting array in parameter 4 of call to 'ka	ERROR(20): Expecting array in parameter 4 of call to 'ka
ERROR(21): Not expecting array in parameter 1 of call to	ERROR(21): Not expecting array in parameter 1 of call to
ERROR(21): Not expecting array in parameter 2 of call to	ERROR(21): Not expecting array in parameter 2 of call to
ERROR(21): Expecting array in parameter 3 of call to 'ka	ERROR(21): Expecting array in parameter 3 of call to 'ka
ERROR(21): Expecting array in parameter 4 of call to 'ka	ERROR(21): Expecting array in parameter 4 of call to 'ka
ERROR(22): Expecting type int in parameter 1 of call to 	ERROR(22): Expecting type int in parameter 1 of call to 
ERROR(22): Not expecting array in parameter 1 of call to	ERROR(22): Not expecting array in parameter 1 of call to
ERROR(22): Expecting type bool in parameter 2 of call to	ERROR(22): Expecting type bool in parameter 2 of call to
ERROR(22): Expecting type int in parameter 3 of call to 	ERROR(22): Expecting type int in parameter 3 of call to 
ERROR(22): Expecting array in parameter 3 of call to 'ka	ERROR(22): Expecting array in parameter 3 of call to 'ka
ERROR(22): Expecting type bool in parameter 4 of call to	ERROR(22): Expecting type bool in parameter 4 of call to
ERROR(25): '+' requires operands of type int but rhs is 	ERROR(25): '+' requires operands of type int but rhs is 
ERROR(32): Function 'abbey' at line 30 is expecting to r	ERROR(32): Function 'abbey' at line 30 is expecting to r
ERROR(35): Symbol 'abbey' is already defined at line 30.	ERROR(35): Symbol 'abbey' is already defined at line 30.
ERROR(37): Function 'abbey' at line 35 is expecting to r	ERROR(37): Function 'abbey' at line 35 is expecting to r
ERROR(42): Function 'zena' at line 40 is expecting to re	ERROR(42): Function 'zena' at line 40 is expecting to re
ERROR(47): Function 'zeus' at line 45 is expecting to re	ERROR(47): Function 'zeus' at line 45 is expecting to re
ERROR(52): Function 'blackdog' at line 50 is expecting t	ERROR(52): Function 'blackdog' at line 50 is expecting t
ERROR(59): Cannot return an array.				ERROR(59): Cannot return an array.
ERROR(64): Function 'quaoar' at line 62 is expecting no 	ERROR(64): Function 'quaoar' at line 62 is expecting no 
ERROR(69): Function 'ixion' at line 67 is expecting no r	ERROR(69): Function 'ixion' at line 67 is expecting no r
ERROR(75): Cannot return an array.			   <
ERROR(75): Function 'varuna' at line 72 is expecting no 	ERROR(75): Function 'varuna' at line 72 is expecting no 
							   |	ERROR(75): Cannot return an array.
Symbol Stack:						   |	ERROR(LINKER): Procedure main is not defined.
              globals ---- 				   |	Number of warnings: 0
   outputc    globals 1 Func outputc returns type void a   |	Number of errors: 34
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      kate    globals 1 Func kate returns type int alloc   <
							   <
     matty    globals 1 Func matty returns type int allo   <
							   <
     abbey    globals 1 Func abbey returns type int allo   <
							   <
      zena    globals 1 Func zena returns type int alloc   <
							   <
      zeus    globals 1 Func zeus returns type bool allo   <
							   <
  blackdog    globals 1 Func blackdog returns type bool    <
							   <
       zog    globals 1 Func zog returns type int alloca   <
							   <
    quaoar    globals 1 Func quaoar returns type void al   <
							   <
     ixion    globals 1 Func ixion returns type void all   <
							   <
    varuna    globals 1 Func varuna returns type void al   <
							   <
FuncK->size: -6						   <
FuncK->size: -9						   <
toff: -11						   <
FuncK->size: -2						   <
FuncK->size: -2						   <
FuncK->size: -2						   <
FuncK->size: -2						   <
FuncK->size: -2						   <
FuncK->size: -5						   <
FuncK->size: -2						   <
FuncK->size: -2						   <
FuncK->size: -13					   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: arglist2.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: arglist3.c-
-rw------- 1 jenny jenny  133 Nov 20 21:16 arglist3.c-
-rw------- 1 jenny jenny  125 Dec 10 18:12 arglist3.expected
-rw-r--r-- 1 jenny jenny 1156 Dec 12 22:55 arglist3.out
-rw-r--r-- 1 jenny jenny    0 Dec 12 22:55 arglist3.tm
arglist3.out ztmp9829.txt differ: byte 1, line 1
arglist3 (Output DIFF)
							   |	ERROR(LINKER): Procedure main is not defined.
Symbol Stack:						   |	Number of warnings: 0
              globals ---- 				   |	Number of errors: 1
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      kate    globals 1 Func kate returns type int alloc   <
							   <
     matty    globals 1 Func matty returns type int allo   <
							   <
FuncK->size: -8						   <
FuncK->size: -2						   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: arglist3.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: arglist.c-
-rw------- 1 jenny jenny  190 Nov 20 21:16 arglist.c-
-rw------- 1 jenny jenny  125 Dec 10 18:12 arglist.expected
-rw-r--r-- 1 jenny jenny 1165 Dec 12 22:55 arglist.out
-rw-r--r-- 1 jenny jenny    0 Dec 12 22:55 arglist.tm
arglist.out ztmp9829.txt differ: byte 1, line 1
arglist (Output DIFF)
							   |	ERROR(LINKER): Procedure main is not defined.
Symbol Stack:						   |	Number of warnings: 0
              globals ---- 				   |	Number of errors: 1
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      kate    globals 1 Func kate returns type int alloc   <
							   <
     matty    globals 1 Func matty returns type int allo   <
							   <
FuncK->size: -6						   <
FuncK->size: -9						   <
toff: -11						   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: arglist.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: array0.c-
-rw------- 1 jenny jenny  545 Nov 20 21:16 array0.c-
-rw------- 1 jenny jenny  245 Dec 10 18:12 array0.expected
-rw-r--r-- 1 jenny jenny 2300 Dec 12 22:55 array0.out
-rw-r--r-- 1 jenny jenny 9653 Dec 12 22:55 array0.tm
array0.out ztmp9829.txt differ: byte 1, line 1
array0 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  is array of type int allo   <
							   <
      show    globals 1 Func show returns type int alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
FuncK->size: -7						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: array0.tm						Loading file: array0.tm
1 1 							   |	777 666 
1 1 							   |	777 666 
1 1 1 1 						   |	777 777 666 666 
1 1 							   |	780 670 
1 1 							   |	880 770 
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
1 1 							   <
1 1 							   <
							   <
1 1 1 1 						   <
Halted								Halted
Bye.								Bye.
====================================
FILE: array1.c-
-rw------- 1 jenny jenny  173 Nov 20 21:16 array1.c-
-rw------- 1 jenny jenny  197 Dec 10 18:12 array1.expected
-rw-r--r-- 1 jenny jenny 1204 Dec 12 22:55 array1.out
-rw-r--r-- 1 jenny jenny 4476 Dec 12 22:55 array1.tm
array1.out ztmp9829.txt differ: byte 1, line 1
array1 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      ford    globals 1 Func ford returns type void allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -27					   <
FuncK->size: -36					   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: array1.tm						Loading file: array1.tm
3 							   |	777 
Halted								Halted
Bye.								Bye.
====================================
FILE: array2.c-
-rw------- 1 jenny jenny  154 Nov 20 21:16 array2.c-
-rw------- 1 jenny jenny  200 Dec 10 18:12 array2.expected
-rw-r--r-- 1 jenny jenny 1201 Dec 12 22:55 array2.out
-rw-r--r-- 1 jenny jenny 4079 Dec 12 22:55 array2.tm
array2.out ztmp9829.txt differ: byte 1, line 1
array2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      ford    globals 1 Func ford returns type void allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
FuncK->size: -8						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: array2.tm						Loading file: array2.tm
3 3 Halted						   |	666 777 Halted
Bye.								Bye.
====================================
FILE: array.c-
-rw------- 1 jenny jenny   534 Nov 20 21:16 array.c-
-rw------- 1 jenny jenny   232 Dec 10 18:12 array.expected
-rw-r--r-- 1 jenny jenny  1390 Dec 12 22:55 array.out
-rw-r--r-- 1 jenny jenny 11827 Dec 12 22:55 array.tm
array.out ztmp9829.txt differ: byte 1, line 1
array (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         y    globals 1 Var y  is array of type int allo   <
							   <
       get    globals 1 Func get returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
FuncK->size: -9						   <
toff: -12						   <
toff: -12						   <
toff: -16						   <
toff: -16						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: array.tm						Loading file: array.tm
0 1 2 4 						   |	3 3 4 496 
0 1 2 4 						   |	3 3 314 496 
0 							   |	3 
2 0 							   |	314 3 
2 1 							   |	314 3 
Halted								Halted
Bye.								Bye.
====================================
FILE: arraysize.c-
-rw------- 1 jenny jenny  509 Nov 20 21:16 arraysize.c-
-rw------- 1 jenny jenny  259 Dec 10 18:12 arraysize.expected
-rw-r--r-- 1 jenny jenny 1496 Dec 12 22:55 arraysize.out
-rw-r--r-- 1 jenny jenny 9198 Dec 12 22:55 arraysize.tm
arraysize.out ztmp9829.txt differ: byte 1, line 1
arraysize (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  is array of type int allo   <
							   <
      ford    globals 1 Func ford returns type void allo   <
							   <
         h    globals 1 Var h  is array of type bool all   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -18					   <
FuncK->size: -14					   <
toff: -17						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: arraysize.tm					Loading file: arraysize.tm
0 0 0 0 						   |	777 11 0 12 
0 0 0 -1 						   |	777 11 888 12 
0 0 							   |	666 13 
							   >	888 12 888 12 
							   >	666 13 
							   >	132 
Halted								Halted
Bye.								Bye.
====================================
FILE: arraysizeold.c-
-rw------- 1 jenny jenny  192 Nov 20 21:16 arraysizeold.c-
-rw------- 1 jenny jenny  198 Dec 10 18:12 arraysizeold.expected
-rw-r--r-- 1 jenny jenny 1335 Dec 12 22:55 arraysizeold.out
-rw-r--r-- 1 jenny jenny 3946 Dec 12 22:55 arraysizeold.tm
arraysizeold.out ztmp9829.txt differ: byte 1, line 1
arraysizeold (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  is array of type int allo   <
							   <
      ford    globals 1 Func ford returns type void allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -18					   <
FuncK->size: -14					   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: arraysizeold.tm					Loading file: arraysizeold.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: assign1.c-
-rw------- 1 jenny jenny  519 Nov 20 21:16 assign1.c-
-rw------- 1 jenny jenny  233 Dec 10 18:12 assign1.expected
-rw-r--r-- 1 jenny jenny 1534 Dec 12 22:55 assign1.out
-rw-r--r-- 1 jenny jenny 1782 Dec 12 22:55 assign1.tm
assign1.out ztmp9829.txt differ: byte 1, line 1
assign1 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
        gx    globals 1 Var gx  of type int allocated as   <
							   <
        gy    globals 1 Var gy  of type int allocated as   <
							   <
        ga    globals 1 Var ga  of type bool allocated a   <
							   <
        gb    globals 1 Var gb  of type bool allocated a   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign1.tm					Loading file: assign1.tm
							   >	111 222 T F 
							   >	333 444 F T 
							   >	222 F 
							   >	444 T 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign2.c-
-rw------- 1 jenny jenny  627 Nov 20 21:16 assign2.c-
-rw------- 1 jenny jenny  233 Dec 10 18:12 assign2.expected
-rw-r--r-- 1 jenny jenny 1577 Dec 12 22:55 assign2.out
-rw-r--r-- 1 jenny jenny 2405 Dec 12 22:55 assign2.tm
assign2.out ztmp9829.txt differ: byte 1, line 1
assign2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
        gx    globals 1 Var gx  is array of type int all   <
							   <
        gy    globals 1 Var gy  is array of type int all   <
							   <
        ga    globals 1 Var ga  is array of type bool al   <
							   <
        gb    globals 1 Var gb  is array of type bool al   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign2.tm					Loading file: assign2.tm
							   >	111 222 T F 
							   >	333 444 F T 
							   >	222 F 
							   >	444 T 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign3.c-
-rw------- 1 jenny jenny  648 Nov 20 21:16 assign3.c-
-rw------- 1 jenny jenny  245 Dec 10 18:12 assign3.expected
-rw-r--r-- 1 jenny jenny 1321 Dec 12 22:55 assign3.out
-rw-r--r-- 1 jenny jenny 2093 Dec 12 22:55 assign3.tm
assign3.out ztmp9829.txt differ: byte 1, line 1
assign3 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
        gx    globals 1 Var gx  is array of type int all   <
							   <
        gy    globals 1 Var gy  is array of type int all   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign3.tm					Loading file: assign3.tm
							   >	111 222 
							   >	333 444 
							   >	333 
							   >	777 
							   >	222 0 
							   >	444 0 
							   >	222 
							   >	444 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign4.c-
-rw------- 1 jenny jenny  552 Nov 20 21:16 assign4.c-
-rw------- 1 jenny jenny  245 Dec 10 18:12 assign4.expected
-rw-r--r-- 1 jenny jenny 1300 Dec 12 22:55 assign4.out
-rw-r--r-- 1 jenny jenny 1782 Dec 12 22:55 assign4.tm
assign4.out ztmp9829.txt differ: byte 1, line 1
assign4 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
        gx    globals 1 Var gx  of type int allocated as   <
							   <
        gy    globals 1 Var gy  of type int allocated as   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign4.tm					Loading file: assign4.tm
							   >	111 222 
							   >	333 444 
							   >	333 
							   >	777 
							   >	222 0 
							   >	444 0 
							   >	222 
							   >	444 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign5.c-
-rw------- 1 jenny jenny   598 Nov 20 21:16 assign5.c-
-rw------- 1 jenny jenny   297 Dec 10 18:12 assign5.expected
-rw-r--r-- 1 jenny jenny  1187 Dec 12 22:55 assign5.out
-rw-r--r-- 1 jenny jenny 13430 Dec 12 22:55 assign5.tm
assign5.out ztmp9829.txt differ: byte 1, line 1
assign5 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -5						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign5.tm					Loading file: assign5.tm
666 666 666 							666 666 666 
666 666 666 						   |	1332 666 666 
666 666 666 						   |	1332 1332 666 
666 666 666 						   |	3330 1998 666 
666 666 666 						   |	666 666 666 
666 666 666 						   |	0 666 666 
666 666 666 						   |	0 0 666 
666 666 666 						   |	666 -666 666 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign6.c-
-rw------- 1 jenny jenny 1624 Nov 21 11:59 assign6.c-
-rw------- 1 jenny jenny  421 Dec 10 18:12 assign6.expected
-rw-r--r-- 1 jenny jenny 1494 Dec 12 22:55 assign6.out
-rw-r--r-- 1 jenny jenny 1937 Dec 12 22:55 assign6.tm
assign6.out ztmp9829.txt differ: byte 86, line 2
assign6 (Output DIFF)
WARNING(4): Expecting to return type int but function 'd	WARNING(4): Expecting to return type int but function 'd
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  of type int allocated as    <
							   <
         h    globals 1 Var h  is array of type int allo   <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 1						Number of warnings: 1
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign6.tm					Loading file: assign6.tm
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	604506 
							   >	888 777 
Halted								Halted
Bye.								Bye.
====================================
FILE: assigna.c-
-rw------- 1 jenny jenny  443 Nov 20 21:16 assigna.c-
-rw------- 1 jenny jenny  193 Dec 10 18:12 assigna.expected
-rw-r--r-- 1 jenny jenny 1513 Dec 12 22:55 assigna.out
-rw-r--r-- 1 jenny jenny 1943 Dec 12 22:55 assigna.tm
assigna.out ztmp9829.txt differ: byte 1, line 1
assigna (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       gnu    globals 1 Var gnu  of type int allocated a   <
							   <
      goat    globals 1 Var goat  is array of type int a   <
							   <
       cat    globals 1 Func cat returns type void alloc   <
							   <
       dog    globals 1 Func dog returns type void alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assigna.tm					Loading file: assigna.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: assign.c-
-rw------- 1 jenny jenny  608 Nov 21 12:38 assign.c-
-rw------- 1 jenny jenny 1979 Dec 10 18:12 assign.expected
-rw-r--r-- 1 jenny jenny 3263 Dec 12 22:55 assign.out
-rw-r--r-- 1 jenny jenny 4096 Dec 12 22:55 assign.tm
assign.out ztmp9829.txt differ: byte 561, line 9
assign (Output DIFF)
ERROR(19): '=' requires operands of the same type but lh	ERROR(19): '=' requires operands of the same type but lh
ERROR(19): '=' requires operands of the same type but lh	ERROR(19): '=' requires operands of the same type but lh
ERROR(20): '=' requires operands of the same type but lh	ERROR(20): '=' requires operands of the same type but lh
ERROR(20): '=' requires operands of the same type but lh	ERROR(20): '=' requires operands of the same type but lh
ERROR(21): Symbol 'p' is not defined.				ERROR(21): Symbol 'p' is not defined.
ERROR(21): Symbol 'q' is not defined.				ERROR(21): Symbol 'q' is not defined.
ERROR(21): Symbol 'r' is not defined.				ERROR(21): Symbol 'r' is not defined.
ERROR(22): '+=' requires operands of type int but rhs is	ERROR(22): '+=' requires operands of type int but rhs is
ERROR(22): '+' requires operands of type int but rhs is    <
ERROR(25): Too many parameters passed for function 'fred	ERROR(25): Too many parameters passed for function 'fred
ERROR(25): '+' requires operands of type int but rhs is 	ERROR(25): '+' requires operands of type int but rhs is 
ERROR(26): Symbol 'linda' is not defined.			ERROR(26): Symbol 'linda' is not defined.
ERROR(27): Symbol 'linda' is not defined.			ERROR(27): Symbol 'linda' is not defined.
ERROR(27): '+' requires operands of type int but rhs is 	ERROR(27): '+' requires operands of type int but rhs is 
ERROR(31): The operation '+' does not work with arrays.		ERROR(31): The operation '+' does not work with arrays.
ERROR(32): The operation '+' does not work with arrays.		ERROR(32): The operation '+' does not work with arrays.
ERROR(32): '=' requires operands of the same type but lh	ERROR(32): '=' requires operands of the same type but lh
ERROR(33): 'and' requires operands of type bool but lhs 	ERROR(33): 'and' requires operands of type bool but lhs 
ERROR(33): 'and' requires operands of type bool but rhs 	ERROR(33): 'and' requires operands of type bool but rhs 
ERROR(33): The operation 'and' does not work with arrays	ERROR(33): The operation 'and' does not work with arrays
ERROR(33): '=' requires operands of the same type but lh	ERROR(33): '=' requires operands of the same type but lh
ERROR(34): The operation '+' does not work with arrays.		ERROR(34): The operation '+' does not work with arrays.
ERROR(34): Symbol 'xylophone' is not defined.			ERROR(34): Symbol 'xylophone' is not defined.
ERROR(37): '+' requires operands of type int but lhs is 	ERROR(37): '+' requires operands of type int but lhs is 
ERROR(38): '+' requires operands of type int but rhs is 	ERROR(38): '+' requires operands of type int but rhs is 
ERROR(39): '+' requires operands of type int but rhs is 	ERROR(39): '+' requires operands of type int but rhs is 
ERROR(41): '+' requires operands of type int but rhs is 	ERROR(41): '+' requires operands of type int but rhs is 
ERROR(42): Too many parameters passed for function 'anni	ERROR(42): Too many parameters passed for function 'anni
WARNING(12): Expecting to return type int but function '	WARNING(12): Expecting to return type int but function '
							   |	Number of warnings: 1
Symbol Stack:						   |	Number of errors: 27
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
     annie    globals 1 Func annie returns type void all   <
							   <
        wu    globals 1 Func wu returns type void alloca   <
							   <
      fred    globals 1 Func fred returns type void allo   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: assign.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: basicAll.c-
-rw------- 1 jenny jenny  5183 Nov 21 12:41 basicAll.c-
-rw------- 1 jenny jenny  7386 Dec 10 18:12 basicAll.expected
-rw-r--r-- 1 jenny jenny  9025 Dec 12 22:55 basicAll.out
-rw-r--r-- 1 jenny jenny 12288 Dec 12 22:55 basicAll.tm
basicAll.out ztmp9829.txt differ: byte 7306, line 103
basicAll (Output DIFF)
ERROR(16): Symbol 'cat' is not defined.				ERROR(16): Symbol 'cat' is not defined.
ERROR(18): Function 'dog' at line 12 is expecting to ret	ERROR(18): Function 'dog' at line 12 is expecting to ret
ERROR(25): Function 'cat' at line 21 is expecting to ret	ERROR(25): Function 'cat' at line 21 is expecting to ret
ERROR(28): Symbol 'cat' is already defined at line 21.		ERROR(28): Symbol 'cat' is already defined at line 21.
ERROR(39): Function 'ox' at line 37 is expecting no retu	ERROR(39): Function 'ox' at line 37 is expecting no retu
WARNING(42): Expecting to return type int but function '	WARNING(42): Expecting to return type int but function '
ERROR(53): Symbol 'x' is already defined at line 52.		ERROR(53): Symbol 'x' is already defined at line 52.
ERROR(54): Symbol 'x' is already defined at line 52.		ERROR(54): Symbol 'x' is already defined at line 52.
ERROR(62): Symbol 'v' is not defined.				ERROR(62): Symbol 'v' is not defined.
ERROR(64): Expecting Boolean test condition in if statem	ERROR(64): Expecting Boolean test condition in if statem
ERROR(65): Expecting Boolean test condition in while sta	ERROR(65): Expecting Boolean test condition in while sta
ERROR(66): Expecting Boolean test condition in while sta	ERROR(66): Expecting Boolean test condition in while sta
ERROR(68): Cannot use function 'cat' as a simple variabl	ERROR(68): Cannot use function 'cat' as a simple variabl
ERROR(69): '=' requires operands of the same type but lh	ERROR(69): '=' requires operands of the same type but lh
ERROR(70): '+=' requires operands of type int but rhs is	ERROR(70): '+=' requires operands of type int but rhs is
ERROR(71): '-=' requires operands of type int but lhs is	ERROR(71): '-=' requires operands of type int but lhs is
ERROR(72): '>' requires operands of type char or type in	ERROR(72): '>' requires operands of type char or type in
ERROR(73): Unary '++' requires an operand of type int bu	ERROR(73): Unary '++' requires an operand of type int bu
ERROR(75): Cannot use array as test condition in if stat	ERROR(75): Cannot use array as test condition in if stat
ERROR(76): Cannot use array as test condition in while s	ERROR(76): Cannot use array as test condition in while s
ERROR(78): Cannot have a break statement outside of loop	ERROR(78): Cannot have a break statement outside of loop
ERROR(82): The operation '+' does not work with arrays.		ERROR(82): The operation '+' does not work with arrays.
ERROR(83): The operation '<' does not work with arrays.		ERROR(83): The operation '<' does not work with arrays.
ERROR(84): '<' requires operands of type char or type in	ERROR(84): '<' requires operands of type char or type in
ERROR(84): '<' requires operands of type char or type in	ERROR(84): '<' requires operands of type char or type in
ERROR(84): The operation '<' does not work with arrays.		ERROR(84): The operation '<' does not work with arrays.
ERROR(86): '==' requires operands of the same type but l	ERROR(86): '==' requires operands of the same type but l
ERROR(90): '+' requires operands of type int but lhs is 	ERROR(90): '+' requires operands of type int but lhs is 
ERROR(92): '*' requires operands of type int but rhs is 	ERROR(92): '*' requires operands of type int but rhs is 
ERROR(94): Unary 'not' requires an operand of type bool 	ERROR(94): Unary 'not' requires an operand of type bool 
ERROR(95): '+' requires operands of type int but rhs is 	ERROR(95): '+' requires operands of type int but rhs is 
ERROR(95): Unary 'not' requires an operand of type bool 	ERROR(95): Unary 'not' requires an operand of type bool 
ERROR(96): Unary '-' requires an operand of type int but	ERROR(96): Unary '-' requires an operand of type int but
ERROR(98): Cannot index nonarray 'x'.				ERROR(98): Cannot index nonarray 'x'.
ERROR(99): 'and' requires operands of type bool but lhs 	ERROR(99): 'and' requires operands of type bool but lhs 
ERROR(99): 'and' requires operands of type bool but rhs 	ERROR(99): 'and' requires operands of type bool but rhs 
ERROR(99): '*' requires operands of type int but rhs is 	ERROR(99): '*' requires operands of type int but rhs is 
ERROR(100): Symbol 'y' is not defined.				ERROR(100): Symbol 'y' is not defined.
ERROR(100): 'and' requires operands of type bool but lhs	ERROR(100): 'and' requires operands of type bool but lhs
ERROR(100): '*' requires operands of type int but rhs is	ERROR(100): '*' requires operands of type int but rhs is
ERROR(101): 'and' requires operands of type bool but lhs	ERROR(101): 'and' requires operands of type bool but lhs
ERROR(101): 'and' requires operands of type bool but rhs	ERROR(101): 'and' requires operands of type bool but rhs
ERROR(101): '*' requires operands of type int but rhs is	ERROR(101): '*' requires operands of type int but rhs is
ERROR(101): 'or' requires operands of type bool but rhs 	ERROR(101): 'or' requires operands of type bool but rhs 
ERROR(103): The operation '*' only works with arrays.		ERROR(103): The operation '*' only works with arrays.
ERROR(104): 'and' requires operands of type bool but lhs	ERROR(104): 'and' requires operands of type bool but lhs
ERROR(108): Array 'aa' should be indexed by type int but	ERROR(108): Array 'aa' should be indexed by type int but
ERROR(110): Cannot use function 'cat' as a simple variab	ERROR(110): Cannot use function 'cat' as a simple variab
ERROR(112): Array index is the unindexed array 'aa'.		ERROR(112): Array index is the unindexed array 'aa'.
ERROR(113): Symbol 'AA' is not defined.				ERROR(113): Symbol 'AA' is not defined.
ERROR(115): Symbol 'meerkat' is not defined.			ERROR(115): Symbol 'meerkat' is not defined.
ERROR(117): Symbol 'xyzzy' is not defined.			ERROR(117): Symbol 'xyzzy' is not defined.
ERROR(118): Symbol 'meerkat' is not defined.			ERROR(118): Symbol 'meerkat' is not defined.
ERROR(119): Symbol 'xyzzy' is not defined.			ERROR(119): Symbol 'xyzzy' is not defined.
ERROR(119): 'and' requires operands of type bool but rhs	ERROR(119): 'and' requires operands of type bool but rhs
ERROR(121): Symbol 'flight' is not defined.			ERROR(121): Symbol 'flight' is not defined.
ERROR(121): Unary 'not' requires an operand of type bool	ERROR(121): Unary 'not' requires an operand of type bool
ERROR(121): Unary '-' requires an operand of type int bu	ERROR(121): Unary '-' requires an operand of type int bu
ERROR(121): Symbol 'uu' is not defined.				ERROR(121): Symbol 'uu' is not defined.
ERROR(121): Symbol 'y' is not defined.				ERROR(121): Symbol 'y' is not defined.
ERROR(121): '*' requires operands of type int but rhs is	ERROR(121): '*' requires operands of type int but rhs is
ERROR(123): 'x' is a simple variable and cannot be calle	ERROR(123): 'x' is a simple variable and cannot be calle
ERROR(125): Too many parameters passed for function 'dog	ERROR(125): Too many parameters passed for function 'dog
ERROR(126): Too few parameters passed for function 'ibex	ERROR(126): Too few parameters passed for function 'ibex
ERROR(128): Expecting type int in parameter 1 of call to	ERROR(128): Expecting type int in parameter 1 of call to
ERROR(130): Not expecting array in parameter 1 of call t	ERROR(130): Not expecting array in parameter 1 of call t
ERROR(132): Expecting array in parameter 1 of call to 'i	ERROR(132): Expecting array in parameter 1 of call to 'i
ERROR(133): Expecting type int in parameter 1 of call to	ERROR(133): Expecting type int in parameter 1 of call to
ERROR(134): Cannot use function 'ibex' as a simple varia	ERROR(134): Cannot use function 'ibex' as a simple varia
ERROR(136): Cannot use function 'ibex' as a simple varia	ERROR(136): Cannot use function 'ibex' as a simple varia
ERROR(136): '+' requires operands of type int but lhs is	ERROR(136): '+' requires operands of type int but lhs is
ERROR(139): Array index is the unindexed array 'zz'.		ERROR(139): Array index is the unindexed array 'zz'.
ERROR(140): Expecting type int in parameter 1 of call to	ERROR(140): Expecting type int in parameter 1 of call to
ERROR(140): Array 'aa' should be indexed by type int but	ERROR(140): Array 'aa' should be indexed by type int but
ERROR(142): '=' requires operands of the same type but l	ERROR(142): '=' requires operands of the same type but l
ERROR(143): '+' requires operands of type int but rhs is	ERROR(143): '+' requires operands of type int but rhs is
ERROR(144): Expecting type int in parameter 1 of call to	ERROR(144): Expecting type int in parameter 1 of call to
ERROR(145): Expecting type int in parameter 1 of call to	ERROR(145): Expecting type int in parameter 1 of call to
ERROR(148): '=' requires operands of the same type but l	ERROR(148): '=' requires operands of the same type but l
ERROR(149): '=' requires operands of the same type but l	ERROR(149): '=' requires operands of the same type but l
ERROR(150): '=' requires operands of the same type but l	ERROR(150): '=' requires operands of the same type but l
ERROR(150): '=' requires operands of the same type but l	ERROR(150): '=' requires operands of the same type but l
ERROR(150): '=' requires operands of the same type but l	ERROR(150): '=' requires operands of the same type but l
ERROR(152): '*' requires operands of type int but rhs is	ERROR(152): '*' requires operands of type int but rhs is
ERROR(152): '*' requires operands of type int but lhs is	ERROR(152): '*' requires operands of type int but lhs is
ERROR(152): 'and' requires operands of type bool but lhs	ERROR(152): 'and' requires operands of type bool but lhs
ERROR(152): 'and' requires operands of type bool but rhs	ERROR(152): 'and' requires operands of type bool but rhs
ERROR(154): '+' requires operands of type int but rhs is	ERROR(154): '+' requires operands of type int but rhs is
ERROR(154): Symbol 'parrot' is not defined.			ERROR(154): Symbol 'parrot' is not defined.
ERROR(154): 'and' requires operands of type bool but rhs	ERROR(154): 'and' requires operands of type bool but rhs
ERROR(154): Expecting type int in parameter 3 of call to	ERROR(154): Expecting type int in parameter 3 of call to
ERROR(155): Expecting type int in parameter 1 of call to	ERROR(155): Expecting type int in parameter 1 of call to
ERROR(155): '+' requires operands of type int but rhs is	ERROR(155): '+' requires operands of type int but rhs is
ERROR(155): Symbol 'parrot' is not defined.			ERROR(155): Symbol 'parrot' is not defined.
ERROR(155): 'and' requires operands of type bool but rhs	ERROR(155): 'and' requires operands of type bool but rhs
ERROR(155): Expecting type int in parameter 3 of call to	ERROR(155): Expecting type int in parameter 3 of call to
ERROR(155): 'and' requires operands of type bool but rhs	ERROR(155): 'and' requires operands of type bool but rhs
ERROR(155): Expecting type int in parameter 2 of call to	ERROR(155): Expecting type int in parameter 2 of call to
ERROR(155): Expecting type int in parameter 3 of call to	ERROR(155): Expecting type int in parameter 3 of call to
ERROR(155): Too many parameters passed for function 'emu	ERROR(155): Too many parameters passed for function 'emu
ERROR(155): '*' requires operands of type int but rhs is	ERROR(155): '*' requires operands of type int but rhs is
ERROR(157): Cannot return an array.				ERROR(157): Cannot return an array.
							   |	Number of warnings: 1
Symbol Stack:						   |	Number of errors: 101
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
       cat    globals 1 Func cat returns type int alloca   <
							   <
unusedGlobal    globals 1 Var unusedGlobal  of type int    <
							   <
      ibex    globals 1 Func ibex returns type bool allo   <
							   <
        ox    globals 1 Func ox returns type void alloca   <
							   <
       emu    globals 1 Func emu returns type int alloca   <
							   <
 OvisAries    globals 1 Func OvisAries returns type void   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: basicAll.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: battleship.c-
-rw------- 1 jenny jenny  4582 Nov 20 21:16 battleship.c-
-rw------- 1 jenny jenny  2735 Dec 10 18:12 battleship.expected
-rw------- 1 jenny jenny    51 Nov 21 11:33 battleship.in
-rw-r--r-- 1 jenny jenny 15049 Dec 12 22:55 battleship.out
-rw-r--r-- 1 jenny jenny  1785 Dec 12 22:55 battleship.tm
battleship.out ztmp9829.txt differ: byte 1, line 1
battleship (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
  shipsize    globals 1 Var shipsize  of type int alloca   <
							   <
  NumShots    globals 1 Var NumShots  of type int alloca   <
							   <
   NumHits    globals 1 Var NumHits  of type int allocat   <
							   <
    iseven    globals 1 Var iseven  of type bool allocat   <
							   <
     Print    globals 1 Func Print returns type void all   <
							   <
   NewLine    globals 1 Func NewLine returns type void a   <
							   <
   Display    globals 1 Func Display returns type void a   <
							   <
 Randomize    globals 1 Func Randomize returns type int    <
							   <
  HideShip    globals 1 Func HideShip returns type void    <
							   <
       Aim    globals 1 Func Aim returns type int alloca   <
							   <
RevealShip    globals 1 Func RevealShip returns type voi   <
							   <
      Fire    globals 1 Func Fire returns type int alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: battleship.tm					Loading file: battleship.tm
Halted							   |	entered: 311
Command 3 unknown.					   <

Commands are:						   |	10 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	4 4 4 4 4 4 4 4 4 4 
 g(o               Execute TM instructions until HALT	   |	4 4 4 4 4 4 4 4 4 4 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	4 4 4 4 4 4 4 4 4 4 
 l(oad filename    Load filename into memory (default is   |	4 4 4 4 4 4 4 4 4 4 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 34
 t(race            Toggle instruction tracing (printing)   |
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	9 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 4 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	4 4 4 4 0 4 4 4 4 4 
Command 3 unknown.					   |	4 4 4 4 4 4 4 4 4 4 
							   |	4 4 4 4 4 4 4 4 4 4 
Commands are:						   |	4 4 4 4 4 4 4 4 4 4 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	entered: 45
 g(o               Execute TM instructions until HALT	   |
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	8 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	4 4 4 4 0 4 4 4 4 4 
 t(race            Toggle instruction tracing (printing)   |	4 4 4 4 4 0 4 4 4 4 
 u(nprompt)        Unprompted for script input		   |	4 4 4 4 4 4 4 4 4 4 
 x(it              Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 4 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	entered: 56
Command 4 unknown.					   |
							   |
Commands are:						   |	7 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	4 4 4 4 0 4 4 4 4 4 
 g(o               Execute TM instructions until HALT	   |	4 4 4 4 4 0 4 4 4 4 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	4 4 4 4 4 4 0 4 4 4 
 l(oad filename    Load filename into memory (default is   |	4 4 4 4 4 4 4 4 4 4 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 11
 t(race            Toggle instruction tracing (printing)   |
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	6 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 0 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	4 4 4 4 0 4 4 4 4 4 
Command 5 unknown.					   |	4 4 4 4 4 0 4 4 4 4 
							   |	4 4 4 4 4 4 0 4 4 4 
Commands are:						   |	4 4 4 4 4 4 4 4 4 4 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	entered: 22
 g(o               Execute TM instructions until HALT	   |
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	5 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 0 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 0 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	4 4 4 4 0 4 4 4 4 4 
 t(race            Toggle instruction tracing (printing)   |	4 4 4 4 4 0 4 4 4 4 
 u(nprompt)        Unprompted for script input		   |	4 4 4 4 4 4 0 4 4 4 
 x(it              Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 4 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	entered: 33
Command 1 unknown.					   |
							   |
Commands are:						   |	4 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 0 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 0 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	4 4 4 0 0 4 4 4 4 4 
 g(o               Execute TM instructions until HALT	   |	4 4 4 4 4 0 4 4 4 4 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	4 4 4 4 4 4 0 4 4 4 
 l(oad filename    Load filename into memory (default is   |	4 4 4 4 4 4 4 4 4 4 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 44
 t(race            Toggle instruction tracing (printing)   |
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	3 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 0 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 0 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	4 4 4 0 0 4 4 4 4 4 
Command 2 unknown.					   |	4 4 4 4 0 0 4 4 4 4 
							   |	4 4 4 4 4 4 0 4 4 4 
Commands are:						   |	4 4 4 4 4 4 4 4 4 4 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	entered: 55
 g(o               Execute TM instructions until HALT	   |
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	2 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 0 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 0 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	4 4 4 0 0 4 4 4 4 4 
 t(race            Toggle instruction tracing (printing)   |	4 4 4 4 0 0 4 4 4 4 
 u(nprompt)        Unprompted for script input		   |	4 4 4 4 4 0 0 4 4 4 
 x(it              Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 4 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	entered: 66 
Command 3 unknown.					   |
							   |
Commands are:						   |	1 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 0 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 0 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	4 4 4 0 0 4 4 4 4 4 
 g(o               Execute TM instructions until HALT	   |	4 4 4 4 0 0 4 4 4 4 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	4 4 4 4 4 0 0 4 4 4 
 l(oad filename    Load filename into memory (default is   |	4 4 4 4 4 4 0 4 4 4 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 77 
 t(race            Toggle instruction tracing (printing)   |
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
 = <r> <n>         Set register number r to value n (e.g   |
 < <addr> <value>  Set dMem at addr to value		   |	2 2 2 2 2 2 2 2 2 2 
 (empty line does a step)				   |	2 0 2 2 2 2 2 2 2 2 
Also a # character placed after input will cause TM to h   |	2 2 0 2 2 2 2 2 2 2 
Command 4 unknown.					   |	2 2 2 0 0 2 2 2 2 2 
							   |	2 2 2 2 0 0 2 2 2 2 
Commands are:						   |	2 2 2 2 2 0 0 2 2 2 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	2 2 2 2 2 2 0 2 7 2 
 c(lear            Reset simulator for new execution of    |	2 2 2 2 2 2 2 0 7 2 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	2 2 2 2 2 2 2 2 7 2 
 e(xecStats        Print execution statistics since last   |	2 2 2 2 2 2 2 2 7 2 
 g(o               Execute TM instructions until HALT	   |	Halted
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: break2.c-
-rw------- 1 jenny jenny  317 Nov 20 21:16 break2.c-
-rw------- 1 jenny jenny  222 Dec 10 18:12 break2.expected
-rw-r--r-- 1 jenny jenny 2042 Dec 12 22:55 break2.out
-rw-r--r-- 1 jenny jenny 5250 Dec 12 22:55 break2.tm
break2.out ztmp9829.txt differ: byte 1, line 1
break2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
FuncK->size: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: break2.tm						Loading file: break2.tm
0 0 								0 0 
0 1 								0 1 
0 1 							   |	0 2 
0 1 							   |	0 3 
0 1 							   |	0 4 
0 1 							   |	0 5 
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
0 1 							   <
Halted								Halted
Bye.								Bye.
====================================
FILE: break.c-
-rw------- 1 jenny jenny  360 Nov 20 21:16 break.c-
-rw------- 1 jenny jenny  397 Dec 10 18:12 break.expected
-rw-r--r-- 1 jenny jenny 1509 Dec 12 22:55 break.out
-rw-r--r-- 1 jenny jenny 4096 Dec 12 22:55 break.tm
break.out ztmp9829.txt differ: byte 12, line 1
break (Output DIFF)
ERROR(20): Cannot have a break statement outside of loop   <
ERROR(20): Expecting Boolean test condition in if statem	ERROR(20): Expecting Boolean test condition in if statem
ERROR(22): Cannot have a break statement outside of loop   |	ERROR(20): Cannot have a break statement outside of loop
ERROR(21): Expecting Boolean test condition in if statem	ERROR(21): Expecting Boolean test condition in if statem
							   |	ERROR(22): Cannot have a break statement outside of loop
Symbol Stack:						   |	ERROR(LINKER): Procedure main is not defined.
              globals ---- 				   |	Number of warnings: 0
   outputc    globals 1 Func outputc returns type void a   |	Number of errors: 5
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
frozenOnTheCuspOfForeverTheSpacecraftHungLikeATimelessDe   <
							   <
FuncK->size: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: break.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: call2.c-
-rw------- 1 jenny jenny  236 Nov 21 11:59 call2.c-
-rw------- 1 jenny jenny  195 Dec 10 18:12 call2.expected
-rw-r--r-- 1 jenny jenny 1408 Dec 12 22:55 call2.out
-rw-r--r-- 1 jenny jenny 1935 Dec 12 22:55 call2.tm
call2.out ztmp9829.txt differ: byte 1, line 1
call2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  of type bool allocated as   <
							   <
         h    globals 1 Var h  is array of type bool all   <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: call2.tm						Loading file: call2.tm
Halted							   |	343 Halted
Bye.								Bye.
====================================
FILE: call5.c-
-rw------- 1 jenny jenny  341 Dec  2 11:05 call5.c-
-rw------- 1 jenny jenny  306 Dec 10 18:12 call5.expected
-rw-r--r-- 1 jenny jenny 1778 Dec 12 22:55 call5.out
-rw-r--r-- 1 jenny jenny 8346 Dec 12 22:55 call5.tm
call5.out ztmp9829.txt differ: byte 87, line 2
call5 (Output DIFF)
WARNING(16): Expecting to return type int but function '	WARNING(16): Expecting to return type int but function '
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  of type int allocated as    <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
       cat    globals 1 Func cat returns type void alloc   <
							   <
       elk    globals 1 Func elk returns type void alloc   <
							   <
       fox    globals 1 Func fox returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -3						   <
toff: -3						   <
FuncK->size: -3						   <
toff: -3						   <
FuncK->size: -3						   <
toff: -3						   <
FuncK->size: -3						   <
toff: -3						   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 1						Number of warnings: 1
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: call5.tm						Loading file: call5.tm
1279 Halted						   |	1279 111 222 666 1332 0 2220 Halted
Bye.								Bye.
====================================
FILE: call.c-
-rw------- 1 jenny jenny  1380 Nov 20 21:16 call.c-
-rw------- 1 jenny jenny   556 Dec 10 18:12 call.expected
-rw-r--r-- 1 jenny jenny  2819 Dec 12 22:55 call.out
-rw-r--r-- 1 jenny jenny 25783 Dec 12 22:55 call.tm
call.out ztmp9829.txt differ: byte 275, line 4
call (Output DIFF)
WARNING(3): Expecting to return type int but function 's	WARNING(3): Expecting to return type int but function 's
WARNING(9): Expecting to return type int but function 's	WARNING(9): Expecting to return type int but function 's
WARNING(20): Expecting to return type int but function '	WARNING(20): Expecting to return type int but function '
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
   showInt    globals 1 Func showInt returns type int al   <
							   <
showIntArray    globals 1 Func showIntArray returns type   <
							   <
  showBool    globals 1 Func showBool returns type int a   <
							   <
     truth    globals 1 Func truth returns type bool all   <
							   <
     magic    globals 1 Func magic returns type int allo   <
							   <
       sqr    globals 1 Func sqr returns type int alloca   <
							   <
       add    globals 1 Func add returns type int alloca   <
							   <
       mul    globals 1 Func mul returns type int alloca   <
							   <
         g    globals 1 Var g  of type int allocated as    <
							   <
    caller    globals 1 Func caller returns type void al   <
							   <
      swap    globals 1 Func swap returns type void allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -3						   <
FuncK->size: -5						   <
toff: -5						   <
toff: -5						   <
FuncK->size: -3						   <
FuncK->size: -2						   <
FuncK->size: -2						   <
FuncK->size: -3						   <
toff: -3						   <
FuncK->size: -4						   <
toff: -4						   <
FuncK->size: -4						   <
toff: -4						   <
FuncK->size: -6						   <
FuncK->size: -6						   <
FuncK->size: -26					   <
toff: -26						   <
toff: -32						   <
toff: -37						   <
toff: -37						   <
toff: -38						   <
toff: -35						   <
toff: -37						   <
toff: -37						   <
toff: -38						   <
toff: -35						   <
toff: -38						   <
toff: -38						   <
toff: -39						   <
toff: -36						   <
Loop through global scope				   <
Number of warnings: 3						Number of warnings: 3
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: call.tm						Loading file: call.tm
							   >	111 
							   >	0 1 2 3 4 5 6 333 8 9 
							   >	T 
							   >	111 
							   >	0 T 
							   >	0 12321 
							   >	110889 
							   >	443556 
							   >	603729 
							   >	24975 
							   >	333 
							   >	6360 
Halted								Halted
Bye.								Bye.
====================================
FILE: charout.c-
-rw------- 1 jenny jenny  271 Dec  5 15:18 charout.c-
-rw------- 1 jenny jenny 1092 Dec 10 18:12 charout.expected
-rw------- 1 jenny jenny   15 Dec 10 18:09 charout.in
-rw-r--r-- 1 jenny jenny   37 Dec 12 22:55 charout.out
charout.out ztmp9829.txt differ: byte 1, line 1
charout (Output DIFF)
							   >	Number of warnings: 0
							   >	Number of errors: 0
------------------------------------				------------------------------------
							   >
							   >	Memory Configuration: Data Addresses: 0-9999  Instructio
							   >	Loading file: charout.tm
							   >	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
							   >	X X X X X X X X X X X X X X X 
							   >	X  X  X  X  X  X  X  X  X  X  
							   >	X   X   X   X   X   X   X   X 
							   >	X    X    X    X    X    X    
							   >	X     X     X     X     X     
							   >	X      X      X      X      X 
							   >	X       X       X       X     
							   >	X        X        X        X  
							   >	X         X         X         
							   >	X          X          X       
							   >	X           X           X     
							   >	X            X            X   
							   >	X             X             X 
							   >	X              X              
							   >	X               X             
							   >	X                X            
							   >	X                 X           
							   >	X                  X          
							   >	X                   X         
							   >	X                    X        
							   >	X                     X       
							   >	X                      X      
							   >	X                       X     
							   >	X                        X    
							   >	X                         X   
							   >	X                          X  
							   >	X                           X 
							   >	X                            X
							   >	Halted
							   >	Bye.
====================================
FILE: comb.c-
-rw------- 1 jenny jenny  457 Nov 20 21:16 comb.c-
-rw------- 1 jenny jenny  591 Dec 10 18:12 comb.expected
-rw------- 1 jenny jenny   17 Nov 21 11:33 comb.in
-rw-r--r-- 1 jenny jenny 1284 Dec 12 22:55 comb.out
-rw-r--r-- 1 jenny jenny 7121 Dec 12 22:55 comb.tm
comb.out ztmp9829.txt differ: byte 1, line 1
comb (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      comb    globals 1 Func comb returns type int alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -7						   <
toff: -7						   <
toff: -7						   <
toff: -7						   <
toff: -7						   <
toff: -7						   <
toff: -7						   <
toff: -7						   <
FuncK->size: -6						   <
toff: -6						   <
toff: -6						   <
toff: -7						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: comb.tm						Loading file: comb.tm
							   >	4 2 6 
							   >	5 2 10 
							   >	6 2 15 
							   >	6 3 20 
							   >	7 2 21 
							   >	7 3 35 
							   >	8 2 28 
							   >	8 3 56 
							   >	8 4 70 
							   >	9 2 36 
							   >	9 3 84 
							   >	9 4 126 
							   >	10 2 45 
							   >	10 3 120 
							   >	10 4 210 
							   >	10 5 252 
							   >	11 2 55 
							   >	11 3 165 
							   >	11 4 330 
							   >	11 5 462 
							   >	12 2 66 
							   >	12 3 220 
							   >	12 4 495 
							   >	12 5 792 
							   >	12 6 924 
							   >	13 2 78 
							   >	13 3 286 
							   >	13 4 715 
							   >	13 5 1287 
							   >	13 6 1716 
							   >	14 2 91 
							   >	14 3 364 
							   >	14 4 1001 
							   >	14 5 2002 
							   >	14 6 3003 
							   >	14 7 3432 
							   >	15 2 105 
							   >	15 3 455 
							   >	15 4 1365 
							   >	15 5 3003 
							   >	15 6 5005 
							   >	15 7 6435 
Halted								Halted
Bye.								Bye.
====================================
FILE: combslow.c-
-rw------- 1 jenny jenny  593 Nov 20 21:16 combslow.c-
-rw------- 1 jenny jenny  543 Dec 10 18:12 combslow.expected
-rw------- 1 jenny jenny   24 Nov 21 11:33 combslow.in
-rw-r--r-- 1 jenny jenny 4753 Dec 12 22:55 combslow.out
-rw-r--r-- 1 jenny jenny 8949 Dec 12 22:55 combslow.tm
combslow.out ztmp9829.txt differ: byte 1, line 1
combslow (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      comb    globals 1 Func comb returns type int alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -6						   <
toff: -6						   <
toff: -7						   <
toff: -4						   <
toff: -7						   <
FuncK->size: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: combslow.tm					Loading file: combslow.tm
							   >	entered: 12
							   >	1 
							   >	1 1 
							   >	1 2 1 
							   >	1 3 3 1 
							   >	1 4 6 4 1 
							   >	1 5 10 10 5 1 
							   >	1 6 15 20 15 6 1 
							   >	1 7 21 35 35 21 7 1 
							   >	1 8 28 56 70 56 28 8 1 
							   >	1 9 36 84 126 126 84 36 9 1 
							   >	1 10 45 120 210 252 210 120 45 10 1 
							   >	1 11 55 165 330 462 462 330 165 55 11 1 
							   >	1 12 66 220 495 792 924 792 495 220 66 12 1 
							   >	entered: 5
							   >	1 
							   >	1 1 
							   >	1 2 1 
							   >	1 3 3 1 
							   >	1 4 6 4 1 
							   >	1 5 10 10 5 1 
							   >	entered: 0
Halted								Halted
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: compare.c-
-rw------- 1 jenny jenny   444 Nov 20 21:16 compare.c-
-rw------- 1 jenny jenny   229 Dec 10 18:12 compare.expected
-rw-r--r-- 1 jenny jenny  1281 Dec 12 22:55 compare.out
-rw-r--r-- 1 jenny jenny 11108 Dec 12 22:55 compare.tm
compare.out ztmp9829.txt differ: byte 1, line 1
compare (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: compare.tm					Loading file: compare.tm
T F F F T F T F F T T T T T T T T T Halted		   |	T F F F T F F F T T T F F T T T F T Halted
Bye.								Bye.
====================================
FILE: compound.c-
-rw------- 1 jenny jenny  215 Nov 20 21:16 compound.c-
-rw------- 1 jenny jenny  125 Dec 10 18:12 compound.expected
-rw-r--r-- 1 jenny jenny 1516 Dec 12 22:55 compound.out
-rw-r--r-- 1 jenny jenny    0 Dec 12 22:55 compound.tm
compound.out ztmp9829.txt differ: byte 1, line 1
compound (Output DIFF)
							   |	ERROR(LINKER): Procedure main is not defined.
Symbol Stack:						   |	Number of warnings: 0
              globals ---- 				   |	Number of errors: 1
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
     adama    globals 1 Func adama returns type void all   <
							   <
    roslin    globals 1 Func roslin returns type void al   <
							   <
  starbuck    globals 1 Func starbuck returns type void    <
							   <
    apollo    globals 1 Func apollo returns type void al   <
							   <
 numberSix    globals 1 Func numberSix returns type void   <
							   <
FuncK->size: -2						   <
FuncK->size: -2						   <
FuncK->size: -2						   <
FuncK->size: -5						   <
FuncK->size: -2						   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: compound.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: control2.c-
-rw------- 1 jenny jenny  318 Nov 20 21:16 control2.c-
-rw------- 1 jenny jenny  281 Dec 10 18:12 control2.expected
-rw-r--r-- 1 jenny jenny 2196 Dec 12 22:55 control2.out
-rw-r--r-- 1 jenny jenny 7194 Dec 12 22:55 control2.tm
control2.out ztmp9829.txt differ: byte 1, line 1
control2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: control2.tm					Loading file: control2.tm
7 							   |	666 
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 							   <
1 1 								1 1 
Halted							   |	1 2 
							   >	1 3 
							   >	1 4 
							   >	2 1 
							   >	2 2 
							   >	2 3 
							   >	2 4 
							   >	3 1 
							   >	3 2 
							   >	3 3 
							   >	3 4 
							   >	4 1 
							   >	4 2 
							   >	4 3 
							   >	4 4 
							   >	5 Halted
Bye.								Bye.
====================================
FILE: control.c-
-rw------- 1 jenny jenny  212 Nov 20 21:16 control.c-
-rw------- 1 jenny jenny  193 Dec 10 18:12 control.expected
-rw-r--r-- 1 jenny jenny 1110 Dec 12 22:55 control.out
-rw-r--r-- 1 jenny jenny 3994 Dec 12 22:55 control.tm
control.out ztmp9829.txt differ: byte 1, line 1
control (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -3						   <
toff: -3						   <
toff: -3						   <
toff: -3						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: control.tm					Loading file: control.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: e.c-
-rw------- 1 jenny jenny  244 Nov 20 21:16 e.c-
-rw------- 1 jenny jenny  217 Dec 10 18:12 e.expected
-rw-r--r-- 1 jenny jenny 1242 Dec 12 22:55 e.out
-rw-r--r-- 1 jenny jenny 7097 Dec 12 22:55 e.tm
e.out ztmp9829.txt differ: byte 1, line 1
e (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
toff: -4						   <
toff: -5						   <
toff: -6						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -5						   <
toff: -6						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: e.tm						Loading file: e.tm
1110 								1110 
1110 								1110 
-222 								-222 
-888 								-888 
-888 								-888 
Halted								Halted
Bye.								Bye.
====================================
FILE: errors2.c-
-rw------- 1 jenny jenny  97 Nov 20 21:16 errors2.c-
-rw------- 1 jenny jenny 253 Dec 10 18:12 errors2.expected
-rw------- 1 jenny jenny   0 Nov 14  2009 errors2.in
-rw-r--r-- 1 jenny jenny  37 Dec 12 22:55 errors2.out
errors2.out ztmp9829.txt differ: byte 1, line 1
errors2 (Output DIFF)
							   >	ERROR(5): Syntax error.  Unexpected '+'.  Expecting id.
							   >	ERROR(6): Syntax error.  Unexpected id: z.  Expecting nu
							   >	ERROR(7): Syntax error.  Unexpected '+'.  Expecting id.
							   >	Number of warnings: 0
							   >	Number of errors: 3
------------------------------------				------------------------------------
====================================
FILE: errors3.c-
-rw------- 1 jenny jenny  47 Nov 20 21:16 errors3.c-
-rw------- 1 jenny jenny 281 Dec 10 18:12 errors3.expected
-rw------- 1 jenny jenny   0 Nov 14  2009 errors3.in
-rw-r--r-- 1 jenny jenny  37 Dec 12 22:55 errors3.out
errors3.out ztmp9829.txt differ: byte 1, line 1
errors3 (Output DIFF)
							   >	ERROR(3): Syntax error.  Unexpected '%'.  Expecting bool
							   >	ERROR(6): Syntax error.  Unexpected '+'.
							   >	ERROR(8): Syntax error.  Unexpected '%'.
							   >	ERROR(8): Syntax error.  Unexpected '%'.
							   >	Number of warnings: 0
							   >	Number of errors: 4
------------------------------------				------------------------------------
====================================
FILE: errors4.c-
-rw------- 1 jenny jenny  722 Nov 20 21:16 errors4.c-
-rw------- 1 jenny jenny 2552 Dec 10 18:12 errors4.expected
-rw------- 1 jenny jenny    0 Nov 14  2009 errors4.in
-rw-r--r-- 1 jenny jenny   37 Dec 12 22:55 errors4.out
errors4.out ztmp9829.txt differ: byte 1, line 1
errors4 (Output DIFF)
							   >	ERROR(3): Syntax error.  Unexpected '+'.  Expecting id.
							   >	ERROR(7): Syntax error.  Unexpected '+'.  Expecting id.
							   >	ERROR(14): Syntax error.  Unexpected '{'.  Expecting ';'
							   >	ERROR(16): Syntax error.  Unexpected '+'.  Expecting id.
							   >	ERROR(17): Syntax error.  Unexpected '+'.
							   >	WARNING(18): Invalid input character: ^.  Character igno
							   >	ERROR(19): Syntax error.  Unexpected '+'.
							   >	ERROR(19): Syntax error.  Unexpected ';'.
							   >	ERROR(20): Syntax error.  Unexpected '+'.
							   >	ERROR(22): Syntax error.  Unexpected '+'.
							   >	ERROR(23): Syntax error.  Unexpected '+'.
							   >	ERROR(24): Syntax error.  Unexpected '+'.
							   >	ERROR(24): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(25): Syntax error.  Unexpected '+'.
							   >	ERROR(25): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(25): Syntax error.  Unexpected else.
							   >	ERROR(26): Syntax error.  Unexpected '+'.
							   >	ERROR(26): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(26): Syntax error.  Unexpected else.
							   >	ERROR(27): Syntax error.  Unexpected '+'.
							   >	ERROR(27): Syntax error.  Unexpected id: x.  Expecting '
							   >	ERROR(28): Syntax error.  Unexpected '+'.
							   >	ERROR(28): Syntax error.  Unexpected if.  Expecting or o
							   >	ERROR(29): Syntax error.  Unexpected '+'.
							   >	ERROR(30): Syntax error.  Unexpected '+'.
							   >	ERROR(30): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(30): Syntax error.  Unexpected else.
							   >	ERROR(31): Syntax error.  Unexpected else.
							   >	ERROR(32): Syntax error.  Unexpected ';'.
							   >	ERROR(33): Syntax error.  Unexpected '+'.
							   >	ERROR(33): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(34): Syntax error.  Unexpected '+'.
							   >	ERROR(35): Syntax error.  Unexpected if.  Expecting ')'.
							   >	ERROR(35): Syntax error.  Unexpected id: x.  Expecting '
							   >	ERROR(36): Syntax error.  Unexpected if.  Expecting ')'.
							   >	ERROR(36): Syntax error.  Unexpected id: x.  Expecting '
							   >	ERROR(37): Syntax error.  Unexpected if.  Expecting ')'.
							   >	ERROR(37): Syntax error.  Unexpected ';'.
							   >	ERROR(38): Syntax error.  Unexpected while.  Expecting '
							   >	ERROR(38): Syntax error.  Unexpected id: x.  Expecting '
							   >	ERROR(39): Syntax error.  Unexpected while.  Expecting '
							   >	ERROR(39): Syntax error.  Unexpected ';'.
							   >	ERROR(42): Syntax error.  Unexpected ';'.  Expecting ')'
							   >	ERROR(43): Syntax error.  Unexpected '+'.
							   >	ERROR(43): Syntax error.  Unexpected ';'.  Expecting ')'
							   >	ERROR(44): Syntax error.  Unexpected ';'.  Expecting ')'
							   >	ERROR(45): Syntax error.  Unexpected ';'.  Expecting ')'
							   >	ERROR(48): Syntax error.  Unexpected '}'.  Expecting ')'
							   >	Number of warnings: 1
							   >	Number of errors: 47
------------------------------------				------------------------------------
====================================
FILE: errors.c-
-rw------- 1 jenny jenny  75 Nov 20 21:16 errors.c-
-rw------- 1 jenny jenny 193 Dec 10 18:12 errors.expected
-rw------- 1 jenny jenny   0 Nov 14  2009 errors.in
-rw-r--r-- 1 jenny jenny  37 Dec 12 22:55 errors.out
errors.out ztmp9829.txt differ: byte 1, line 1
errors (Output DIFF)
							   >	ERROR(4): Syntax error.  Unexpected ';'.  Expecting ')'.
							   >	ERROR(6): Syntax error.  Unexpected ')'.  Expecting ';'.
							   >	Number of warnings: 0
							   >	Number of errors: 2
------------------------------------				------------------------------------
====================================
FILE: everything.c-
-rw------- 1 jenny jenny  1698 Nov 20 21:16 everything.c-
-rw------- 1 jenny jenny   210 Dec 10 18:12 everything.expected
-rw-r--r-- 1 jenny jenny  2339 Dec 12 22:55 everything.out
-rw-r--r-- 1 jenny jenny 21481 Dec 12 22:55 everything.tm
everything.out ztmp9829.txt differ: byte 1, line 1
everything (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
    gromit    globals 1 Var gromit  of type int allocate   <
							   <
   wallace    globals 1 Func wallace returns type void a   <
							   <
 Wendolene    globals 1 Func Wendolene returns type int    <
							   <
ramsBottom    globals 1 Func ramsBottom returns type boo   <
							   <
    cheese    globals 1 Func cheese returns type int all   <
							   <
Wensleydale    globals 1 Func Wensleydale returns type i   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
FuncK->size: -26					   <
toff: -26						   <
toff: -27						   <
toff: -26						   <
toff: -26						   <
toff: -26						   <
toff: -26						   <
toff: -26						   <
toff: -27						   <
toff: -26						   <
toff: -26						   <
toff: -27						   <
toff: -26						   <
toff: -26						   <
toff: -26						   <
toff: -27						   <
toff: -26						   <
toff: -27						   <
toff: -27						   <
toff: -26						   <
toff: -27						   <
toff: -28						   <
toff: -27						   <
toff: -28						   <
toff: -27						   <
toff: -28						   <
toff: -28						   <
toff: -26						   <
toff: -26						   <
toff: -26						   <
toff: -28						   <
toff: -30						   <
toff: -31						   <
toff: -28						   <
FuncK->size: -6						   <
toff: -6						   <
toff: -7						   <
toff: -7						   <
toff: -8						   <
FuncK->size: -16					   <
toff: -16						   <
toff: -19						   <
toff: -19						   <
toff: -19						   <
toff: -20						   <
toff: -20						   <
toff: -21						   <
toff: -16						   <
toff: -18						   <
toff: -20						   <
FuncK->size: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
FuncK->size: -4						   <
FuncK->size: -141					   <
toff: -143						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: everything.tm					Loading file: everything.tm
ERROR: Division by 0						ERROR: Division by 0
Bye.								Bye.
====================================
FILE: everythingUndef.c-
-rw------- 1 jenny jenny  1120 Nov 20 21:16 everythingUndef.c-
-rw------- 1 jenny jenny  2305 Dec 10 18:12 everythingUndef.expected
-rw------- 1 jenny jenny     0 Nov 14  2009 everythingUndef.in
-rw-r--r-- 1 jenny jenny  5167 Dec 12 22:55 everythingUndef.out
-rw-r--r-- 1 jenny jenny 17006 Dec 12 22:55 everythingUndef.tm
everythingUndef.out ztmp9829.txt differ: byte 263, line 7
everythingUndef (Output DIFF)
ERROR(10): Symbol 'close' is not defined.			ERROR(10): Symbol 'close' is not defined.
ERROR(11): Symbol 'close' is not defined.			ERROR(11): Symbol 'close' is not defined.
ERROR(11): Symbol 'shave' is not defined.			ERROR(11): Symbol 'shave' is not defined.
ERROR(13): Symbol 'gromit' is not defined.			ERROR(13): Symbol 'gromit' is not defined.
ERROR(13): Symbol 'gromit' is not defined.			ERROR(13): Symbol 'gromit' is not defined.
ERROR(14): Symbol 'gromit' is not defined.			ERROR(14): Symbol 'gromit' is not defined.
ERROR(14): '+=' requires operands of type int but lhs is   <
ERROR(15): Symbol 'gromit' is not defined.			ERROR(15): Symbol 'gromit' is not defined.
ERROR(15): '-=' requires operands of type int but lhs is   <
ERROR(16): Symbol 'close' is not defined.			ERROR(16): Symbol 'close' is not defined.
ERROR(16): Symbol 'gromit' is not defined.			ERROR(16): Symbol 'gromit' is not defined.
ERROR(16): '<=' requires operands of type char or type i   <
ERROR(17): Symbol 'shave' is not defined.			ERROR(17): Symbol 'shave' is not defined.
ERROR(17): Symbol 'gromit' is not defined.			ERROR(17): Symbol 'gromit' is not defined.
ERROR(17): '>=' requires operands of type char or type i   <
ERROR(19): Symbol 'a' is not defined.				ERROR(19): Symbol 'a' is not defined.
ERROR(19): Symbol 'grand' is not defined.			ERROR(19): Symbol 'grand' is not defined.
ERROR(19): Symbol 'day' is not defined.				ERROR(19): Symbol 'day' is not defined.
ERROR(19): Symbol 'out' is not defined.				ERROR(19): Symbol 'out' is not defined.
ERROR(21): Symbol 'close' is not defined.			ERROR(21): Symbol 'close' is not defined.
ERROR(22): Symbol 'shave' is not defined.			ERROR(22): Symbol 'shave' is not defined.
ERROR(23): Symbol 'shave' is not defined.			ERROR(23): Symbol 'shave' is not defined.
ERROR(23): Symbol 'close' is not defined.			ERROR(23): Symbol 'close' is not defined.
ERROR(23): Symbol 'shave' is not defined.			ERROR(23): Symbol 'shave' is not defined.
ERROR(23): Symbol 'close' is not defined.			ERROR(23): Symbol 'close' is not defined.
ERROR(23): Unary 'not' requires an operand of type bool    <
ERROR(24): Symbol 'shave' is not defined.			ERROR(24): Symbol 'shave' is not defined.
ERROR(24): Symbol 'close' is not defined.			ERROR(24): Symbol 'close' is not defined.
ERROR(24): Symbol 'close' is not defined.			ERROR(24): Symbol 'close' is not defined.
ERROR(24): Unary 'not' requires an operand of type bool    <
ERROR(24): Symbol 'shave' is not defined.			ERROR(24): Symbol 'shave' is not defined.
ERROR(25): Symbol 'close' is not defined.			ERROR(25): Symbol 'close' is not defined.
ERROR(26): Symbol 'shave' is not defined.			ERROR(26): Symbol 'shave' is not defined.
ERROR(27): Symbol 'sheep' is not defined.			ERROR(27): Symbol 'sheep' is not defined.
ERROR(28): Symbol 'sheep' is not defined.			ERROR(28): Symbol 'sheep' is not defined.
ERROR(28): '<' requires operands of type char or type in   <
ERROR(29): Symbol 'gromit' is not defined.			ERROR(29): Symbol 'gromit' is not defined.
ERROR(29): Symbol 'were' is not defined.			ERROR(29): Symbol 'were' is not defined.
ERROR(29): Symbol 'rabbit' is not defined.			ERROR(29): Symbol 'rabbit' is not defined.
ERROR(26): Expecting Boolean test condition in while sta   <
ERROR(41): Symbol 'chicken' is not defined.			ERROR(41): Symbol 'chicken' is not defined.
ERROR(41): Expecting array in parameter 3 of call to 'We	ERROR(41): Expecting array in parameter 3 of call to 'We
ERROR(41): Symbol 'run' is not defined.				ERROR(41): Symbol 'run' is not defined.
ERROR(41): Expecting array in parameter 4 of call to 'We	ERROR(41): Expecting array in parameter 4 of call to 'We
ERROR(43): Cannot use function 'wallace' as a simple var	ERROR(43): Cannot use function 'wallace' as a simple var
ERROR(43): Symbol 'gromit' is not defined.			ERROR(43): Symbol 'gromit' is not defined.
ERROR(43): Unary '-' requires an operand of type int but   <
ERROR(43): '>=' requires operands of type char or type i	ERROR(43): '>=' requires operands of type char or type i
ERROR(46): Symbol 'x' is not defined.				ERROR(46): Symbol 'x' is not defined.
ERROR(46): '>' requires operands of type char or type in   <
ERROR(46): Symbol 'y' is not defined.				ERROR(46): Symbol 'y' is not defined.
ERROR(46): '>' requires operands of type char or type in   <
ERROR(46): Symbol 'x' is not defined.				ERROR(46): Symbol 'x' is not defined.
ERROR(46): Unary '--' requires an operand of type int bu   <
ERROR(46): Symbol 'x' is not defined.				ERROR(46): Symbol 'x' is not defined.
ERROR(46): Symbol 'x' is not defined.				ERROR(46): Symbol 'x' is not defined.
ERROR(46): Symbol 'y' is not defined.				ERROR(46): Symbol 'y' is not defined.
ERROR(50): Too many parameters passed for function 'chee	ERROR(50): Too many parameters passed for function 'chee
ERROR(50): Symbol 'gromit' is not defined.			ERROR(50): Symbol 'gromit' is not defined.
WARNING(48): Expecting to return type int but function '	WARNING(48): Expecting to return type int but function '
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
   wallace    globals 1 Func wallace returns type void a   <
							   <
 Wendolene    globals 1 Func Wendolene returns type int    <
							   <
ramsBottom    globals 1 Func ramsBottom returns type boo   <
							   <
    cheese    globals 1 Func cheese returns type int all   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
FuncK->size: -4						   <
toff: -4						   <
toff: -5						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -5						   <
toff: -4						   <
toff: -4						   <
toff: -5						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -5						   <
toff: -4						   <
toff: -5						   <
toff: -5						   <
toff: -4						   <
toff: -5						   <
toff: -6						   <
toff: -5						   <
toff: -6						   <
toff: -5						   <
toff: -6						   <
toff: -6						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -6						   <
toff: -9						   <
FuncK->size: -6						   <
toff: -6						   <
FuncK->size: -2						   <
toff: -2						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -6						   <
toff: -6						   <
toff: -7						   <
toff: -3						   <
toff: -5						   <
FuncK->size: -2						   <
toff: -2						   <
toff: -2						   <
toff: -2						   <
toff: -2						   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 1						Number of warnings: 1
Number of errors: 59					   |	Number of errors: 47
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: everythingUndef.tm			   <
====================================
FILE: examplearray2.c-
-rw------- 1 jenny jenny  112 Nov 21 11:59 examplearray2.c-
-rw------- 1 jenny jenny  199 Dec 10 18:12 examplearray2.expected
-rw-r--r-- 1 jenny jenny 1333 Dec 12 22:55 examplearray2.out
-rw-r--r-- 1 jenny jenny 3371 Dec 12 22:55 examplearray2.tm
examplearray2.out ztmp9829.txt differ: byte 1, line 1
examplearray2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         w    globals 1 Var w  is array of type int allo   <
							   <
       dog    globals 1 Func dog returns type void alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -3						   <
FuncK->size: -23					   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: examplearray2.tm					Loading file: examplearray2.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: examplearray3.c-
-rw------- 1 jenny jenny  192 Nov 21 11:59 examplearray3.c-
-rw------- 1 jenny jenny  203 Dec 10 18:12 examplearray3.expected
-rw-r--r-- 1 jenny jenny 1321 Dec 12 22:55 examplearray3.out
-rw-r--r-- 1 jenny jenny 4062 Dec 12 22:55 examplearray3.tm
examplearray3.out ztmp9829.txt differ: byte 1, line 1
examplearray3 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       cat    globals 1 Func cat returns type void alloc   <
							   <
       dog    globals 1 Func dog returns type void alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
FuncK->size: -4						   <
FuncK->size: -14					   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: examplearray3.tm					Loading file: examplearray3.tm
1 Halted						   |	777 Halted
Bye.								Bye.
====================================
FILE: examplearray.c-
-rw------- 1 jenny jenny  179 Nov 21 11:59 examplearray.c-
-rw------- 1 jenny jenny  198 Dec 10 18:12 examplearray.expected
-rw-r--r-- 1 jenny jenny 1380 Dec 12 22:55 examplearray.out
-rw-r--r-- 1 jenny jenny 4560 Dec 12 22:55 examplearray.tm
examplearray.out ztmp9829.txt differ: byte 1, line 1
examplearray (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         w    globals 1 Var w  is array of type int allo   <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -27					   <
toff: -28						   <
toff: -28						   <
toff: -31						   <
toff: -31						   <
toff: -32						   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: examplearray.tm					Loading file: examplearray.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: example.c-
-rw------- 1 jenny jenny  248 Nov 21 11:59 example.c-
-rw------- 1 jenny jenny  193 Dec 10 18:12 example.expected
-rw-r--r-- 1 jenny jenny 1393 Dec 12 22:55 example.out
-rw-r--r-- 1 jenny jenny 5220 Dec 12 22:55 example.tm
example.out ztmp9829.txt differ: byte 1, line 1
example (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         w    globals 1 Var w  of type int allocated as    <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -6						   <
toff: -7						   <
toff: -5						   <
toff: -5						   <
toff: -6						   <
toff: -5						   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: example.tm					Loading file: example.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: exampleif.c-
-rw------- 1 jenny jenny   70 Nov 21 11:59 exampleif.c-
-rw------- 1 jenny jenny  195 Dec 10 18:12 exampleif.expected
-rw-r--r-- 1 jenny jenny 1094 Dec 12 22:55 exampleif.out
-rw-r--r-- 1 jenny jenny 2774 Dec 12 22:55 exampleif.tm
exampleif.out ztmp9829.txt differ: byte 1, line 1
exampleif (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -5						   <
toff: -5						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: exampleif.tm					Loading file: exampleif.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: exampleinit.c-
-rw------- 1 jenny jenny  631 Nov 21 11:59 exampleinit.c-
-rw------- 1 jenny jenny  197 Dec 10 18:12 exampleinit.expected
-rw-r--r-- 1 jenny jenny 1565 Dec 12 22:55 exampleinit.out
-rw-r--r-- 1 jenny jenny 2104 Dec 12 22:55 exampleinit.tm
exampleinit.out ztmp9829.txt differ: byte 1, line 1
exampleinit (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  of type int allocated as    <
							   <
        ga    globals 1 Var ga  is array of type int all   <
							   <
       s_1    globals 1 Var s_1  of type int allocated a   <
							   <
      sa_2    globals 1 Var sa_2  is array of type int a   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: exampleinit.tm					Loading file: exampleinit.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: exampleScope.c-
-rw------- 1 jenny jenny  190 Nov 21 14:00 exampleScope.c-
-rw------- 1 jenny jenny  198 Dec 10 18:12 exampleScope.expected
-rw-r--r-- 1 jenny jenny 1204 Dec 12 22:55 exampleScope.out
-rw-r--r-- 1 jenny jenny 2341 Dec 12 22:55 exampleScope.tm
exampleScope.out ztmp9829.txt differ: byte 1, line 1
exampleScope (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  of type int allocated as    <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -8						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: exampleScope.tm					Loading file: exampleScope.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: examplestatic.c-
-rw------- 1 jenny jenny  490 Nov 21 11:59 examplestatic.c-
-rw------- 1 jenny jenny  199 Dec 10 18:12 examplestatic.expected
-rw-r--r-- 1 jenny jenny 1318 Dec 12 22:55 examplestatic.out
-rw-r--r-- 1 jenny jenny 1945 Dec 12 22:55 examplestatic.tm
examplestatic.out ztmp9829.txt differ: byte 1, line 1
examplestatic (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  of type int allocated as    <
							   <
        ga    globals 1 Var ga  is array of type int all   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: examplestatic.tm					Loading file: examplestatic.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: examplewhile.c-
-rw------- 1 jenny jenny   65 Nov 21 11:59 examplewhile.c-
-rw------- 1 jenny jenny  198 Dec 10 18:12 examplewhile.expected
-rw-r--r-- 1 jenny jenny 1088 Dec 12 22:55 examplewhile.out
-rw-r--r-- 1 jenny jenny 2367 Dec 12 22:55 examplewhile.tm
examplewhile.out ztmp9829.txt differ: byte 1, line 1
examplewhile (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: examplewhile.tm					Loading file: examplewhile.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: exp2.c-
-rw------- 1 jenny jenny   481 Nov 20 21:16 exp2.c-
-rw------- 1 jenny jenny  3385 Dec 10 18:12 exp2.expected
-rw-r--r-- 1 jenny jenny  4886 Dec 12 22:55 exp2.out
-rw-r--r-- 1 jenny jenny 11153 Dec 12 22:55 exp2.tm
exp2.out ztmp9829.txt differ: byte 3306, line 46
exp2 (Output DIFF)
ERROR(11): '=' requires operands of the same type but lh	ERROR(11): '=' requires operands of the same type but lh
ERROR(12): '=' requires operands of the same type but lh	ERROR(12): '=' requires operands of the same type but lh
ERROR(13): '=' requires operands of the same type but lh	ERROR(13): '=' requires operands of the same type but lh
ERROR(15): '*' requires operands of type int but rhs is 	ERROR(15): '*' requires operands of type int but rhs is 
ERROR(15): '*' requires operands of type int but lhs is 	ERROR(15): '*' requires operands of type int but lhs is 
ERROR(15): '+' requires operands of type int but lhs is 	ERROR(15): '+' requires operands of type int but lhs is 
ERROR(15): '+' requires operands of type int but rhs is 	ERROR(15): '+' requires operands of type int but rhs is 
ERROR(15): '*' requires operands of type int but lhs is 	ERROR(15): '*' requires operands of type int but lhs is 
ERROR(15): '=' requires operands of the same type but lh	ERROR(15): '=' requires operands of the same type but lh
ERROR(16): '/' requires operands of type int but rhs is 	ERROR(16): '/' requires operands of type int but rhs is 
ERROR(16): '/' requires operands of type int but lhs is 	ERROR(16): '/' requires operands of type int but lhs is 
ERROR(16): '-' requires operands of type int but lhs is 	ERROR(16): '-' requires operands of type int but lhs is 
ERROR(16): '-' requires operands of type int but rhs is 	ERROR(16): '-' requires operands of type int but rhs is 
ERROR(16): '/' requires operands of type int but lhs is 	ERROR(16): '/' requires operands of type int but lhs is 
ERROR(16): '=' requires operands of the same type but lh	ERROR(16): '=' requires operands of the same type but lh
ERROR(17): '/' requires operands of type int but rhs is 	ERROR(17): '/' requires operands of type int but rhs is 
ERROR(17): '/' requires operands of type int but lhs is 	ERROR(17): '/' requires operands of type int but lhs is 
ERROR(17): '%' requires operands of type int but rhs is 	ERROR(17): '%' requires operands of type int but rhs is 
ERROR(17): '%' requires operands of type int but lhs is 	ERROR(17): '%' requires operands of type int but lhs is 
ERROR(17): '%' requires operands of type int but rhs is 	ERROR(17): '%' requires operands of type int but rhs is 
ERROR(17): '=' requires operands of the same type but lh	ERROR(17): '=' requires operands of the same type but lh
ERROR(22): '=' requires operands of the same type but lh	ERROR(22): '=' requires operands of the same type but lh
ERROR(23): '=' requires operands of the same type but lh	ERROR(23): '=' requires operands of the same type but lh
ERROR(25): 'and' requires operands of type bool but rhs 	ERROR(25): 'and' requires operands of type bool but rhs 
ERROR(25): 'and' requires operands of type bool but lhs 	ERROR(25): 'and' requires operands of type bool but lhs 
ERROR(25): 'and' requires operands of type bool but rhs 	ERROR(25): 'and' requires operands of type bool but rhs 
ERROR(25): 'or' requires operands of type bool but lhs i	ERROR(25): 'or' requires operands of type bool but lhs i
ERROR(25): 'and' requires operands of type bool but lhs 	ERROR(25): 'and' requires operands of type bool but lhs 
ERROR(25): '=' requires operands of the same type but lh	ERROR(25): '=' requires operands of the same type but lh
ERROR(26): Unary 'not' requires an operand of type bool 	ERROR(26): Unary 'not' requires an operand of type bool 
ERROR(26): '=' requires operands of the same type but lh	ERROR(26): '=' requires operands of the same type but lh
ERROR(36): Symbol 'x' is not defined.				ERROR(36): Symbol 'x' is not defined.
ERROR(37): Symbol 'x' is not defined.				ERROR(37): Symbol 'x' is not defined.
ERROR(39): '+' requires operands of type int but lhs is 	ERROR(39): '+' requires operands of type int but lhs is 
ERROR(39): '+' requires operands of type int but rhs is 	ERROR(39): '+' requires operands of type int but rhs is 
ERROR(39): '=' requires operands of the same type but lh	ERROR(39): '=' requires operands of the same type but lh
ERROR(40): Symbol 'x' is not defined.				ERROR(40): Symbol 'x' is not defined.
ERROR(40): '*' requires operands of type int but lhs is 	ERROR(40): '*' requires operands of type int but lhs is 
ERROR(40): '*' requires operands of type int but rhs is 	ERROR(40): '*' requires operands of type int but rhs is 
ERROR(40): '+' requires operands of type int but lhs is 	ERROR(40): '+' requires operands of type int but lhs is 
ERROR(40): '*' requires operands of type int but lhs is 	ERROR(40): '*' requires operands of type int but lhs is 
ERROR(40): Symbol 'x' is not defined.				ERROR(40): Symbol 'x' is not defined.
ERROR(40): '+' requires operands of type int but lhs is 	ERROR(40): '+' requires operands of type int but lhs is 
ERROR(40): '+' requires operands of type int but rhs is 	ERROR(40): '+' requires operands of type int but rhs is 
ERROR(43): '=' requires operands of the same type but lh	ERROR(43): '=' requires operands of the same type but lh
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  of type bool allocated as   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -43					   <
toff: -43						   <
toff: -44						   <
toff: -43						   <
toff: -44						   <
toff: -43						   <
toff: -44						   <
toff: -45						   <
toff: -43						   <
toff: -44						   <
toff: -43						   <
toff: -44						   <
toff: -43						   <
toff: -44						   <
toff: -45						   <
toff: -43						   <
toff: -43						   <
toff: -43						   <
toff: -44						   <
toff: -44						   <
toff: -43						   <
toff: -44						   <
toff: -43						   <
toff: -44						   <
toff: -43						   <
toff: -44						   <
toff: -43						   <
toff: -44						   <
toff: -45						   <
toff: -43						   <
toff: -47						   <
toff: -52						   <
toff: -54						   <
toff: -56						   <
toff: -56						   <
toff: -58						   <
toff: -57						   <
toff: -58						   <
toff: -60						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 45						Number of errors: 45
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: exp2.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: exp3.c-
-rw------- 1 jenny jenny   830 Nov 20 21:16 exp3.c-
-rw------- 1 jenny jenny   231 Dec 10 18:12 exp3.expected
-rw-r--r-- 1 jenny jenny  1320 Dec 12 22:55 exp3.out
-rw-r--r-- 1 jenny jenny 10014 Dec 12 22:55 exp3.tm
exp3.out ztmp9829.txt differ: byte 1, line 1
exp3 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -8						   <
toff: -8						   <
toff: -8						   <
toff: -9						   <
toff: -10						   <
toff: -11						   <
toff: -8						   <
toff: -8						   <
toff: -8						   <
toff: -8						   <
toff: -8						   <
toff: -9						   <
toff: -10						   <
toff: -11						   <
toff: -12						   <
toff: -8						   <
toff: -9						   <
toff: -10						   <
toff: -10						   <
toff: -10						   <
toff: -11						   <
toff: -12						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: exp3.tm						Loading file: exp3.tm
1 								1 
2 								2 
20000210 							20000210 
357948178 							357948178 
715896356 							715896356 
F 							   |	T 
Halted								Halted
Bye.								Bye.
====================================
FILE: exp.c-
-rw------- 1 jenny jenny   698 Nov 20 21:16 exp.c-
-rw------- 1 jenny jenny   606 Dec 10 18:12 exp.expected
-rw-r--r-- 1 jenny jenny  2255 Dec 12 22:55 exp.out
-rw-r--r-- 1 jenny jenny 14405 Dec 12 22:55 exp.tm
exp.out ztmp9829.txt differ: byte 528, line 10
exp (Output DIFF)
ERROR(25): 'and' requires operands of type bool but rhs 	ERROR(25): 'and' requires operands of type bool but rhs 
ERROR(25): 'or' requires operands of type bool but rhs i	ERROR(25): 'or' requires operands of type bool but rhs i
ERROR(34): '+' requires operands of type int but lhs is 	ERROR(34): '+' requires operands of type int but lhs is 
ERROR(34): '+' requires operands of type int but rhs is 	ERROR(34): '+' requires operands of type int but rhs is 
ERROR(34): '=' requires operands of the same type but lh	ERROR(34): '=' requires operands of the same type but lh
ERROR(39): Symbol 'x' is not defined.				ERROR(39): Symbol 'x' is not defined.
ERROR(40): Symbol 'x' is not defined.				ERROR(40): Symbol 'x' is not defined.
ERROR(43): Symbol 'x' is not defined.				ERROR(43): Symbol 'x' is not defined.
ERROR(43): Symbol 'x' is not defined.				ERROR(43): Symbol 'x' is not defined.
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         g    globals 1 Var g  of type int allocated as    <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -51					   <
toff: -51						   <
toff: -52						   <
toff: -51						   <
toff: -52						   <
toff: -51						   <
toff: -52						   <
toff: -53						   <
toff: -51						   <
toff: -52						   <
toff: -51						   <
toff: -52						   <
toff: -51						   <
toff: -52						   <
toff: -53						   <
toff: -51						   <
toff: -51						   <
toff: -51						   <
toff: -52						   <
toff: -52						   <
toff: -51						   <
toff: -52						   <
toff: -51						   <
toff: -52						   <
toff: -51						   <
toff: -52						   <
toff: -51						   <
toff: -52						   <
toff: -53						   <
toff: -51						   <
toff: -51						   <
toff: -51						   <
toff: -51						   <
toff: -51						   <
toff: -55						   <
toff: -60						   <
toff: -62						   <
toff: -64						   <
toff: -64						   <
toff: -66						   <
toff: -65						   <
toff: -66						   <
toff: -68						   <
toff: -66						   <
toff: -66						   <
toff: -66						   <
toff: -66						   <
toff: -66						   <
toff: -66						   <
toff: -66						   <
toff: -67						   <
toff: -68						   <
toff: -68						   <
toff: -69						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 9						Number of errors: 9
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: exp.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: factor.c-
-rw------- 1 jenny jenny   680 Nov 21 11:59 factor.c-
-rw------- 1 jenny jenny   327 Dec 10 18:12 factor.expected
-rw------- 1 jenny jenny    39 Nov 21 11:33 factor.in
-rw-r--r-- 1 jenny jenny  7176 Dec 12 22:55 factor.out
-rw-r--r-- 1 jenny jenny 11787 Dec 12 22:55 factor.tm
factor.out ztmp9829.txt differ: byte 1, line 1
factor (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      sqrt    globals 1 Func sqrt returns type int alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
FuncK->size: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
toff: -5						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: factor.tm						Loading file: factor.tm
entered: 210							entered: 210
							   >	2 3 5 7 
							   >	entered: 666
							   >	2 3 3 37 
							   >	entered: 4096
							   >	2 2 2 2 2 2 2 2 2 2 2 2 
							   >	entered: 3331
							   >	3331 
							   >	entered: 343
							   >	7 7 7 
							   >	entered: 0
Halted								Halted
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: factorial2.c-
-rw------- 1 jenny jenny  339 Nov 21 11:59 factorial2.c-
-rw------- 1 jenny jenny  256 Dec 10 18:12 factorial2.expected
-rw------- 1 jenny jenny   17 Nov 21 11:33 factorial2.in
-rw-r--r-- 1 jenny jenny 1235 Dec 12 22:55 factorial2.out
-rw-r--r-- 1 jenny jenny 5086 Dec 12 22:55 factorial2.tm
factorial2.out ztmp9829.txt differ: byte 1, line 1
factorial2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
 factorial    globals 1 Func factorial returns type int    <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -5						   <
toff: -5						   <
toff: -5						   <
FuncK->size: -3						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: factorial2.tm					Loading file: factorial2.tm
entered: 15							entered: 15
							   >	1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2004310016 
Halted								Halted
Bye.								Bye.
====================================
FILE: factorial.c-
-rw------- 1 jenny jenny  336 Nov 20 21:16 factorial.c-
-rw------- 1 jenny jenny  255 Dec 10 18:12 factorial.expected
-rw------- 1 jenny jenny   17 Nov 21 11:33 factorial.in
-rw-r--r-- 1 jenny jenny 1234 Dec 12 22:55 factorial.out
-rw-r--r-- 1 jenny jenny 5010 Dec 12 22:55 factorial.tm
factorial.out ztmp9829.txt differ: byte 1, line 1
factorial (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
 factorial    globals 1 Func factorial returns type int    <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -5						   <
toff: -5						   <
toff: -5						   <
FuncK->size: -3						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: factorial.tm					Loading file: factorial.tm
entered: 15							entered: 15
							   >	1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2004310016 
Halted								Halted
Bye.								Bye.
====================================
FILE: factorialr.c-
-rw------- 1 jenny jenny  262 Nov 21 11:59 factorialr.c-
-rw------- 1 jenny jenny  220 Dec 10 18:12 factorialr.expected
-rw------- 1 jenny jenny   17 Nov 21 11:33 factorialr.in
-rw-r--r-- 1 jenny jenny 1256 Dec 12 22:55 factorialr.out
-rw-r--r-- 1 jenny jenny 5150 Dec 12 22:55 factorialr.tm
factorialr.out ztmp9829.txt differ: byte 1, line 1
factorialr (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
 factorial    globals 1 Func factorial returns type int    <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -3						   <
toff: -3						   <
toff: -3						   <
toff: -6						   <
FuncK->size: -3						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: factorialr.tm					Loading file: factorialr.tm
entered: 15							entered: 15
2004310016 							2004310016 
Halted								Halted
Bye.								Bye.
====================================
FILE: fractal.c-
-rw------- 1 jenny jenny 3162 Nov 20 21:16 fractal.c-
-rw------- 1 jenny jenny 6806 Dec 10 18:12 fractal.expected
-rw------- 1 jenny jenny   17 Nov 21 11:33 fractal.in
-rw-r--r-- 1 jenny jenny 2339 Dec 12 22:55 fractal.out
-rw-r--r-- 1 jenny jenny 1782 Dec 12 22:55 fractal.tm
fractal.out ztmp9829.txt differ: byte 1, line 1
fractal (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       TOP    globals 1 Var TOP  of type int allocated a   <
							   <
      LEFT    globals 1 Var LEFT  of type int allocated    <
							   <
    HEIGHT    globals 1 Var HEIGHT  of type int allocate   <
							   <
     WIDTH    globals 1 Var WIDTH  of type int allocated   <
							   <
     XStep    globals 1 Var XStep  of type int allocated   <
							   <
     YStep    globals 1 Var YStep  of type int allocated   <
							   <
      XMax    globals 1 Var XMax  of type int allocated    <
							   <
      YMax    globals 1 Var YMax  of type int allocated    <
							   <
      iter    globals 1 Var iter  of type int allocated    <
							   <
Mandelbrot    globals 1 Func Mandelbrot returns type voi   <
							   <
     Julia    globals 1 Func Julia returns type void all   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: fractal.tm					Loading file: fractal.tm
							   >	0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 
							   >	0 0 0 0 0 0 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
							   >	0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 F 
							   >	0 0 0 0 0 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 4 6 
							   >	0 0 0 0 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 6 
							   >	0 0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 6 7 
							   >	0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 4 4 5 T T 
							   >	0 0 0 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 5 5 6 F T 
							   >	0 0 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 5 6 6 6 8 F T 
							   >	0 0 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 5 T T 9 T T T T 
							   >	0 0 1 2 2 2 2 2 2 2 2 2 2 3 3 4 4 4 4 5 6 9 T T T T T T 
							   >	0 0 2 2 2 2 2 2 2 2 2 3 3 4 4 4 4 4 5 5 7 F T T T T T T 
							   >	0 1 2 2 2 2 2 2 2 3 3 5 5 5 4 4 5 5 6 7 T T T T T T T T 
							   >	0 2 2 2 2 2 3 3 3 4 5 F 7 6 7 7 6 6 7 8 T T T T T T T T 
							   >	0 2 2 2 3 3 3 3 4 4 5 9 T F F T T 8 8 T T T T T T T T T 
							   >	0 2 3 3 3 3 3 4 4 4 6 8 T T T T T T F T T T T T T T T T 
							   >	0 3 3 3 3 3 4 4 4 6 7 T T T T T T T T T T T T T T T T T 
							   >	0 3 3 3 3 4 5 5 6 T T T T T T T T T T T T T T T T T T T 
							   >	1 4 5 6 6 6 6 7 9 T T T T T T T T T T T T T T T T T T T 
							   >	2 6 7 9 F F F F T T T T T T T T T T T T T T T T T T T T 
							   >	0 4 4 3 5 5 5 6 7 F T T T T T T T T T T T T T T T T T T 
							   >	0 3 3 3 3 4 4 5 6 T 8 T T T T T T T T T T T T T T T T T 
							   >	0 2 3 3 3 3 4 4 4 5 6 9 T T T T T T T T T T T T T T T T 
							   >	0 2 2 3 3 3 3 4 4 4 6 7 T T T T T T 9 T T T T T T T T T 
							   >	0 2 2 2 3 3 3 3 4 4 5 T 8 8 9 F 8 7 7 F T T T T T T T T 
							   >	0 1 2 2 2 2 2 3 3 3 5 T 6 5 6 6 6 6 6 7 T T T T T T T T 
							   >	0 1 2 2 2 2 2 2 2 2 3 4 4 4 4 4 4 5 5 6 T T T T T T T T 
							   >	0 0 2 2 2 2 2 2 2 2 2 2 3 4 4 4 4 4 5 5 7 9 T T T T T T 
							   >	0 0 1 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 5 6 T T T T T T T 
							   >	0 0 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 4 5 T T 8 9 T T T 
							   >	0 0 0 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 4 5 5 6 7 T T 
							   >	0 0 0 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 5 6 9 T 
							   >	0 0 0 0 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 5 7 F 
							   >	0 0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 5 7 
							   >	0 0 0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 6 
							   >	0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 7 
							   >	0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 4 
							   >	0 0 0 0 0 0 0 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
							   >
							   >	0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
							   >	0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
							   >	0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 
							   >	0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 
							   >	0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 3 
							   >	0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 
							   >	0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 
							   >	0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 
							   >	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 
							   >	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 
							   >	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 
							   >	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 4 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 4 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 6 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 4 4 5 
							   >	1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 4 4 4 5 
							   >	1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 4 4 4 4 5 6 
							   >	0 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 4 4 4 4 5 5 6 
							   >	0 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 4 4 4 5 5 5 6 
							   >	0 1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 4 4 5 5 5 5 6 8 
							   >	0 1 1 1 1 1 1 1 2 2 2 2 3 3 3 3 3 3 3 4 4 5 5 5 5 6 7 F 
							   >	0 1 1 1 1 1 1 1 2 2 2 3 3 3 3 3 3 3 4 4 6 7 6 6 6 7 8 T 
							   >	0 0 1 1 1 1 1 1 2 2 2 3 3 3 3 4 4 4 5 5 7 T 8 8 T 8 9 T 
							   >	0 0 1 1 1 1 1 1 2 2 3 4 4 4 4 4 5 5 5 7 8 T T T T T T 8 
							   >	0 0 1 1 1 1 1 1 2 2 4 7 6 5 5 6 6 6 7 F T 8 9 8 8 F F 7 
							   >	0 0 0 1 1 1 1 1 2 2 4 9 T T T 7 7 8 8 T 8 7 6 6 6 7 T 8 
							   >	0 0 0 1 1 1 1 1 1 2 3 5 5 6 7 T T F T 7 6 5 5 5 6 7 T F 
							   >	0 0 0 0 1 1 1 1 1 2 3 3 4 4 6 T 7 6 9 6 5 5 5 5 5 5 7 9 
							   >	0 0 0 0 1 1 1 1 1 2 2 3 3 4 5 F 5 5 4 4 4 3 4 4 4 4 5 6 
							   >	0 0 0 0 0 1 1 1 1 1 2 2 3 3 7 6 4 4 3 3 3 3 3 3 4 4 4 5 
							   >	0 0 0 0 0 1 1 1 1 1 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 
							   >	0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 
							   >	0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 
Halted								Halted
Bye.								Bye.
====================================
FILE: funcaa.c-
-rw------- 1 jenny jenny  249 Nov 20 21:16 funcaa.c-
-rw------- 1 jenny jenny  192 Dec 10 18:12 funcaa.expected
-rw-r--r-- 1 jenny jenny 1314 Dec 12 22:55 funcaa.out
-rw-r--r-- 1 jenny jenny 4540 Dec 12 22:55 funcaa.tm
funcaa.out ztmp9829.txt differ: byte 1, line 1
funcaa (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       cat    globals 1 Func cat returns type void alloc   <
							   <
       dog    globals 1 Func dog returns type void alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -3						   <
FuncK->size: -27					   <
FuncK->size: -20					   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: funcaa.tm						Loading file: funcaa.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: func.c-
-rw------- 1 jenny jenny  451 Nov 20 21:16 func.c-
-rw------- 1 jenny jenny  528 Dec 10 18:12 func.expected
-rw-r--r-- 1 jenny jenny 2609 Dec 12 22:55 func.out
-rw-r--r-- 1 jenny jenny 4074 Dec 12 22:55 func.tm
func.out ztmp9829.txt differ: byte 450, line 6
func (Output DIFF)
ERROR(10): Function 'bat' at line 8 is expecting to retu	ERROR(10): Function 'bat' at line 8 is expecting to retu
ERROR(56): Expecting type int in parameter 2 of call to 	ERROR(56): Expecting type int in parameter 2 of call to 
ERROR(56): Expecting array in parameter 2 of call to 'do	ERROR(56): Expecting array in parameter 2 of call to 'do
ERROR(56): Expecting type bool in parameter 3 of call to	ERROR(56): Expecting type bool in parameter 3 of call to
ERROR(56): Not expecting array in parameter 3 of call to	ERROR(56): Not expecting array in parameter 3 of call to
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       ant    globals 1 Func ant returns type int alloca   <
							   <
       bat    globals 1 Func bat returns type bool alloc   <
							   <
       cat    globals 1 Func cat returns type void alloc   <
							   <
       dog    globals 1 Func dog returns type int alloca   <
							   <
       eel    globals 1 Var eel  of type int allocated a   <
							   <
       fox    globals 1 Var fox  is array of type bool a   <
							   <
       gnu    globals 1 Func gnu returns type void alloc   <
							   <
       hog    globals 1 Func hog returns type void alloc   <
							   <
     junko    globals 1 Func junko returns type void all   <
							   <
       max    globals 1 Func max returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
FuncK->size: -3						   <
FuncK->size: -3						   <
FuncK->size: -6						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 5						Number of errors: 5
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: func.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: funcdef.c-
-rw------- 1 jenny jenny  125 Nov 20 21:16 funcdef.c-
-rw------- 1 jenny jenny  677 Dec 10 18:12 funcdef.expected
-rw-r--r-- 1 jenny jenny 1879 Dec 12 22:55 funcdef.out
-rw-r--r-- 1 jenny jenny    0 Dec 12 22:55 funcdef.tm
funcdef.out ztmp9829.txt differ: byte 553, line 9
funcdef (Output DIFF)
ERROR(5): Symbol 'z' is already defined at line 3.		ERROR(5): Symbol 'z' is already defined at line 3.
WARNING(5): Expecting to return type int but function 'z	WARNING(5): Expecting to return type int but function 'z
WARNING(9): Expecting to return type int but function 'y	WARNING(9): Expecting to return type int but function 'y
ERROR(13): Symbol 'y' is already defined at line 9.		ERROR(13): Symbol 'y' is already defined at line 9.
ERROR(20): 'x' is a simple variable and cannot be called	ERROR(20): 'x' is a simple variable and cannot be called
WARNING(15): Expecting to return type int but function '	WARNING(15): Expecting to return type int but function '
ERROR(25): Cannot use function 'x' as a simple variable.	ERROR(25): Cannot use function 'x' as a simple variable.
WARNING(23): Expecting to return type int but function '	WARNING(23): Expecting to return type int but function '
							   |	ERROR(LINKER): Procedure main is not defined.
Symbol Stack:						   |	Number of warnings: 4
              globals ---- 				   |	Number of errors: 5
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         z    globals 1 Var z  of type int allocated as    <
							   <
         y    globals 1 Func y returns type int allocate   <
							   <
         x    globals 1 Func x returns type int allocate   <
							   <
         w    globals 1 Func w returns type int allocate   <
							   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: funcdef.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: gcd.c-
-rw------- 1 jenny jenny  321 Nov 20 21:16 gcd.c-
-rw------- 1 jenny jenny  455 Dec 10 18:12 gcd.expected
-rw------- 1 jenny jenny   74 Nov 21 11:33 gcd.in
-rw-r--r-- 1 jenny jenny 1494 Dec 12 22:55 gcd.out
-rw-r--r-- 1 jenny jenny 5722 Dec 12 22:55 gcd.tm
gcd.out ztmp9829.txt differ: byte 1, line 1
gcd (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       gcd    globals 1 Func gcd returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
toff: -4						   <
toff: -7						   <
toff: -8						   <
toff: -8						   <
FuncK->size: -5						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: gcd.tm						Loading file: gcd.tm
entered: 60 							entered: 60 
entered: 210							entered: 210
30 								30 
Halted								Halted
Loading file: gcd.tm						Loading file: gcd.tm
entered: 210 							entered: 210 
entered: 60							entered: 60
30 								30 
Halted								Halted
Loading file: gcd.tm						Loading file: gcd.tm
entered: 8192 							entered: 8192 
entered: 496							entered: 496
16 								16 
Halted								Halted
Loading file: gcd.tm						Loading file: gcd.tm
entered: 1234 							entered: 1234 
entered: 4321							entered: 4321
1 								1 
Halted								Halted
Loading file: gcd.tm						Loading file: gcd.tm
entered: 216							entered: 216
entered: 666							entered: 666
18 								18 
Halted								Halted
Bye.								Bye.
====================================
FILE: gcdsm.c-
-rw------- 1 jenny jenny  173 Nov 20 21:16 gcdsm.c-
-rw------- 1 jenny jenny  460 Dec 10 18:12 gcdsm.expected
-rw------- 1 jenny jenny   74 Nov 21 11:33 gcdsm.in
-rw-r--r-- 1 jenny jenny 1499 Dec 12 22:55 gcdsm.out
-rw-r--r-- 1 jenny jenny 5335 Dec 12 22:55 gcdsm.tm
gcdsm.out ztmp9829.txt differ: byte 1, line 1
gcdsm (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       gcd    globals 1 Func gcd returns type int alloca   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
toff: -4						   <
toff: -7						   <
toff: -8						   <
toff: -8						   <
FuncK->size: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: gcdsm.tm						Loading file: gcdsm.tm
entered: 60 							entered: 60 
entered: 210							entered: 210
30 Halted							30 Halted
Loading file: gcdsm.tm						Loading file: gcdsm.tm
entered: 210 							entered: 210 
entered: 60							entered: 60
30 Halted							30 Halted
Loading file: gcdsm.tm						Loading file: gcdsm.tm
entered: 8192 							entered: 8192 
entered: 496							entered: 496
16 Halted							16 Halted
Loading file: gcdsm.tm						Loading file: gcdsm.tm
entered: 1234 							entered: 1234 
entered: 4321							entered: 4321
1 Halted							1 Halted
Loading file: gcdsm.tm						Loading file: gcdsm.tm
entered: 216							entered: 216
entered: 666							entered: 666
18 Halted							18 Halted
Bye.								Bye.
====================================
FILE: globalArray.c-
-rw------- 1 jenny jenny  135 Nov 20 21:16 globalArray.c-
-rw------- 1 jenny jenny  203 Dec 10 18:12 globalArray.expected
-rw-r--r-- 1 jenny jenny 1321 Dec 12 22:55 globalArray.out
-rw-r--r-- 1 jenny jenny 2092 Dec 12 22:55 globalArray.tm
globalArray.out ztmp9829.txt differ: byte 1, line 1
globalArray (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         x    globals 1 Var x  is array of type int allo   <
							   <
         b    globals 1 Var b  is array of type bool all   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: globalArray.tm					Loading file: globalArray.tm
Halted							   |	666 T Halted
Bye.								Bye.
====================================
FILE: global.c-
-rw------- 1 jenny jenny  122 Nov 20 21:16 global.c-
-rw------- 1 jenny jenny  198 Dec 10 18:12 global.expected
-rw-r--r-- 1 jenny jenny 1298 Dec 12 22:55 global.out
-rw-r--r-- 1 jenny jenny 1781 Dec 12 22:55 global.tm
global.out ztmp9829.txt differ: byte 1, line 1
global (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         x    globals 1 Var x  of type int allocated as    <
							   <
         b    globals 1 Var b  of type bool allocated as   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: global.tm						Loading file: global.tm
Halted							   |	666 T Halted
Bye.								Bye.
====================================
FILE: globals.c-
-rw------- 1 jenny jenny   52 Nov 20 21:16 globals.c-
-rw------- 1 jenny jenny  125 Dec 10 18:12 globals.expected
-rw-r--r-- 1 jenny jenny 1527 Dec 12 22:55 globals.out
-rw-r--r-- 1 jenny jenny    0 Dec 12 22:55 globals.tm
globals.out ztmp9829.txt differ: byte 1, line 1
globals (Output DIFF)
							   |	ERROR(LINKER): Procedure main is not defined.
Symbol Stack:						   |	Number of warnings: 0
              globals ---- 				   |	Number of errors: 1
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         x    globals 1 Var x  of type int allocated as    <
							   <
         y    globals 1 Var y  of type int allocated as    <
							   <
         z    globals 1 Var z  of type int allocated as    <
							   <
         a    globals 1 Var a  is array of type bool all   <
							   <
         b    globals 1 Var b  is array of type bool all   <
							   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: globals.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: if.c-
-rw------- 1 jenny jenny  159 Nov 20 21:16 if.c-
-rw------- 1 jenny jenny  196 Dec 10 18:12 if.expected
-rw-r--r-- 1 jenny jenny 1104 Dec 12 22:55 if.out
-rw-r--r-- 1 jenny jenny 4351 Dec 12 22:55 if.tm
if.out ztmp9829.txt differ: byte 1, line 1
if (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
toff: -4						   <
toff: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: if.tm						Loading file: if.tm
666 23 								666 23 
Halted								Halted
Bye.								Bye.
====================================
FILE: init.c-
-rw------- 1 jenny jenny  746 Dec 10 18:02 init.c-
-rw------- 1 jenny jenny  247 Dec 10 18:12 init.expected
-rw-r--r-- 1 jenny jenny 1534 Dec 12 22:55 init.out
-rw-r--r-- 1 jenny jenny 1936 Dec 12 22:55 init.tm
init.out ztmp9829.txt differ: byte 1, line 1
init (Output DIFF)
ERROR(44): Symbol 'y' is already defined at line 8.	   <
ERROR(47): The operation '*' only works with arrays.	   <
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
        ga    globals 1 Var ga  of type int allocated as   <
							   <
        gb    globals 1 Var gb  of type bool allocated a   <
							   <
        gc    globals 1 Var gc  is array of type char al   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 2					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: init.tm						Loading file: init.tm
							   >	111 
							   >	T 
							   >	13 
							   >	666 
							   >	a
							   >	T 
							   >	T 
							   >	T 
							   >	10 
							   >	26 
							   >	-46 
							   >	666 
							   >	15 
							   >	20 
							   >	F 
Halted								Halted
Bye.								Bye.
====================================
FILE: io.c-
-rw------- 1 jenny jenny   525 Nov 20 21:16 io.c-
-rw------- 1 jenny jenny   305 Dec 10 18:12 io.expected
-rw------- 1 jenny jenny    28 Nov 21 11:33 io.in
-rw-r--r-- 1 jenny jenny  1276 Dec 12 22:55 io.out
-rw-r--r-- 1 jenny jenny 10541 Dec 12 22:55 io.tm
io.out ztmp9829.txt differ: byte 1, line 1
io (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
toff: -7						   <
toff: -7						   <
toff: -6						   <
toff: -6						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: io.tm						Loading file: io.tm
777 F 								777 F 
666 								666 
-666 -666 							-666 -666 
666 666 							666 666 
entered: 667							entered: 667
667 								667 
entered: T							entered: T
T 								T 
entered: 6							entered: 6
entered: 36							entered: 36
216 								216 
entered: T							entered: T
entered: F							entered: F
F 								F 
Halted								Halted
Bye.								Bye.
====================================
FILE: localArray.c-
-rw------- 1 jenny jenny  148 Nov 20 21:16 localArray.c-
-rw------- 1 jenny jenny  202 Dec 10 18:12 localArray.expected
-rw-r--r-- 1 jenny jenny 1092 Dec 12 22:55 localArray.out
-rw-r--r-- 1 jenny jenny 3505 Dec 12 22:55 localArray.tm
localArray.out ztmp9829.txt differ: byte 1, line 1
localArray (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -11					   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: localArray.tm					Loading file: localArray.tm
2 T Halted						   |	666 T Halted
Bye.								Bye.
====================================
FILE: local.c-
-rw------- 1 jenny jenny  123 Nov 20 21:16 local.c-
-rw------- 1 jenny jenny  197 Dec 10 18:12 local.expected
-rw-r--r-- 1 jenny jenny 1087 Dec 12 22:55 local.out
-rw-r--r-- 1 jenny jenny 3116 Dec 12 22:55 local.tm
local.out ztmp9829.txt differ: byte 1, line 1
local (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: local.tm						Loading file: local.tm
666 F Halted						   |	666 T Halted
Bye.								Bye.
====================================
FILE: logic2.c-
-rw------- 1 jenny jenny  283 Nov 21 12:21 logic2.c-
-rw------- 1 jenny jenny 1211 Dec 10 18:12 logic2.expected
-rw-r--r-- 1 jenny jenny 2314 Dec 12 22:55 logic2.out
-rw-r--r-- 1 jenny jenny 7137 Dec 12 22:55 logic2.tm
logic2.out ztmp9829.txt differ: byte 1132, line 12
logic2 (Output DIFF)
ERROR(6): Expecting type int in parameter 1 of call to '	ERROR(6): Expecting type int in parameter 1 of call to '
ERROR(7): Expecting type int in parameter 1 of call to '	ERROR(7): Expecting type int in parameter 1 of call to '
ERROR(10): Expecting type int in parameter 1 of call to 	ERROR(10): Expecting type int in parameter 1 of call to 
ERROR(11): Expecting type int in parameter 1 of call to 	ERROR(11): Expecting type int in parameter 1 of call to 
ERROR(12): Expecting type int in parameter 1 of call to 	ERROR(12): Expecting type int in parameter 1 of call to 
ERROR(14): Expecting type int in parameter 1 of call to 	ERROR(14): Expecting type int in parameter 1 of call to 
ERROR(15): Expecting type int in parameter 1 of call to 	ERROR(15): Expecting type int in parameter 1 of call to 
ERROR(16): Expecting type int in parameter 1 of call to 	ERROR(16): Expecting type int in parameter 1 of call to 
ERROR(17): Expecting type int in parameter 1 of call to 	ERROR(17): Expecting type int in parameter 1 of call to 
ERROR(18): Expecting type int in parameter 1 of call to 	ERROR(18): Expecting type int in parameter 1 of call to 
ERROR(19): Expecting type int in parameter 1 of call to 	ERROR(19): Expecting type int in parameter 1 of call to 
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -4						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
toff: -6						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 11						Number of errors: 11
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: logic2.tm					   <
0 0 0 0 0 1 1 0 222 222 222 Halted			   <
Bye.							   <
====================================
FILE: logic.c-
-rw------- 1 jenny jenny  286 Nov 20 21:16 logic.c-
-rw------- 1 jenny jenny  209 Dec 10 18:12 logic.expected
-rw-r--r-- 1 jenny jenny 1171 Dec 12 22:55 logic.out
-rw-r--r-- 1 jenny jenny 6301 Dec 12 22:55 logic.tm
logic.out ztmp9829.txt differ: byte 1, line 1
logic (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: logic.tm						Loading file: logic.tm
F F F F 						   |	F F F T 
F F F F 						   |	F T T T 
Halted								Halted
Bye.								Bye.
====================================
FILE: loop.c-
-rw------- 1 jenny jenny  109 Nov 20 21:16 loop.c-
-rw------- 1 jenny jenny  190 Dec 10 18:12 loop.expected
-rw-r--r-- 1 jenny jenny 1080 Dec 12 22:55 loop.out
-rw-r--r-- 1 jenny jenny 2549 Dec 12 22:55 loop.tm
loop.out ztmp9829.txt differ: byte 1, line 1
loop (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -3						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: loop.tm						Loading file: loop.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: main2.c-
-rw------- 1 jenny jenny  112 Nov 20 21:16 main2.c-
-rw------- 1 jenny jenny  222 Dec 10 18:12 main2.expected
-rw------- 1 jenny jenny   20 Nov 21 11:33 main2.in
-rw-r--r-- 1 jenny jenny 1112 Dec 12 22:55 main2.out
-rw-r--r-- 1 jenny jenny 3653 Dec 12 22:55 main2.tm
main2.out ztmp9829.txt differ: byte 1, line 1
main2 (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: main2.tm						Loading file: main2.tm
666 F 							   |	666 T 
entered: 666							entered: 666
entered: T							entered: T
Halted								Halted
Bye.								Bye.
====================================
FILE: main3.c-
-rw------- 1 jenny jenny   85 Nov 20 21:16 main3.c-
-rw------- 1 jenny jenny  284 Dec 10 18:12 main3.expected
-rw-r--r-- 1 jenny jenny 1291 Dec 12 22:55 main3.out
-rw-r--r-- 1 jenny jenny 3168 Dec 12 22:55 main3.tm
main3.out ztmp9829.txt differ: byte 206, line 3
main3 (Output DIFF)
ERROR(4): Expecting type int in parameter 1 of call to '	ERROR(4): Expecting type int in parameter 1 of call to '
ERROR(5): Expecting type bool in parameter 1 of call to 	ERROR(5): Expecting type bool in parameter 1 of call to 
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 2						Number of errors: 2
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: main3.tm					   <
0 T 							   <
Halted							   <
Bye.							   <
====================================
FILE: main4.c-
-rw------- 1 jenny jenny   24 Nov 20 21:16 main4.c-
-rw------- 1 jenny jenny  277 Dec 10 18:12 main4.expected
-rw-r--r-- 1 jenny jenny 1166 Dec 12 22:55 main4.out
-rw-r--r-- 1 jenny jenny 2125 Dec 12 22:55 main4.tm
main4.out ztmp9829.txt differ: byte 87, line 2
main4 (Output DIFF)
WARNING(2): Expecting to return type int but function 'm	WARNING(2): Expecting to return type int but function 'm
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type int alloc   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 1						Number of warnings: 1
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: main4.tm						Loading file: main4.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: main5.c-
-rw------- 1 jenny jenny   78 Nov 20 21:16 main5.c-
-rw------- 1 jenny jenny  125 Dec 10 18:12 main5.expected
-rw-r--r-- 1 jenny jenny 1145 Dec 12 22:55 main5.out
-rw-r--r-- 1 jenny jenny    0 Dec 12 22:55 main5.tm
main5.out ztmp9829.txt differ: byte 1, line 1
main5 (Output DIFF)
							   |	ERROR(LINKER): Procedure main is not defined.
Symbol Stack:						   |	Number of warnings: 0
              globals ---- 				   |	Number of errors: 1
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
ThereIsNoProcedureCalledMainInThisFileToBeFoundAnywhereA   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: main5.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: main.c-
-rw------- 1 jenny jenny   35 Nov 20 21:16 main.c-
-rw------- 1 jenny jenny  190 Dec 10 18:12 main.expected
-rw-r--r-- 1 jenny jenny 1080 Dec 12 22:55 main.out
-rw-r--r-- 1 jenny jenny 2286 Dec 12 22:55 main.tm
main.out ztmp9829.txt differ: byte 1, line 1
main (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: main.tm						Loading file: main.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: massign.c-
-rw------- 1 jenny jenny  272 Nov 20 21:16 massign.c-
-rw------- 1 jenny jenny  193 Dec 10 18:12 massign.expected
-rw-r--r-- 1 jenny jenny 1231 Dec 12 22:55 massign.out
-rw-r--r-- 1 jenny jenny 4402 Dec 12 22:55 massign.tm
massign.out ztmp9829.txt differ: byte 1, line 1
massign (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
       dog    globals 1 Func dog returns type void alloc   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -17					   <
toff: -17						   <
toff: -19						   <
toff: -22						   <
FuncK->size: -26					   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: massign.tm					Loading file: massign.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: mastermind.c-
-rw------- 1 jenny jenny  3878 Nov 20 21:16 mastermind.c-
-rw------- 1 jenny jenny  1373 Dec 10 18:12 mastermind.expected
-rw------- 1 jenny jenny   252 Nov 21 11:33 mastermind.in
-rw-r--r-- 1 jenny jenny 95401 Dec 12 22:55 mastermind.out
-rw-r--r-- 1 jenny jenny  2268 Dec 12 22:55 mastermind.tm
mastermind.out ztmp9829.txt differ: byte 1, line 1
mastermind (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
     turns    globals 1 Var turns  of type int allocated   <
							   <
         n    globals 1 Var n  of type int allocated as    <
							   <
         r    globals 1 Var r  is array of type int allo   <
							   <
     known    globals 1 Var known  is array of type int    <
							   <
     guess    globals 1 Var guess  is array of type int    <
							   <
      rand    globals 1 Func rand returns type int alloc   <
							   <
    search    globals 1 Func search returns type bool al   <
							   <
     check    globals 1 Func check returns type bool all   <
							   <
      turn    globals 1 Func turn returns type bool allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: mastermind.tm					Loading file: mastermind.tm
Halted							   |	entered: 333331
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <

Commands are:						   |	1 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	entered: 1 
 c(lear            Reset simulator for new execution of    |	entered: 2 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	entered: 3 
 e(xecStats        Print execution statistics since last   |	entered: 4 
 g(o               Execute TM instructions until HALT	   |	1 1 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	2 
 l(oad filename    Load filename into memory (default is   |	entered: 2 
 p(rint            Toggle printing of total number instr   |	entered: 3 
 q(uit             Terminate the simulation		   |	entered: 4 
 r(egs             Print the contents of the registers	   |	entered: 5 
 s(tep <n>         Execute n (default 1) TM instructions   |	2 0 
 t(race            Toggle instruction tracing (printing)   |	3 
 u(nprompt)        Unprompted for script input		   |	entered: 3 
 x(it              Terminate the simulation		   |	entered: 4 
 = <r> <n>         Set register number r to value n (e.g   |	entered: 5 
 < <addr> <value>  Set dMem at addr to value		   |	entered: 6
 (empty line does a step)				   |	1 0 
Also a # character placed after input will cause TM to h   |	4 
Command 0 unknown.					   |	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	5 
							   >	entered: 1 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	1 1 
							   >	6 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	2 0 
							   >	7 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	entered: 6
							   >	1 0 
							   >	8 
							   >	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	9 
							   >	entered: 1 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	1 1 
							   >	10 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	2 0 
							   >	11 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	entered: 6
							   >	1 0 
							   >	12 
							   >	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	13 
							   >	entered: 1 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	1 1 
							   >	14 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	2 0 
							   >	15 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	entered: 6
							   >	1 0 
							   >	16 
							   >	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	17 
							   >	entered: 1 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	1 1 
							   >	18 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	2 0 
							   >	19 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	entered: 6
							   >	1 0 
							   >	20 
							   >	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	21 
							   >	F F F F F F F F F F 
							   >
							   >	0 
							   >	9 
							   >	3 
							   >	2 

Commands are:						   |	Halted
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: mem.c-
-rw------- 1 jenny jenny  238 Nov 20 21:16 mem.c-
-rw------- 1 jenny jenny  189 Dec 10 18:12 mem.expected
-rw-r--r-- 1 jenny jenny 1408 Dec 12 22:55 mem.out
-rw-r--r-- 1 jenny jenny 1931 Dec 12 22:55 mem.tm
mem.out ztmp9829.txt differ: byte 1, line 1
mem (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
         u    globals 1 Var u  of type int allocated as    <
							   <
         v    globals 1 Var v  is array of type bool all   <
							   <
   polgara    globals 1 Func polgara returns type int al   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: mem.tm						Loading file: mem.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: miller.c-
-rw------- 1 jenny jenny 1600 Nov 20 21:16 miller.c-
-rw------- 1 jenny jenny  383 Dec 10 18:12 miller.expected
-rw-r--r-- 1 jenny jenny 1721 Dec 12 22:55 miller.out
-rw-r--r-- 1 jenny jenny 1938 Dec 12 22:55 miller.tm
miller.out ztmp9829.txt differ: byte 95, line 2
miller (Output DIFF)
WARNING(6): Expecting to return type int but function 's	WARNING(6): Expecting to return type int but function 's
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
        gl    globals 1 Var gl  is array of type int all   <
							   <
       glx    globals 1 Var glx  of type int allocated a   <
							   <
showIntArray    globals 1 Func showIntArray returns type   <
							   <
       dog    globals 1 Func dog returns type void alloc   <
							   <
getnxtindex    globals 1 Func getnxtindex returns type i   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 1						Number of warnings: 1
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: miller.tm						Loading file: miller.tm
							   >	100 
							   >	50 
							   >	100 
							   >	12 
							   >	66 
							   >	25 
							   >	777 
							   >	123 
							   >	888 
							   >	777 
							   >	3 
							   >	987 
							   >	774 
							   >	987 
							   >	9 
							   >	66 
							   >	77 
							   >	10 9 8 7 6 5 4 3 2 1 
Halted								Halted
Bye.								Bye.
====================================
FILE: minesweeper.c-
-rw------- 1 jenny jenny  5620 Dec 10 20:23 minesweeper.c-
-rw------- 1 jenny jenny  3026 Dec 10 18:12 minesweeper.expected
-rw------- 1 jenny jenny    76 Dec 10 20:24 minesweeper.in
-rw-r--r-- 1 jenny jenny 32968 Dec 12 22:55 minesweeper.out
-rw-r--r-- 1 jenny jenny  2116 Dec 12 22:55 minesweeper.tm
minesweeper.out ztmp9829.txt differ: byte 1, line 1
minesweeper (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      seed    globals 1 Var seed  of type int allocated    <
							   <
     board    globals 1 Var board  is array of type int    <
							   <
     guess    globals 1 Var guess  is array of type bool   <
							   <
    Random    globals 1 Func Random returns type int all   <
							   <
CreateBoard    globals 1 Func CreateBoard returns type v   <
							   <
PrintBoard    globals 1 Func PrintBoard returns type voi   <
							   <
      Move    globals 1 Func Move returns type void allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: minesweeper.tm					Loading file: minesweeper.tm
Halted							   |	entered: 331
Command 3 unknown.					   <

Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	F F F F F F F F F F 
 e(xecStats        Print execution statistics since last   |	F F F F F F F F F F 
 g(o               Execute TM instructions until HALT	   |	F F F F F F F F F F 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	F F F F F F F F F F 
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F F F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F F F F F F F F F 
 r(egs             Print the contents of the registers	   |
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 2
 t(race            Toggle instruction tracing (printing)   |	entered: 2
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F 2 F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F F F 
 (empty line does a step)				   |	F F F F F F F F F F 
Also a # character placed after input will cause TM to h   |	F F F F F F F F F F 
Command 2 unknown.					   |	F F F F F F F F F F 
							   |	F F F F F F F F F F 
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |
 e(xecStats        Print execution statistics since last   |	entered: 3
 g(o               Execute TM instructions until HALT	   |	entered: 3
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F 2 F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F 3 F F F F F F F 
 r(egs             Print the contents of the registers	   |	F F F F F F F F F F 
 s(tep <n>         Execute n (default 1) TM instructions   |	F F F F F F F F F F 
 t(race            Toggle instruction tracing (printing)   |	F F F F F F F F F F 
 u(nprompt)        Unprompted for script input		   |	F F F F F F F F F F 
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F F F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F F F 
 (empty line does a step)				   |
Also a # character placed after input will cause TM to h   |	entered: 4
Command 2 unknown.					   |	entered: 4
							   |
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F 2 F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F 3 F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	F F F 1 F F F F F F 
 e(xecStats        Print execution statistics since last   |	F F F F F F F F F F 
 g(o               Execute TM instructions until HALT	   |	F F F F F F F F F F 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	F F F F F F F F F F 
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F F F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F F F F F F F F F 
 r(egs             Print the contents of the registers	   |
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 5
 t(race            Toggle instruction tracing (printing)   |	entered: 5
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F 2 F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F 3 F F F F F F F 
 (empty line does a step)				   |	F F F 1 F F F F F F 
Also a # character placed after input will cause TM to h   |	F F F F 2 F F F F F 
Command 3 unknown.					   |	F F F F F F F F F F 
							   |	F F F F F F F F F F 
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |
 e(xecStats        Print execution statistics since last   |	entered: 6
 g(o               Execute TM instructions until HALT	   |	entered: 6
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F 2 F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F 3 F F F F F F F 
 r(egs             Print the contents of the registers	   |	F F F 1 F F F F F F 
 s(tep <n>         Execute n (default 1) TM instructions   |	F F F F 2 F F F F F 
 t(race            Toggle instruction tracing (printing)   |	F F F F F 2 F F F F 
 u(nprompt)        Unprompted for script input		   |	F F F F F F F F F F 
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F F F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F F F 
 (empty line does a step)				   |
Also a # character placed after input will cause TM to h   |	entered: 7
Command 3 unknown.					   |	entered: 7
							   |
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F 2 F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F 3 F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	F F F 1 F F F F F F 
 e(xecStats        Print execution statistics since last   |	F F F F 2 F F F F F 
 g(o               Execute TM instructions until HALT	   |	F F F F F 2 F F F F 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	F F F F F F 3 F F F 
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F F F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F F F F F F F F F 
 r(egs             Print the contents of the registers	   |
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 8
 t(race            Toggle instruction tracing (printing)   |	entered: 8
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F 2 F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F 3 F F F F F F F 
 (empty line does a step)				   |	F F F 1 F F F F F F 
Also a # character placed after input will cause TM to h   |	F F F F 2 F F F F F 
Command 4 unknown.					   |	F F F F F 2 F F F F 
							   |	F F F F F F 3 F F F 
Commands are:						   |	F F F F F F F 2 F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |
 e(xecStats        Print execution statistics since last   |	entered: 9
 g(o               Execute TM instructions until HALT	   |	entered: 9
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F 2 F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F 3 F F F F F F F 
 r(egs             Print the contents of the registers	   |	F F F 1 F F F F F F 
 s(tep <n>         Execute n (default 1) TM instructions   |	F F F F 2 F F F F F 
 t(race            Toggle instruction tracing (printing)   |	F F F F F 2 F F F F 
 u(nprompt)        Unprompted for script input		   |	F F F F F F 3 F F F 
 x(it              Terminate the simulation		   |	F F F F F F F 2 F F 
 = <r> <n>         Set register number r to value n (e.g   |	F F F F F F F F 1 F 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F F F 
 (empty line does a step)				   |
Also a # character placed after input will cause TM to h   |	entered: 10
Command 4 unknown.					   |	entered: 10
							   |
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F 2 F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F 3 F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	F F F 1 F F F F F F 
 e(xecStats        Print execution statistics since last   |	F F F F 2 F F F F F 
 g(o               Execute TM instructions until HALT	   |	F F F F F 2 F F F F 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	F F F F F F 3 F F F 
 l(oad filename    Load filename into memory (default is   |	F F F F F F F 2 F F 
 p(rint            Toggle printing of total number instr   |	F F F F F F F F 1 0 
 q(uit             Terminate the simulation		   |	F F F F F F F F F 0 
 r(egs             Print the contents of the registers	   |
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 9
 t(race            Toggle instruction tracing (printing)   |	entered: 10
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F 2 F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F 3 F F F F F F F 
 (empty line does a step)				   |	F F F 1 F F F F F F 
Also a # character placed after input will cause TM to h   |	F F F F 2 F F F F F 
Command 5 unknown.					   |	F F F F F 2 F F F F 
							   |	F F F F F F 3 F F F 
Commands are:						   |	F F F F F F F 2 F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F 1 0 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F 1 0 
 d(Mem <b <n>>     Print n dMem locations (counting down   |
 e(xecStats        Print execution statistics since last   |	entered: 10
 g(o               Execute TM instructions until HALT	   |	entered: 9
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F 2 F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F 3 F F F F F F F 
 r(egs             Print the contents of the registers	   |	F F F 1 F F F F F F 
 s(tep <n>         Execute n (default 1) TM instructions   |	F F F F 2 F F F F F 
 t(race            Toggle instruction tracing (printing)   |	F F F F F 2 F F F F 
 u(nprompt)        Unprompted for script input		   |	F F F F F F 3 F F F 
 x(it              Terminate the simulation		   |	F F F F F F F 2 F F 
 = <r> <n>         Set register number r to value n (e.g   |	F F F F F F F F 1 0 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F 1 0 
 (empty line does a step)				   |
Also a # character placed after input will cause TM to h   |	entered: 0
Command 5 unknown.					   |	entered: 0
							   |	BYE
Commands are:						   |	Halted
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: mod.c-
-rw------- 1 jenny jenny   498 Dec 10 18:17 mod.c-
-rw------- 1 jenny jenny   243 Dec 10 18:19 mod.expected
-rw-r--r-- 1 jenny jenny  1303 Dec 12 22:55 mod.out
-rw-r--r-- 1 jenny jenny 12297 Dec 12 22:55 mod.tm
mod.out ztmp9829.txt differ: byte 1, line 1
mod (Output DIFF)
							   <
Symbol Stack:						   <
              globals ---- 				   <
   outputc    globals 1 Func outputc returns type void a   <
							   <
    inputc    globals 1 Func inputc returns type char al   <
							   <
     outnl    globals 1 Func outnl returns type void all   <
							   <
   outputb    globals 1 Func outputb returns type void a   <
							   <
    inputb    globals 1 Func inputb returns type bool al   <
							   <
    output    globals 1 Func output returns type void al   <
							   <
     input    globals 1 Func input returns type int allo   <
							   <
      main    globals 1 Func main returns type void allo   <
							   <
FuncK->size: -2						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
toff: -4						   <
Loop through global scope				   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: mod.tm						Loading file: mod.tm
1 2 3 4 5 						   |	0 0 1 2 0 
10 11 							   |	0 10 
1 							   |	0 
1 2 3 4 5 						   |	0 0 -1 -2 0 
10 11 							   |	0 -10 
31 -31 31 -31 Halted					   |	21 21 -21 -21 Halted
Bye.								Bye.
====================================
FILE: negTest.c-
