====================================
FILE: aamain2.c-
-rw-r--r-- 1 heyan heyan  121 11月 20 21:16 aamain2.c-
-rw-r--r-- 1 heyan heyan  224 12月 10 18:12 aamain2.expected
-rw-r--r-- 1 heyan heyan   20 11月 21 11:33 aamain2.in
-rw-rw-r-- 1 heyan heyan  224 12月 13 15:26 aamain2.out
-rw-rw-r-- 1 heyan heyan 3655 12月 13 15:26 aamain2.tm
aamain2 (Output OK)
====================================
FILE: aamain3.c-
-rw-r--r-- 1 heyan heyan   94 11月 20 21:16 aamain3.c-
-rw-r--r-- 1 heyan heyan  284 12月 10 18:12 aamain3.expected
-rw-rw-r-- 1 heyan heyan  403 12月 13 15:26 aamain3.out
-rw-rw-r-- 1 heyan heyan 3170 12月 13 15:26 aamain3.tm
aamain3 (Output DIFF)
ERROR(5): Expecting type int in parameter 1 of call to '	ERROR(5): Expecting type int in parameter 1 of call to '
ERROR(6): Expecting type bool in parameter 1 of call to 	ERROR(6): Expecting type bool in parameter 1 of call to 
Number of warnings: 0						Number of warnings: 0
Number of errors: 2						Number of errors: 2
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: aamain3.tm				   <
1 T 							   <
Halted							   <
Bye.							   <
====================================
FILE: aamain4.c-
-rw-r--r-- 1 heyan heyan   33 11月 20 21:16 aamain4.c-
-rw-r--r-- 1 heyan heyan  279 12月 10 18:12 aamain4.expected
-rw-rw-r-- 1 heyan heyan  279 12月 13 15:26 aamain4.out
-rw-rw-r-- 1 heyan heyan 2127 12月 13 15:26 aamain4.tm
aamain4 (Output OK)
====================================
FILE: aamain5.c-
-rw-r--r-- 1 heyan heyan  87 11月 20 21:16 aamain5.c-
-rw-r--r-- 1 heyan heyan 125 12月 10 18:12 aamain5.expected
-rw-rw-r-- 1 heyan heyan 239 12月 13 15:26 aamain5.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 aamain5.tm
aamain5 (Output DIFF)
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 1						Number of errors: 1
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: aamain5.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: aamain.c-
-rw-r--r-- 1 heyan heyan   57 11月 20 21:16 aamain.c-
-rw-r--r-- 1 heyan heyan  278 12月 10 18:12 aamain.expected
-rw-rw-r-- 1 heyan heyan  278 12月 13 15:26 aamain.out
-rw-rw-r-- 1 heyan heyan 2362 12月 13 15:26 aamain.tm
aamain (Output OK)
====================================
FILE: aasmaller.c-
-rw-r--r-- 1 heyan heyan  49 12月  5 15:35 aasmaller.c-
-rw-r--r-- 1 heyan heyan 125 12月 10 18:12 aasmaller.expected
-rw-rw-r-- 1 heyan heyan 241 12月 13 15:26 aasmaller.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 aasmaller.tm
aasmaller (Output DIFF)
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 1						Number of errors: 1
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: aasmaller.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: all.c-
-rw-r--r-- 1 heyan heyan  74 11月 20 21:16 all.c-
-rw-r--r-- 1 heyan heyan 322 12月 10 18:12 all.expected
-rw-r--r-- 1 heyan heyan   2 11月 21 11:33 all.in
-rw-rw-r-- 1 heyan heyan  37 12月 13 15:26 all.out
all.out ztmp9203.txt 不同：第 1 字节，第 1 行
all (Output DIFF)
							   >	ERROR(5): Syntax error.  Unexpected ';'.  Expecting id.
							   >	ERROR(6): Syntax error.  Unexpected '='.
							   >	ERROR(7): Syntax error.  Unexpected int.
							   >	ERROR(8): Syntax error.  Unexpected number: 10.
							   >	ERROR(8): Syntax error.  Unexpected ']'.  Expecting ';'.
							   >	Number of warnings: 0
							   >	Number of errors: 5
------------------------------------				------------------------------------
====================================
FILE: allErrors2.c-
-rw-r--r-- 1 heyan heyan 2996 11月 21 12:43 allErrors2.c-
-rw-r--r-- 1 heyan heyan 8389 12月 10 18:12 allErrors2.expected
-rw-r--r-- 1 heyan heyan    2 11月 21 11:33 allErrors2.in
-rw-rw-r-- 1 heyan heyan  678 12月 13 15:26 allErrors2.out
-rw-rw-r-- 1 heyan heyan    0 12月 13 15:26 allErrors2.tm
allErrors2.out ztmp9203.txt 不同：第 193 字节，第 3 行
allErrors2 (Output DIFF)
ERROR(6): Function 'dog' at line 2 is expecting to retur	ERROR(6): Function 'dog' at line 2 is expecting to retur
ERROR(13): Function 'cat' at line 9 is expecting to retu	ERROR(13): Function 'cat' at line 9 is expecting to retu
							   >	ERROR(16): Symbol 'cat' is already defined at line 9.
							   >	ERROR(25): Function 'ox' at line 23 is expecting no retu
							   >	WARNING(28): Expecting to return type int but function '
							   >	ERROR(44): Expecting Boolean test condition in if statem
							   >	ERROR(45): Expecting Boolean test condition in while sta
							   >	ERROR(47): Cannot use function 'cat' as a simple variabl
							   >	ERROR(48): '=' requires operands of the same type but lh
							   >	ERROR(49): '+=' requires operands of type int but rhs is
							   >	ERROR(50): '-=' requires operands of type int but lhs is
							   >	ERROR(52): Cannot use array as test condition in if stat
							   >	ERROR(53): Cannot use array as test condition in while s
							   >	ERROR(58): Cannot have a break statement outside of loop
							   >	ERROR(61): The operation '+' does not work with arrays.
							   >	ERROR(62): The operation '-' does not work with arrays.
							   >	ERROR(63): Unary 'not' requires an operand of type bool 
							   >	ERROR(63): The operation 'not' does not work with arrays
							   >	ERROR(65): '==' requires operands of the same type but l
							   >	ERROR(67): '+' requires operands of type int but lhs is 
							   >	ERROR(69): '*' requires operands of type int but rhs is 
							   >	ERROR(71): Unary 'not' requires an operand of type bool 
							   >	ERROR(73): Cannot index nonarray 'x'.
							   >	ERROR(75): Array 'aa' should be indexed by type int but 
							   >	ERROR(77): Array index is the unindexed array 'zz'.
							   >	ERROR(79): Symbol 'xyzzy' is not defined.
							   >	ERROR(80): Symbol 'meerkat' is not defined.
							   >	ERROR(82): 'x' is a simple variable and cannot be called
							   >	ERROR(84): Too many parameters passed for function 'dog'
							   >	ERROR(85): Too few parameters passed for function 'ibex'
							   >	ERROR(87): Expecting type int in parameter 1 of call to 
							   >	ERROR(89): Not expecting array in parameter 1 of call to
							   >	ERROR(90): Expecting type int in parameter 1 of call to 
							   >	ERROR(92): Expecting array in parameter 1 of call to 'ib
							   >	ERROR(93): Cannot use function 'ibex' as a simple variab
							   >	ERROR(95): Cannot use function 'ibex' as a simple variab
							   >	ERROR(95): '+' requires operands of type int but lhs is 
							   >	ERROR(97): The operation '*' only works with arrays.
							   >	ERROR(99): '*' requires operands of type int but lhs is 
							   >	ERROR(99): The operation '*' does not work with arrays.
							   >	ERROR(99): '+' requires operands of type int but lhs is 
							   >	ERROR(99): The operation '*' only works with arrays.
							   >	ERROR(99): The operation 'not' does not work with arrays
							   >	ERROR(99): Unary 'not' requires an operand of type bool 
							   >	ERROR(99): 'or' requires operands of type bool but lhs i
							   >	ERROR(99): Cannot have a break statement outside of loop
							   >	ERROR(100): 'and' requires operands of type bool but lhs
							   >	ERROR(100): 'and' requires operands of type bool but rhs
							   >	ERROR(102): Cannot return an array.
							   >	ERROR(107): Symbol 'main' is already defined at line 32.
							   >	ERROR(121): '==' requires operands of the same type but 
							   >	ERROR(126): '=' requires operands of the same type but l
							   >	ERROR(130): '!=' requires operands of the same type but 
							   >	ERROR(136): Symbol 'z' is already defined at line 105.
							   >	ERROR(138): Variable 'a' is of type int but is being ini
							   >	ERROR(138): Variable 'b' is of type int but is being ini
							   >	ERROR(138): Variable 'zz' is of type int but is being in
							   >	ERROR(140): Initializer for variable 'd' is not a consta
							   >	ERROR(141): '*' requires operands of type int but rhs is
							   >	ERROR(142): Initializer for variable 'e' is not a consta
							   >	ERROR(143): Initializer for variable 'f' is not a consta
							   >	ERROR(145): Symbol 'main' is already defined at line 32.
							   >	ERROR(158): '==' requires operands of the same type but 
							   >	ERROR(164): '=' requires operands of the same type but l
							   >	ERROR(182): In foreach statement the variable to the lef
							   >	ERROR(183): In foreach statement the variable to the lef
							   >	ERROR(183): Foreach requires operands of 'in' be the sam
							   >	ERROR(186): Foreach requires operands of 'in' be the sam
							   >	ERROR(188): If not an array, foreach requires rhs of 'in
							   >	ERROR(189): If not an array, foreach requires lhs of 'in
							   >	ERROR(195): Initializer for nonarray variable 'w' of typ
							   >	ERROR(196): Variable 'u' is of type int but is being ini
							   >	ERROR(196): Initializer for nonarray variable 'u' of typ
							   >	ERROR(197): Array 't' must be of type char to be initial
							   >	ERROR(197): Initializer for array variable 't' must be a
							   >	ERROR(198): Initializer for array variable 's' must be a
							   >	ERROR(204): Symbol 'main' is already defined at line 32.
							   >	ERROR(206): Initializer for variable 'x' is not a consta
							   >	ERROR(207): Initializer for nonarray variable 'c' of typ
							   >	ERROR(208): Initializer for array variable 'd' must be a
							   >	ERROR(209): Variable 'e' is of type char but is being in
							   >	ERROR(210): Initializer for array variable 'f' must be a
							   >	ERROR(211): Array 'z' must be of type char to be initial
							   >	ERROR(213): '=' requires that if one operand is an array
							   >	ERROR(214): '=' requires that if one operand is an array
							   >	ERROR(215): '=' requires operands of the same type but l
							   >	ERROR(216): '=' requires operands of the same type but l
							   >	ERROR(216): '=' requires that if one operand is an array
							   >	ERROR(217): '=' requires operands of the same type but l
							   >	ERROR(219): '==' requires operands of the same type but 
							   >	ERROR(220): '>' requires operands of type char or type i
							   >	ERROR(221): '>' requires operands of type char or type i
							   >	ERROR(222): The operation '>' does not work with arrays.
							   >	ERROR(223): The operation '>' does not work with arrays.
							   >	ERROR(224): The operation '>' does not work with arrays.
							   >	ERROR(226): Unary '-' requires an operand of type int bu
							   >	ERROR(227): The operation '*' only works with arrays.
							   >	ERROR(228): The operation '-' does not work with arrays.
							   >	ERROR(231): Unary '++' requires an operand of type int b
							   >	ERROR(231): The operation '++' does not work with arrays
							   >	ERROR(232): The operation '++' does not work with arrays
							   >	ERROR(233): Unary '--' requires an operand of type int b
							   >	ERROR(233): The operation '--' does not work with arrays
							   >	ERROR(234): The operation '--' does not work with arrays
							   >	WARNING(204): Expecting to return type int but function 
							   >	ERROR(238): Symbol 'fred' is already defined at line 237
ERROR(240): Symbol 'fred' is already defined at line 239	ERROR(240): Symbol 'fred' is already defined at line 239
ERROR(241): Symbol 'fred' is already defined at line 239	ERROR(241): Symbol 'fred' is already defined at line 239
ERROR(242): Symbol 'fred' is already defined at line 239	ERROR(242): Symbol 'fred' is already defined at line 239
WARNING(238): Expecting to return type int but function 	WARNING(238): Expecting to return type int but function 
ERROR(LINKER): Procedure main is not defined.		   |	Number of warnings: 3
Number of warnings: 1					   |	Number of errors: 107
Number of errors: 6					   <
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: allErrors2.tm				   <
====================================
FILE: allErrors.c-
-rw-r--r-- 1 heyan heyan 2556 11月 20 21:16 allErrors.c-
-rw-r--r-- 1 heyan heyan 2547 12月 10 18:12 allErrors.expected
-rw-r--r-- 1 heyan heyan    2 11月 21 11:33 allErrors.in
-rw-rw-r-- 1 heyan heyan  141 12月 13 15:26 allErrors.out
-rw-rw-r-- 1 heyan heyan 4096 12月 13 15:26 allErrors.tm
allErrors.out ztmp9203.txt 不同：第 1 字节，第 1 行
allErrors (Output DIFF)
							   >	ERROR(7): Function 'dog' at line 3 is expecting to retur
							   >	ERROR(14): Function 'cat' at line 10 is expecting to ret
							   >	ERROR(17): Symbol 'cat' is already defined at line 10.
							   >	ERROR(26): Function 'ox' at line 24 is expecting no retu
							   >	WARNING(29): Expecting to return type int but function '
							   >	ERROR(36): Symbol 'x' is already defined at line 35.
							   >	ERROR(44): Symbol 'v' is not defined.
							   >	ERROR(46): Expecting Boolean test condition in if statem
							   >	ERROR(47): Expecting Boolean test condition in while sta
							   >	ERROR(49): Cannot use function 'cat' as a simple variabl
							   >	ERROR(50): '=' requires operands of the same type but lh
							   >	ERROR(51): '+=' requires operands of type int but rhs is
							   >	ERROR(52): '-=' requires operands of type int but lhs is
							   >	ERROR(54): Cannot use array as test condition in if stat
							   >	ERROR(55): Cannot use array as test condition in while s
							   >	ERROR(57): Cannot have a break statement outside of loop
							   >	ERROR(61): The operation '+' does not work with arrays.
							   >	ERROR(63): '==' requires operands of the same type but l
							   >	ERROR(65): '+' requires operands of type int but lhs is 
							   >	ERROR(67): '*' requires operands of type int but rhs is 
							   >	ERROR(69): Unary 'not' requires an operand of type bool 
							   >	ERROR(71): Cannot index nonarray 'x'.
							   >	ERROR(73): Array 'aa' should be indexed by type int but 
							   >	ERROR(75): Symbol 'xyzzy' is not defined.
							   >	ERROR(76): Symbol 'meerkat' is not defined.
							   >	ERROR(78): 'x' is a simple variable and cannot be called
							   >	ERROR(80): Too many parameters passed for function 'dog'
							   >	ERROR(81): Too few parameters passed for function 'ibex'
							   >	ERROR(83): Expecting type int in parameter 1 of call to 
							   >	ERROR(85): Not expecting array in parameter 1 of call to
							   >	ERROR(87): Expecting array in parameter 1 of call to 'ib
							   >	ERROR(88): Cannot use function 'ibex' as a simple variab
							   >	ERROR(90): Cannot use function 'ibex' as a simple variab
							   >	ERROR(90): '+' requires operands of type int but lhs is 
							   >	ERROR(93): Array index is the unindexed array 'zz'.
							   >	ERROR(95): Cannot return an array.
							   >	Number of warnings: 1
							   >	Number of errors: 35
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: allErrors.tm				   <
====================================
FILE: arglist2.c-
-rw-r--r-- 1 heyan heyan  787 11月 20 21:16 arglist2.c-
-rw-r--r-- 1 heyan heyan 2940 12月 10 18:12 arglist2.expected
-rw-rw-r-- 1 heyan heyan 2803 12月 13 15:26 arglist2.out
-rw-rw-r-- 1 heyan heyan 8192 12月 13 15:26 arglist2.tm
arglist2.out ztmp9203.txt 不同：第 164 字节，第 3 行
arglist2 (Output DIFF)
ERROR(13): Too few parameters passed for function 'kate'	ERROR(13): Too few parameters passed for function 'kate'
ERROR(14): Too few parameters passed for function 'kate'	ERROR(14): Too few parameters passed for function 'kate'
ERROR(15): Expecting type bool in parameter 3 of call to   |	ERROR(15): Too few parameters passed for function 'kate'
ERROR(16): Expecting type bool in parameter 3 of call to   <
ERROR(16): Too many parameters passed for function 'kate   <
ERROR(17): Expecting type bool in parameter 3 of call to   <
ERROR(17): Too many parameters passed for function 'kate	ERROR(17): Too many parameters passed for function 'kate
ERROR(18): Expecting type bool in parameter 3 of call to   <
ERROR(18): Too many parameters passed for function 'kate	ERROR(18): Too many parameters passed for function 'kate
ERROR(20): Expecting type int in parameter 1 of call to 	ERROR(20): Expecting type int in parameter 1 of call to 
ERROR(20): Expecting type bool in parameter 2 of call to	ERROR(20): Expecting type bool in parameter 2 of call to
ERROR(20): Not expecting array in parameter 2 of call to	ERROR(20): Not expecting array in parameter 2 of call to
ERROR(20): Too many parameters passed for function 'kate   |	ERROR(20): Expecting type int in parameter 3 of call to 
							   >	ERROR(20): Expecting type bool in parameter 4 of call to
							   >	ERROR(20): Expecting array in parameter 4 of call to 'ka
ERROR(21): Not expecting array in parameter 1 of call to	ERROR(21): Not expecting array in parameter 1 of call to
ERROR(21): Not expecting array in parameter 2 of call to	ERROR(21): Not expecting array in parameter 2 of call to
ERROR(21): Expecting type bool in parameter 3 of call to   <
ERROR(21): Expecting array in parameter 3 of call to 'ka	ERROR(21): Expecting array in parameter 3 of call to 'ka
ERROR(21): Too many parameters passed for function 'kate   |	ERROR(21): Expecting array in parameter 4 of call to 'ka
ERROR(22): Expecting type int in parameter 1 of call to 	ERROR(22): Expecting type int in parameter 1 of call to 
ERROR(22): Not expecting array in parameter 1 of call to	ERROR(22): Not expecting array in parameter 1 of call to
ERROR(22): Expecting type bool in parameter 2 of call to	ERROR(22): Expecting type bool in parameter 2 of call to
							   >	ERROR(22): Expecting type int in parameter 3 of call to 
ERROR(22): Expecting array in parameter 3 of call to 'ka	ERROR(22): Expecting array in parameter 3 of call to 'ka
ERROR(22): Too many parameters passed for function 'kate   |	ERROR(22): Expecting type bool in parameter 4 of call to
ERROR(23): Expecting type bool in parameter 3 of call to   <
ERROR(23): Too many parameters passed for function 'kate   <
ERROR(25): '+' requires operands of type int but rhs is 	ERROR(25): '+' requires operands of type int but rhs is 
ERROR(25): Expecting type bool in parameter 3 of call to   |	ERROR(32): Function 'abbey' at line 30 is expecting to r
ERROR(25): Too many parameters passed for function 'kate   |	ERROR(35): Symbol 'abbey' is already defined at line 30.
ERROR(75): Cannot return an array.			   |	ERROR(37): Function 'abbey' at line 35 is expecting to r
							   >	ERROR(42): Function 'zena' at line 40 is expecting to re
							   >	ERROR(47): Function 'zeus' at line 45 is expecting to re
							   >	ERROR(52): Function 'blackdog' at line 50 is expecting t
							   >	ERROR(59): Cannot return an array.
							   >	ERROR(64): Function 'quaoar' at line 62 is expecting no 
							   >	ERROR(69): Function 'ixion' at line 67 is expecting no r
ERROR(75): Function 'varuna' at line 72 is expecting no 	ERROR(75): Function 'varuna' at line 72 is expecting no 
							   >	ERROR(75): Cannot return an array.
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 31					   |	Number of errors: 34
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: arglist2.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: arglist3.c-
-rw-r--r-- 1 heyan heyan 133 11月 20 21:16 arglist3.c-
-rw-r--r-- 1 heyan heyan 125 12月 10 18:12 arglist3.expected
-rw-rw-r-- 1 heyan heyan 317 12月 13 15:26 arglist3.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 arglist3.tm
arglist3.out ztmp9203.txt 不同：第 7 字节，第 1 行
arglist3 (Output DIFF)
ERROR(10): Too many parameters passed for function 'kate   <
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 2					   |	Number of errors: 1
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: arglist3.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: arglist.c-
-rw-r--r-- 1 heyan heyan 190 11月 20 21:16 arglist.c-
-rw-r--r-- 1 heyan heyan 125 12月 10 18:12 arglist.expected
-rw-rw-r-- 1 heyan heyan 416 12月 13 15:26 arglist.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 arglist.tm
arglist.out ztmp9203.txt 不同：第 7 字节，第 1 行
arglist (Output DIFF)
ERROR(13): Expecting type bool in parameter 3 of call to   <
ERROR(13): Too many parameters passed for function 'kate   <
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 3					   |	Number of errors: 1
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: arglist.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: array0.c-
-rw-r--r-- 1 heyan heyan  545 11月 20 21:16 array0.c-
-rw-r--r-- 1 heyan heyan  245 12月 10 18:12 array0.expected
-rw-rw-r-- 1 heyan heyan  235 12月 13 15:26 array0.out
-rw-rw-r-- 1 heyan heyan 9613 12月 13 15:26 array0.tm
array0.out ztmp9203.txt 不同：第 181 字节，第 7 行
array0 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: array0.tm						Loading file: array0.tm
1 1 							   |	777 666 
1 1 							   |	777 666 
1 1 1 1 						   |	777 777 666 666 
1 1 							   |	780 670 
1 1 							   |	880 770 
							   |	Halted
1 0 1 0 						   <
1 1 Halted						   <
Bye.								Bye.
====================================
FILE: array1.c-
-rw-r--r-- 1 heyan heyan  173 11月 20 21:16 array1.c-
-rw-r--r-- 1 heyan heyan  197 12月 10 18:12 array1.expected
-rw-rw-r-- 1 heyan heyan  195 12月 13 15:26 array1.out
-rw-rw-r-- 1 heyan heyan 4457 12月 13 15:26 array1.tm
array1.out ztmp9203.txt 不同：第 181 字节，第 7 行
array1 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: array1.tm						Loading file: array1.tm
3 							   |	777 
Halted								Halted
Bye.								Bye.
====================================
FILE: array2.c-
-rw-r--r-- 1 heyan heyan  154 11月 20 21:16 array2.c-
-rw-r--r-- 1 heyan heyan  200 12月 10 18:12 array2.expected
-rw-rw-r-- 1 heyan heyan  192 12月 13 15:26 array2.out
-rw-rw-r-- 1 heyan heyan 4072 12月 13 15:26 array2.tm
array2.out ztmp9203.txt 不同：第 181 字节，第 7 行
array2 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: array2.tm						Loading file: array2.tm
Halted							   |	666 777 Halted
Bye.								Bye.
====================================
FILE: array.c-
-rw-r--r-- 1 heyan heyan   534 11月 20 21:16 array.c-
-rw-r--r-- 1 heyan heyan   232 12月 10 18:12 array.expected
-rw-rw-r-- 1 heyan heyan   222 12月 13 15:26 array.out
-rw-rw-r-- 1 heyan heyan 11791 12月 13 15:26 array.tm
array.out ztmp9203.txt 不同：第 180 字节，第 7 行
array (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: array.tm						Loading file: array.tm
0 1 2 4 						   |	3 3 4 496 
0 1 2 4 						   |	3 3 314 496 
0 							   |	3 
2 0 							   |	314 3 
2 1 							   |	314 3 
Halted								Halted
Bye.								Bye.
====================================
FILE: arraysize.c-
-rw-r--r-- 1 heyan heyan  509 11月 20 21:16 arraysize.c-
-rw-r--r-- 1 heyan heyan  259 12月 10 18:12 arraysize.expected
-rw-rw-r-- 1 heyan heyan  219 12月 13 15:26 arraysize.out
-rw-rw-r-- 1 heyan heyan 8981 12月 13 15:26 arraysize.tm
arraysize.out ztmp9203.txt 不同：第 184 字节，第 7 行
arraysize (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: arraysize.tm					Loading file: arraysize.tm
0 0 0 0 						   |	777 11 0 12 
0 0 0 -1 						   |	777 11 888 12 
0 0 							   |	666 13 
							   >	888 12 888 12 
							   >	666 13 
							   >	132 
Halted								Halted
Bye.								Bye.
====================================
FILE: arraysizeold.c-
-rw-r--r-- 1 heyan heyan  192 11月 20 21:16 arraysizeold.c-
-rw-r--r-- 1 heyan heyan  198 12月 10 18:12 arraysizeold.expected
-rw-rw-r-- 1 heyan heyan  198 12月 13 15:26 arraysizeold.out
-rw-rw-r-- 1 heyan heyan 3933 12月 13 15:26 arraysizeold.tm
arraysizeold (Output OK)
====================================
FILE: assign1.c-
-rw-r--r-- 1 heyan heyan  519 11月 20 21:16 assign1.c-
-rw-r--r-- 1 heyan heyan  233 12月 10 18:12 assign1.expected
-rw-rw-r-- 1 heyan heyan  466 12月 13 15:26 assign1.out
-rw-rw-r-- 1 heyan heyan 1782 12月 13 15:26 assign1.tm
assign1.out ztmp9203.txt 不同：第 1 字节，第 1 行
assign1 (Output DIFF)
ERROR(25): Symbol 'ga' is not defined.			   <
ERROR(26): Symbol 'ga' is not defined.			   <
ERROR(27): Symbol 'gb' is not defined.			   <
ERROR(28): Symbol 'gb' is not defined.			   <
ERROR(39): Symbol 'ga' is not defined.			   <
ERROR(39): Symbol 'gb' is not defined.			   <
ERROR(40): Symbol 'ga' is not defined.			   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 7					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign1.tm					Loading file: assign1.tm
							   >	111 222 T F 
							   >	333 444 F T 
							   >	222 F 
							   >	444 T 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign2.c-
-rw-r--r-- 1 heyan heyan  627 11月 20 21:16 assign2.c-
-rw-r--r-- 1 heyan heyan  233 12月 10 18:12 assign2.expected
-rw-rw-r-- 1 heyan heyan  466 12月 13 15:26 assign2.out
-rw-rw-r-- 1 heyan heyan 2092 12月 13 15:26 assign2.tm
assign2.out ztmp9203.txt 不同：第 1 字节，第 1 行
assign2 (Output DIFF)
ERROR(25): Symbol 'ga' is not defined.			   <
ERROR(26): Symbol 'ga' is not defined.			   <
ERROR(27): Symbol 'gb' is not defined.			   <
ERROR(28): Symbol 'gb' is not defined.			   <
ERROR(39): Symbol 'ga' is not defined.			   <
ERROR(39): Symbol 'gb' is not defined.			   <
ERROR(40): Symbol 'ga' is not defined.			   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 7					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign2.tm					Loading file: assign2.tm
							   >	111 222 T F 
							   >	333 444 F T 
							   >	222 F 
							   >	444 T 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign3.c-
-rw-r--r-- 1 heyan heyan  648 11月 20 21:16 assign3.c-
-rw-r--r-- 1 heyan heyan  245 12月 10 18:12 assign3.expected
-rw-rw-r-- 1 heyan heyan  193 12月 13 15:26 assign3.out
-rw-rw-r-- 1 heyan heyan 2092 12月 13 15:26 assign3.tm
assign3.out ztmp9203.txt 不同：第 182 字节，第 7 行
assign3 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign3.tm					Loading file: assign3.tm
							   >	111 222 
							   >	333 444 
							   >	333 
							   >	777 
							   >	222 0 
							   >	444 0 
							   >	222 
							   >	444 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign4.c-
-rw-r--r-- 1 heyan heyan  552 11月 20 21:16 assign4.c-
-rw-r--r-- 1 heyan heyan  245 12月 10 18:12 assign4.expected
-rw-rw-r-- 1 heyan heyan  193 12月 13 15:26 assign4.out
-rw-rw-r-- 1 heyan heyan 1782 12月 13 15:26 assign4.tm
assign4.out ztmp9203.txt 不同：第 182 字节，第 7 行
assign4 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign4.tm					Loading file: assign4.tm
							   >	111 222 
							   >	333 444 
							   >	333 
							   >	777 
							   >	222 0 
							   >	444 0 
							   >	222 
							   >	444 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign5.c-
-rw-r--r-- 1 heyan heyan   598 11月 20 21:16 assign5.c-
-rw-r--r-- 1 heyan heyan   297 12月 10 18:12 assign5.expected
-rw-rw-r-- 1 heyan heyan   297 12月 13 15:26 assign5.out
-rw-rw-r-- 1 heyan heyan 13413 12月 13 15:26 assign5.tm
assign5.out ztmp9203.txt 不同：第 195 字节，第 8 行
assign5 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign5.tm					Loading file: assign5.tm
666 666 666 							666 666 666 
666 666 666 						   |	1332 666 666 
666 666 666 						   |	1332 1332 666 
666 666 666 						   |	3330 1998 666 
666 666 666 						   |	666 666 666 
666 666 666 						   |	0 666 666 
666 666 666 						   |	0 0 666 
666 666 666 						   |	666 -666 666 
Halted								Halted
Bye.								Bye.
====================================
FILE: assign6.c-
-rw-r--r-- 1 heyan heyan 1624 11月 21 11:59 assign6.c-
-rw-r--r-- 1 heyan heyan  421 12月 10 18:12 assign6.expected
-rw-rw-r-- 1 heyan heyan  233 12月 13 15:26 assign6.out
-rw-rw-r-- 1 heyan heyan 1935 12月 13 15:26 assign6.tm
assign6.out ztmp9203.txt 不同：第 1 字节，第 1 行
assign6 (Output DIFF)
ERROR(92): Symbol 'dog' is not defined.			   |	WARNING(4): Expecting to return type int but function 'd
Number of warnings: 0					   |	Number of warnings: 1
Number of errors: 1					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assign6.tm					Loading file: assign6.tm
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	777 1443 777 
							   >	604506 
							   >	888 777 
Halted								Halted
Bye.								Bye.
====================================
FILE: assigna.c-
-rw-r--r-- 1 heyan heyan  443 11月 20 21:16 assigna.c-
-rw-r--r-- 1 heyan heyan  193 12月 10 18:12 assigna.expected
-rw-rw-r-- 1 heyan heyan  233 12月 13 15:26 assigna.out
-rw-rw-r-- 1 heyan heyan 1941 12月 13 15:26 assigna.tm
assigna.out ztmp9203.txt 不同：第 1 字节，第 1 行
assigna (Output DIFF)
ERROR(39): Symbol 'dog' is not defined.			   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 1					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: assigna.tm					Loading file: assigna.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: assign.c-
-rw-r--r-- 1 heyan heyan  608 11月 21 12:38 assign.c-
-rw-r--r-- 1 heyan heyan 1979 12月 10 18:12 assign.expected
-rw-rw-r-- 1 heyan heyan  150 12月 13 15:26 assign.out
-rw-rw-r-- 1 heyan heyan    0 12月 13 15:26 assign.tm
assign.out ztmp9203.txt 不同：第 1 字节，第 1 行
assign (Output DIFF)
							   >	ERROR(19): '=' requires operands of the same type but lh
							   >	ERROR(19): '=' requires operands of the same type but lh
							   >	ERROR(20): '=' requires operands of the same type but lh
							   >	ERROR(20): '=' requires operands of the same type but lh
							   >	ERROR(21): Symbol 'p' is not defined.
							   >	ERROR(21): Symbol 'q' is not defined.
							   >	ERROR(21): Symbol 'r' is not defined.
							   >	ERROR(22): '+=' requires operands of type int but rhs is
							   >	ERROR(25): Too many parameters passed for function 'fred
							   >	ERROR(25): '+' requires operands of type int but rhs is 
							   >	ERROR(26): Symbol 'linda' is not defined.
							   >	ERROR(27): Symbol 'linda' is not defined.
							   >	ERROR(27): '+' requires operands of type int but rhs is 
							   >	ERROR(31): The operation '+' does not work with arrays.
							   >	ERROR(32): The operation '+' does not work with arrays.
							   >	ERROR(32): '=' requires operands of the same type but lh
							   >	ERROR(33): 'and' requires operands of type bool but lhs 
							   >	ERROR(33): 'and' requires operands of type bool but rhs 
							   >	ERROR(33): The operation 'and' does not work with arrays
							   >	ERROR(33): '=' requires operands of the same type but lh
							   >	ERROR(34): The operation '+' does not work with arrays.
							   >	ERROR(34): Symbol 'xylophone' is not defined.
							   >	ERROR(37): '+' requires operands of type int but lhs is 
							   >	ERROR(38): '+' requires operands of type int but rhs is 
							   >	ERROR(39): '+' requires operands of type int but rhs is 
							   >	ERROR(41): '+' requires operands of type int but rhs is 
							   >	ERROR(42): Too many parameters passed for function 'anni
							   >	WARNING(12): Expecting to return type int but function '
							   >	Number of warnings: 1
							   >	Number of errors: 27
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: assign.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: basicAll.c-
-rw-r--r-- 1 heyan heyan 5183 11月 21 12:41 basicAll.c-
-rw-r--r-- 1 heyan heyan 7386 12月 10 18:12 basicAll.expected
-rw-rw-r-- 1 heyan heyan 4248 12月 13 15:26 basicAll.out
-rw-rw-r-- 1 heyan heyan    0 12月 13 15:26 basicAll.tm
basicAll.out ztmp9203.txt 不同：第 236 字节，第 4 行
basicAll (Output DIFF)
ERROR(16): Symbol 'cat' is not defined.				ERROR(16): Symbol 'cat' is not defined.
ERROR(18): Function 'dog' at line 12 is expecting to ret	ERROR(18): Function 'dog' at line 12 is expecting to ret
ERROR(25): Function 'cat' at line 21 is expecting to ret	ERROR(25): Function 'cat' at line 21 is expecting to ret
							   >	ERROR(28): Symbol 'cat' is already defined at line 21.
							   >	ERROR(39): Function 'ox' at line 37 is expecting no retu
							   >	WARNING(42): Expecting to return type int but function '
ERROR(53): Symbol 'x' is already defined at line 52.		ERROR(53): Symbol 'x' is already defined at line 52.
ERROR(54): Symbol 'x' is already defined at line 52.		ERROR(54): Symbol 'x' is already defined at line 52.
ERROR(62): Symbol 'v' is not defined.				ERROR(62): Symbol 'v' is not defined.
ERROR(64): Expecting Boolean test condition in if statem	ERROR(64): Expecting Boolean test condition in if statem
ERROR(65): Expecting Boolean test condition in while sta	ERROR(65): Expecting Boolean test condition in while sta
ERROR(66): Symbol 'ox' is not defined.			   |	ERROR(66): Expecting Boolean test condition in while sta
ERROR(66): Expecting Boolean test condition in while sta   <
ERROR(68): Cannot use function 'cat' as a simple variabl	ERROR(68): Cannot use function 'cat' as a simple variabl
ERROR(69): '=' requires operands of the same type but lh	ERROR(69): '=' requires operands of the same type but lh
ERROR(70): '+=' requires operands of type int but rhs is	ERROR(70): '+=' requires operands of type int but rhs is
ERROR(71): '-=' requires operands of type int but lhs is	ERROR(71): '-=' requires operands of type int but lhs is
ERROR(72): '>' requires operands of type char or type in	ERROR(72): '>' requires operands of type char or type in
ERROR(73): Unary '++' requires an operand of type int bu	ERROR(73): Unary '++' requires an operand of type int bu
ERROR(75): Cannot use array as test condition in if stat	ERROR(75): Cannot use array as test condition in if stat
ERROR(76): Cannot use array as test condition in while s	ERROR(76): Cannot use array as test condition in while s
ERROR(78): Cannot have a break statement outside of loop	ERROR(78): Cannot have a break statement outside of loop
ERROR(82): The operation '+' does not work with arrays.		ERROR(82): The operation '+' does not work with arrays.
ERROR(83): The operation '<' does not work with arrays.		ERROR(83): The operation '<' does not work with arrays.
ERROR(84): '<' requires operands of type char or type in	ERROR(84): '<' requires operands of type char or type in
ERROR(84): '<' requires operands of type char or type in	ERROR(84): '<' requires operands of type char or type in
ERROR(84): The operation '<' does not work with arrays.		ERROR(84): The operation '<' does not work with arrays.
ERROR(86): '==' requires operands of the same type but l	ERROR(86): '==' requires operands of the same type but l
ERROR(90): '+' requires operands of type int but lhs is 	ERROR(90): '+' requires operands of type int but lhs is 
ERROR(92): '*' requires operands of type int but rhs is 	ERROR(92): '*' requires operands of type int but rhs is 
ERROR(94): Unary 'not' requires an operand of type bool 	ERROR(94): Unary 'not' requires an operand of type bool 
ERROR(95): '+' requires operands of type int but rhs is 	ERROR(95): '+' requires operands of type int but rhs is 
ERROR(95): Unary 'not' requires an operand of type bool 	ERROR(95): Unary 'not' requires an operand of type bool 
ERROR(96): Unary '-' requires an operand of type int but	ERROR(96): Unary '-' requires an operand of type int but
ERROR(98): Cannot index nonarray 'x'.				ERROR(98): Cannot index nonarray 'x'.
ERROR(99): 'and' requires operands of type bool but lhs 	ERROR(99): 'and' requires operands of type bool but lhs 
ERROR(99): 'and' requires operands of type bool but rhs 	ERROR(99): 'and' requires operands of type bool but rhs 
ERROR(99): '*' requires operands of type int but rhs is 	ERROR(99): '*' requires operands of type int but rhs is 
ERROR(100): Symbol 'y' is not defined.				ERROR(100): Symbol 'y' is not defined.
ERROR(100): 'and' requires operands of type bool but lhs	ERROR(100): 'and' requires operands of type bool but lhs
ERROR(100): '*' requires operands of type int but rhs is	ERROR(100): '*' requires operands of type int but rhs is
ERROR(101): 'and' requires operands of type bool but lhs	ERROR(101): 'and' requires operands of type bool but lhs
ERROR(101): 'and' requires operands of type bool but rhs	ERROR(101): 'and' requires operands of type bool but rhs
ERROR(101): '*' requires operands of type int but rhs is	ERROR(101): '*' requires operands of type int but rhs is
ERROR(101): 'or' requires operands of type bool but rhs 	ERROR(101): 'or' requires operands of type bool but rhs 
ERROR(103): The operation '*' only works with arrays.		ERROR(103): The operation '*' only works with arrays.
ERROR(104): 'and' requires operands of type bool but lhs	ERROR(104): 'and' requires operands of type bool but lhs
ERROR(108): Array 'aa' should be indexed by type int but	ERROR(108): Array 'aa' should be indexed by type int but
ERROR(110): Cannot use function 'cat' as a simple variab	ERROR(110): Cannot use function 'cat' as a simple variab
ERROR(112): Array index is the unindexed array 'aa'.		ERROR(112): Array index is the unindexed array 'aa'.
ERROR(113): Symbol 'AA' is not defined.				ERROR(113): Symbol 'AA' is not defined.
ERROR(115): Symbol 'meerkat' is not defined.			ERROR(115): Symbol 'meerkat' is not defined.
ERROR(117): Symbol 'xyzzy' is not defined.			ERROR(117): Symbol 'xyzzy' is not defined.
ERROR(118): Symbol 'meerkat' is not defined.			ERROR(118): Symbol 'meerkat' is not defined.
ERROR(119): Symbol 'xyzzy' is not defined.			ERROR(119): Symbol 'xyzzy' is not defined.
ERROR(119): 'and' requires operands of type bool but rhs	ERROR(119): 'and' requires operands of type bool but rhs
ERROR(121): Symbol 'flight' is not defined.			ERROR(121): Symbol 'flight' is not defined.
ERROR(121): Unary 'not' requires an operand of type bool	ERROR(121): Unary 'not' requires an operand of type bool
ERROR(121): Unary '-' requires an operand of type int bu	ERROR(121): Unary '-' requires an operand of type int bu
ERROR(121): Symbol 'uu' is not defined.				ERROR(121): Symbol 'uu' is not defined.
ERROR(121): Symbol 'y' is not defined.				ERROR(121): Symbol 'y' is not defined.
ERROR(121): '*' requires operands of type int but rhs is	ERROR(121): '*' requires operands of type int but rhs is
ERROR(123): 'x' is a simple variable and cannot be calle	ERROR(123): 'x' is a simple variable and cannot be calle
ERROR(125): Too many parameters passed for function 'dog	ERROR(125): Too many parameters passed for function 'dog
ERROR(126): Symbol 'ibex' is not defined.		   |	ERROR(126): Too few parameters passed for function 'ibex
ERROR(128): Expecting type int in parameter 1 of call to   |	ERROR(128): Expecting type int in parameter 1 of call to
							   |	ERROR(130): Not expecting array in parameter 1 of call t
Memory Configuration: Data Addresses: 0-9999  Instructio   |	ERROR(132): Expecting array in parameter 1 of call to 'i
Loading file: basicAll.tm				   |	ERROR(133): Expecting type int in parameter 1 of call to
Halted							   |	ERROR(134): Cannot use function 'ibex' as a simple varia
Bye.							   |	ERROR(136): Cannot use function 'ibex' as a simple varia
							   >	ERROR(136): '+' requires operands of type int but lhs is
							   >	ERROR(139): Array index is the unindexed array 'zz'.
							   >	ERROR(140): Expecting type int in parameter 1 of call to
							   >	ERROR(140): Array 'aa' should be indexed by type int but
							   >	ERROR(142): '=' requires operands of the same type but l
							   >	ERROR(143): '+' requires operands of type int but rhs is
							   >	ERROR(144): Expecting type int in parameter 1 of call to
							   >	ERROR(145): Expecting type int in parameter 1 of call to
							   >	ERROR(148): '=' requires operands of the same type but l
							   >	ERROR(149): '=' requires operands of the same type but l
							   >	ERROR(150): '=' requires operands of the same type but l
							   >	ERROR(150): '=' requires operands of the same type but l
							   >	ERROR(150): '=' requires operands of the same type but l
							   >	ERROR(152): '*' requires operands of type int but rhs is
							   >	ERROR(152): '*' requires operands of type int but lhs is
							   >	ERROR(152): 'and' requires operands of type bool but lhs
							   >	ERROR(152): 'and' requires operands of type bool but rhs
							   >	ERROR(154): '+' requires operands of type int but rhs is
							   >	ERROR(154): Symbol 'parrot' is not defined.
							   >	ERROR(154): 'and' requires operands of type bool but rhs
							   >	ERROR(154): Expecting type int in parameter 3 of call to
							   >	ERROR(155): Expecting type int in parameter 1 of call to
							   >	ERROR(155): '+' requires operands of type int but rhs is
							   >	ERROR(155): Symbol 'parrot' is not defined.
							   >	ERROR(155): 'and' requires operands of type bool but rhs
							   >	ERROR(155): Expecting type int in parameter 3 of call to
							   >	ERROR(155): 'and' requires operands of type bool but rhs
							   >	ERROR(155): Expecting type int in parameter 2 of call to
							   >	ERROR(155): Expecting type int in parameter 3 of call to
							   >	ERROR(155): Too many parameters passed for function 'emu
							   >	ERROR(155): '*' requires operands of type int but rhs is
							   >	ERROR(157): Cannot return an array.
							   >	Number of warnings: 1
							   >	Number of errors: 101
							   >	------------------------------------
====================================
FILE: battleship.c-
-rw-r--r-- 1 heyan heyan  4582 11月 20 21:16 battleship.c-
-rw-r--r-- 1 heyan heyan  2735 12月 10 18:12 battleship.expected
-rw-r--r-- 1 heyan heyan    51 11月 21 11:33 battleship.in
-rw-rw-r-- 1 heyan heyan 13405 12月 13 15:26 battleship.out
-rw-rw-r-- 1 heyan heyan  1785 12月 13 15:26 battleship.tm
battleship.out ztmp9203.txt 不同：第 1 字节，第 1 行
battleship (Output DIFF)
ERROR(202): Symbol 'HideShip' is not defined.		   <
ERROR(206): Symbol 'NumHits' is not defined.		   <
ERROR(209): Symbol 'Display' is not defined.		   <
ERROR(210): Symbol 'Aim' is not defined.		   <
ERROR(211): Symbol 'Fire' is not defined.		   <
ERROR(211): '==' requires operands of the same type but    <
ERROR(218): Symbol 'NewLine' is not defined.		   <
ERROR(223): Symbol 'Print' is not defined.		   <
ERROR(225): Symbol 'Print' is not defined.		   <
ERROR(228): Symbol 'NewLine' is not defined.		   <
ERROR(229): Symbol 'RevealShip' is not defined.		   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 11					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: battleship.tm					Loading file: battleship.tm
Halted							   |	entered: 311
Command 3 unknown.					   <

Commands are:						   |	10 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	4 4 4 4 4 4 4 4 4 4 
 g(o               Execute TM instructions until HALT	   |	4 4 4 4 4 4 4 4 4 4 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	4 4 4 4 4 4 4 4 4 4 
 l(oad filename    Load filename into memory (default is   |	4 4 4 4 4 4 4 4 4 4 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 34
 t(race            Toggle instruction tracing (printing)   |
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	9 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 4 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	4 4 4 4 0 4 4 4 4 4 
Command 3 unknown.					   |	4 4 4 4 4 4 4 4 4 4 
							   |	4 4 4 4 4 4 4 4 4 4 
Commands are:						   |	4 4 4 4 4 4 4 4 4 4 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	entered: 45
 g(o               Execute TM instructions until HALT	   |
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	8 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	4 4 4 4 0 4 4 4 4 4 
 t(race            Toggle instruction tracing (printing)   |	4 4 4 4 4 0 4 4 4 4 
 u(nprompt)        Unprompted for script input		   |	4 4 4 4 4 4 4 4 4 4 
 x(it              Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 4 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	entered: 56
Command 4 unknown.					   |
							   |
Commands are:						   |	7 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	4 4 4 4 0 4 4 4 4 4 
 g(o               Execute TM instructions until HALT	   |	4 4 4 4 4 0 4 4 4 4 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	4 4 4 4 4 4 0 4 4 4 
 l(oad filename    Load filename into memory (default is   |	4 4 4 4 4 4 4 4 4 4 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 11
 t(race            Toggle instruction tracing (printing)   |
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	6 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 0 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	4 4 4 4 0 4 4 4 4 4 
Command 5 unknown.					   |	4 4 4 4 4 0 4 4 4 4 
							   |	4 4 4 4 4 4 0 4 4 4 
Commands are:						   |	4 4 4 4 4 4 4 4 4 4 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	entered: 22
 g(o               Execute TM instructions until HALT	   |
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	5 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 0 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 0 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	4 4 4 4 0 4 4 4 4 4 
 t(race            Toggle instruction tracing (printing)   |	4 4 4 4 4 0 4 4 4 4 
 u(nprompt)        Unprompted for script input		   |	4 4 4 4 4 4 0 4 4 4 
 x(it              Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 4 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	entered: 33
Command 1 unknown.					   |
							   |
Commands are:						   |	4 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 0 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 0 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	4 4 4 0 0 4 4 4 4 4 
 g(o               Execute TM instructions until HALT	   |	4 4 4 4 4 0 4 4 4 4 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	4 4 4 4 4 4 0 4 4 4 
 l(oad filename    Load filename into memory (default is   |	4 4 4 4 4 4 4 4 4 4 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 44
 t(race            Toggle instruction tracing (printing)   |
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	3 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 0 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 0 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	4 4 4 0 0 4 4 4 4 4 
Command 2 unknown.					   |	4 4 4 4 0 0 4 4 4 4 
							   |	4 4 4 4 4 4 0 4 4 4 
Commands are:						   |	4 4 4 4 4 4 4 4 4 4 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 4 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 4 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	entered: 55
 g(o               Execute TM instructions until HALT	   |
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	2 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 0 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 0 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	4 4 4 0 0 4 4 4 4 4 
 t(race            Toggle instruction tracing (printing)   |	4 4 4 4 0 0 4 4 4 4 
 u(nprompt)        Unprompted for script input		   |	4 4 4 4 4 0 0 4 4 4 
 x(it              Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 = <r> <n>         Set register number r to value n (e.g   |	4 4 4 4 4 4 4 4 4 4 
 < <addr> <value>  Set dMem at addr to value		   |	4 4 4 4 4 4 4 4 4 4 
 (empty line does a step)				   |	4 4 4 4 4 4 4 4 4 4 
Also a # character placed after input will cause TM to h   |	entered: 66 
Command 3 unknown.					   |
							   |
Commands are:						   |	1 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	4 4 4 4 4 4 4 4 4 4 
 c(lear            Reset simulator for new execution of    |	4 0 4 4 4 4 4 4 4 4 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	4 4 0 4 4 4 4 4 4 4 
 e(xecStats        Print execution statistics since last   |	4 4 4 0 0 4 4 4 4 4 
 g(o               Execute TM instructions until HALT	   |	4 4 4 4 0 0 4 4 4 4 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	4 4 4 4 4 0 0 4 4 4 
 l(oad filename    Load filename into memory (default is   |	4 4 4 4 4 4 0 4 4 4 
 p(rint            Toggle printing of total number instr   |	4 4 4 4 4 4 4 4 4 4 
 q(uit             Terminate the simulation		   |	4 4 4 4 4 4 4 4 4 4 
 r(egs             Print the contents of the registers	   |	4 4 4 4 4 4 4 4 4 4 
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 77 
 t(race            Toggle instruction tracing (printing)   |
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
 = <r> <n>         Set register number r to value n (e.g   |
 < <addr> <value>  Set dMem at addr to value		   |	2 2 2 2 2 2 2 2 2 2 
 (empty line does a step)				   |	2 0 2 2 2 2 2 2 2 2 
Also a # character placed after input will cause TM to h   |	2 2 0 2 2 2 2 2 2 2 
Command 4 unknown.					   |	2 2 2 0 0 2 2 2 2 2 
							   |	2 2 2 2 0 0 2 2 2 2 
Commands are:						   |	2 2 2 2 2 0 0 2 2 2 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	2 2 2 2 2 2 0 2 7 2 
 c(lear            Reset simulator for new execution of    |	2 2 2 2 2 2 2 0 7 2 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	2 2 2 2 2 2 2 2 7 2 
 e(xecStats        Print execution statistics since last   |	2 2 2 2 2 2 2 2 7 2 
 g(o               Execute TM instructions until HALT	   |	Halted
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: break2.c-
-rw-r--r-- 1 heyan heyan  317 11月 20 21:16 break2.c-
-rw-r--r-- 1 heyan heyan  222 12月 10 18:12 break2.expected
-rw-rw-r-- 1 heyan heyan 1672 12月 13 15:26 break2.out
-rw-rw-r-- 1 heyan heyan 5245 12月 13 15:26 break2.tm
break2.out ztmp9203.txt 不同：第 183 字节，第 7 行
break2 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: break2.tm						Loading file: break2.tm
0 9999 							   |	0 0 
0 9999 							   |	0 1 
0 9999 							   |	0 2 
0 9999 							   |	0 3 
0 9999 							   |	0 4 
0 9999 							   |	0 5 
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
0 9999 							   <
Halted								Halted
Bye.								Bye.
====================================
FILE: break.c-
-rw-r--r-- 1 heyan heyan  360 11月 20 21:16 break.c-
-rw-r--r-- 1 heyan heyan  397 12月 10 18:12 break.expected
-rw-rw-r-- 1 heyan heyan  509 12月 13 15:26 break.out
-rw-rw-r-- 1 heyan heyan 4096 12月 13 15:26 break.tm
break.out ztmp9203.txt 不同：第 12 字节，第 1 行
break (Output DIFF)
ERROR(20): Cannot have a break statement outside of loop   <
ERROR(20): Expecting Boolean test condition in if statem	ERROR(20): Expecting Boolean test condition in if statem
ERROR(22): Cannot have a break statement outside of loop   |	ERROR(20): Cannot have a break statement outside of loop
ERROR(21): Expecting Boolean test condition in if statem	ERROR(21): Expecting Boolean test condition in if statem
							   >	ERROR(22): Cannot have a break statement outside of loop
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 5						Number of errors: 5
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: break.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: call2.c-
-rw-r--r-- 1 heyan heyan  236 11月 21 11:59 call2.c-
-rw-r--r-- 1 heyan heyan  195 12月 10 18:12 call2.expected
-rw-rw-r-- 1 heyan heyan  231 12月 13 15:26 call2.out
-rw-rw-r-- 1 heyan heyan 1933 12月 13 15:26 call2.tm
call2.out ztmp9203.txt 不同：第 1 字节，第 1 行
call2 (Output DIFF)
ERROR(22): Symbol 'dog' is not defined.			   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 1					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: call2.tm						Loading file: call2.tm
Halted							   |	343 Halted
Bye.								Bye.
====================================
FILE: call5.c-
-rw-r--r-- 1 heyan heyan 341 12月  2 11:05 call5.c-
-rw-r--r-- 1 heyan heyan 306 12月 10 18:12 call5.expected
-rw-rw-r-- 1 heyan heyan 149 12月 13 15:26 call5.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 call5.tm
call5.out ztmp9203.txt 不同：第 1 字节，第 1 行
call5 (Output DIFF)
							   >	WARNING(16): Expecting to return type int but function '
							   >	Number of warnings: 1
							   >	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: call5.tm						Loading file: call5.tm
Halted							   |	1279 111 222 666 1332 0 2220 Halted
Bye.								Bye.
====================================
FILE: call.c-
-rw-r--r-- 1 heyan heyan 1380 11月 20 21:16 call.c-
-rw-r--r-- 1 heyan heyan  556 12月 10 18:12 call.expected
-rw-rw-r-- 1 heyan heyan  148 12月 13 15:26 call.out
-rw-rw-r-- 1 heyan heyan 4096 12月 13 15:26 call.tm
call.out ztmp9203.txt 不同：第 1 字节，第 1 行
call (Output DIFF)
							   >	WARNING(3): Expecting to return type int but function 's
							   >	WARNING(9): Expecting to return type int but function 's
							   >	WARNING(20): Expecting to return type int but function '
							   >	Number of warnings: 3
							   >	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: call.tm						Loading file: call.tm
							   >	111 
							   >	0 1 2 3 4 5 6 333 8 9 
							   >	T 
							   >	111 
							   >	0 T 
							   >	0 12321 
							   >	110889 
							   >	443556 
							   >	603729 
							   >	24975 
							   >	333 
							   >	6360 
Halted								Halted
Bye.								Bye.
====================================
FILE: charout.c-
-rw-r--r-- 1 heyan heyan  271 12月  5 15:18 charout.c-
-rw-r--r-- 1 heyan heyan 1092 12月 10 18:12 charout.expected
-rw-r--r-- 1 heyan heyan   15 12月 10 18:09 charout.in
-rw-rw-r-- 1 heyan heyan   37 12月 13 15:26 charout.out
charout.out ztmp9203.txt 不同：第 1 字节，第 1 行
charout (Output DIFF)
							   >	Number of warnings: 0
							   >	Number of errors: 0
------------------------------------				------------------------------------
							   >
							   >	Memory Configuration: Data Addresses: 0-9999  Instructio
							   >	Loading file: charout.tm
							   >	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
							   >	X X X X X X X X X X X X X X X 
							   >	X  X  X  X  X  X  X  X  X  X  
							   >	X   X   X   X   X   X   X   X 
							   >	X    X    X    X    X    X    
							   >	X     X     X     X     X     
							   >	X      X      X      X      X 
							   >	X       X       X       X     
							   >	X        X        X        X  
							   >	X         X         X         
							   >	X          X          X       
							   >	X           X           X     
							   >	X            X            X   
							   >	X             X             X 
							   >	X              X              
							   >	X               X             
							   >	X                X            
							   >	X                 X           
							   >	X                  X          
							   >	X                   X         
							   >	X                    X        
							   >	X                     X       
							   >	X                      X      
							   >	X                       X     
							   >	X                        X    
							   >	X                         X   
							   >	X                          X  
							   >	X                           X 
							   >	X                            X
							   >	Halted
							   >	Bye.
====================================
FILE: comb.c-
-rw-r--r-- 1 heyan heyan  457 11月 20 21:16 comb.c-
-rw-r--r-- 1 heyan heyan  591 12月 10 18:12 comb.expected
-rw-r--r-- 1 heyan heyan   17 11月 21 11:33 comb.in
-rw-rw-r-- 1 heyan heyan  190 12月 13 15:26 comb.out
-rw-rw-r-- 1 heyan heyan 7194 12月 13 15:26 comb.tm
comb.out ztmp9203.txt 不同：第 179 字节，第 7 行
comb (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: comb.tm						Loading file: comb.tm
							   >	4 2 6 
							   >	5 2 10 
							   >	6 2 15 
							   >	6 3 20 
							   >	7 2 21 
							   >	7 3 35 
							   >	8 2 28 
							   >	8 3 56 
							   >	8 4 70 
							   >	9 2 36 
							   >	9 3 84 
							   >	9 4 126 
							   >	10 2 45 
							   >	10 3 120 
							   >	10 4 210 
							   >	10 5 252 
							   >	11 2 55 
							   >	11 3 165 
							   >	11 4 330 
							   >	11 5 462 
							   >	12 2 66 
							   >	12 3 220 
							   >	12 4 495 
							   >	12 5 792 
							   >	12 6 924 
							   >	13 2 78 
							   >	13 3 286 
							   >	13 4 715 
							   >	13 5 1287 
							   >	13 6 1716 
							   >	14 2 91 
							   >	14 3 364 
							   >	14 4 1001 
							   >	14 5 2002 
							   >	14 6 3003 
							   >	14 7 3432 
							   >	15 2 105 
							   >	15 3 455 
							   >	15 4 1365 
							   >	15 5 3003 
							   >	15 6 5005 
							   >	15 7 6435 
Halted								Halted
Bye.								Bye.
====================================
FILE: combslow.c-
-rw-r--r-- 1 heyan heyan  593 11月 20 21:16 combslow.c-
-rw-r--r-- 1 heyan heyan  543 12月 10 18:12 combslow.expected
-rw-r--r-- 1 heyan heyan   24 11月 21 11:33 combslow.in
-rw-rw-r-- 1 heyan heyan  228 12月 13 15:26 combslow.out
-rw-rw-r-- 1 heyan heyan 9021 12月 13 15:26 combslow.tm
combslow.out ztmp9203.txt 不同：第 195 字节，第 8 行
combslow (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: combslow.tm					Loading file: combslow.tm
entered: 12							entered: 12
							   >	1 
							   >	1 1 
							   >	1 2 1 
							   >	1 3 3 1 
							   >	1 4 6 4 1 
							   >	1 5 10 10 5 1 
							   >	1 6 15 20 15 6 1 
							   >	1 7 21 35 35 21 7 1 
							   >	1 8 28 56 70 56 28 8 1 
							   >	1 9 36 84 126 126 84 36 9 1 
							   >	1 10 45 120 210 252 210 120 45 10 1 
							   >	1 11 55 165 330 462 462 330 165 55 11 1 
							   >	1 12 66 220 495 792 924 792 495 220 66 12 1 
entered: 5							entered: 5
							   >	1 
							   >	1 1 
							   >	1 2 1 
							   >	1 3 3 1 
							   >	1 4 6 4 1 
							   >	1 5 10 10 5 1 
entered: 0							entered: 0
Halted								Halted
Bye.								Bye.
====================================
FILE: compare.c-
-rw-r--r-- 1 heyan heyan   444 11月 20 21:16 compare.c-
-rw-r--r-- 1 heyan heyan   229 12月 10 18:12 compare.expected
-rw-rw-r-- 1 heyan heyan   229 12月 13 15:26 compare.out
-rw-rw-r-- 1 heyan heyan 11108 12月 13 15:26 compare.tm
compare.out ztmp9203.txt 不同：第 194 字节，第 7 行
compare (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: compare.tm					Loading file: compare.tm
T F F F T F T F F T T T T T T T T T Halted		   |	T F F F T F F F T T T F F T T T F T Halted
Bye.								Bye.
====================================
FILE: compound.c-
-rw-r--r-- 1 heyan heyan 215 11月 20 21:16 compound.c-
-rw-r--r-- 1 heyan heyan 125 12月 10 18:12 compound.expected
-rw-rw-r-- 1 heyan heyan 240 12月 13 15:26 compound.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 compound.tm
compound (Output DIFF)
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 1						Number of errors: 1
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: compound.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: control2.c-
-rw-r--r-- 1 heyan heyan  318 11月 20 21:16 control2.c-
-rw-r--r-- 1 heyan heyan  281 12月 10 18:12 control2.expected
-rw-rw-r-- 1 heyan heyan 1232 12月 13 15:26 control2.out
-rw-rw-r-- 1 heyan heyan 7262 12月 13 15:26 control2.tm
control2.out ztmp9203.txt 不同：第 183 字节，第 7 行
control2 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: control2.tm					Loading file: control2.tm
7 							   |	666 
1 1 								1 1 
1 0 							   |	1 2 
1 0 							   |	1 3 
1 0 							   |	1 4 
1 0 							   |	2 1 
1 0 							   |	2 2 
1 0 							   |	2 3 
1 0 							   |	2 4 
1 0 							   |	3 1 
1 0 							   |	3 2 
1 0 							   |	3 3 
1 0 							   |	3 4 
1 0 							   |	4 1 
1 0 							   |	4 2 
1 0 							   |	4 3 
1 0 							   |	4 4 
1 0 							   |	5 Halted
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
1 0 							   <
Halted							   <
Bye.								Bye.
====================================
FILE: control.c-
-rw-r--r-- 1 heyan heyan  212 11月 20 21:16 control.c-
-rw-r--r-- 1 heyan heyan  193 12月 10 18:12 control.expected
-rw-rw-r-- 1 heyan heyan  193 12月 13 15:26 control.out
-rw-rw-r-- 1 heyan heyan 3989 12月 13 15:26 control.tm
control (Output OK)
====================================
FILE: e.c-
-rw-r--r-- 1 heyan heyan  244 11月 20 21:16 e.c-
-rw-r--r-- 1 heyan heyan  217 12月 10 18:12 e.expected
-rw-rw-r-- 1 heyan heyan  217 12月 13 15:26 e.out
-rw-rw-r-- 1 heyan heyan 7097 12月 13 15:26 e.tm
e (Output OK)
====================================
FILE: errors2.c-
-rw-r--r-- 1 heyan heyan  97 11月 20 21:16 errors2.c-
-rw-r--r-- 1 heyan heyan 253 12月 10 18:12 errors2.expected
-rw-r--r-- 1 heyan heyan   0 11月 14  2009 errors2.in
-rw-rw-r-- 1 heyan heyan  37 12月 13 15:26 errors2.out
errors2.out ztmp9203.txt 不同：第 1 字节，第 1 行
errors2 (Output DIFF)
							   >	ERROR(5): Syntax error.  Unexpected '+'.  Expecting id.
							   >	ERROR(6): Syntax error.  Unexpected id: z.  Expecting nu
							   >	ERROR(7): Syntax error.  Unexpected '+'.  Expecting id.
							   >	Number of warnings: 0
							   >	Number of errors: 3
------------------------------------				------------------------------------
====================================
FILE: errors3.c-
-rw-r--r-- 1 heyan heyan  47 11月 20 21:16 errors3.c-
-rw-r--r-- 1 heyan heyan 281 12月 10 18:12 errors3.expected
-rw-r--r-- 1 heyan heyan   0 11月 14  2009 errors3.in
-rw-rw-r-- 1 heyan heyan  37 12月 13 15:26 errors3.out
errors3.out ztmp9203.txt 不同：第 1 字节，第 1 行
errors3 (Output DIFF)
							   >	ERROR(3): Syntax error.  Unexpected '%'.  Expecting bool
							   >	ERROR(6): Syntax error.  Unexpected '+'.
							   >	ERROR(8): Syntax error.  Unexpected '%'.
							   >	ERROR(8): Syntax error.  Unexpected '%'.
							   >	Number of warnings: 0
							   >	Number of errors: 4
------------------------------------				------------------------------------
====================================
FILE: errors4.c-
-rw-r--r-- 1 heyan heyan  722 11月 20 21:16 errors4.c-
-rw-r--r-- 1 heyan heyan 2552 12月 10 18:12 errors4.expected
-rw-r--r-- 1 heyan heyan    0 11月 14  2009 errors4.in
-rw-rw-r-- 1 heyan heyan   37 12月 13 15:26 errors4.out
errors4.out ztmp9203.txt 不同：第 1 字节，第 1 行
errors4 (Output DIFF)
							   >	ERROR(3): Syntax error.  Unexpected '+'.  Expecting id.
							   >	ERROR(7): Syntax error.  Unexpected '+'.  Expecting id.
							   >	ERROR(14): Syntax error.  Unexpected '{'.  Expecting ';'
							   >	ERROR(16): Syntax error.  Unexpected '+'.  Expecting id.
							   >	ERROR(17): Syntax error.  Unexpected '+'.
							   >	WARNING(18): Invalid input character: ^.  Character igno
							   >	ERROR(19): Syntax error.  Unexpected '+'.
							   >	ERROR(19): Syntax error.  Unexpected ';'.
							   >	ERROR(20): Syntax error.  Unexpected '+'.
							   >	ERROR(22): Syntax error.  Unexpected '+'.
							   >	ERROR(23): Syntax error.  Unexpected '+'.
							   >	ERROR(24): Syntax error.  Unexpected '+'.
							   >	ERROR(24): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(25): Syntax error.  Unexpected '+'.
							   >	ERROR(25): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(25): Syntax error.  Unexpected else.
							   >	ERROR(26): Syntax error.  Unexpected '+'.
							   >	ERROR(26): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(26): Syntax error.  Unexpected else.
							   >	ERROR(27): Syntax error.  Unexpected '+'.
							   >	ERROR(27): Syntax error.  Unexpected id: x.  Expecting '
							   >	ERROR(28): Syntax error.  Unexpected '+'.
							   >	ERROR(28): Syntax error.  Unexpected if.  Expecting or o
							   >	ERROR(29): Syntax error.  Unexpected '+'.
							   >	ERROR(30): Syntax error.  Unexpected '+'.
							   >	ERROR(30): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(30): Syntax error.  Unexpected else.
							   >	ERROR(31): Syntax error.  Unexpected else.
							   >	ERROR(32): Syntax error.  Unexpected ';'.
							   >	ERROR(33): Syntax error.  Unexpected '+'.
							   >	ERROR(33): Syntax error.  Unexpected id: x.  Expecting o
							   >	ERROR(34): Syntax error.  Unexpected '+'.
							   >	ERROR(35): Syntax error.  Unexpected if.  Expecting ')'.
							   >	ERROR(35): Syntax error.  Unexpected id: x.  Expecting '
							   >	ERROR(36): Syntax error.  Unexpected if.  Expecting ')'.
							   >	ERROR(36): Syntax error.  Unexpected id: x.  Expecting '
							   >	ERROR(37): Syntax error.  Unexpected if.  Expecting ')'.
							   >	ERROR(37): Syntax error.  Unexpected ';'.
							   >	ERROR(38): Syntax error.  Unexpected while.  Expecting '
							   >	ERROR(38): Syntax error.  Unexpected id: x.  Expecting '
							   >	ERROR(39): Syntax error.  Unexpected while.  Expecting '
							   >	ERROR(39): Syntax error.  Unexpected ';'.
							   >	ERROR(42): Syntax error.  Unexpected ';'.  Expecting ')'
							   >	ERROR(43): Syntax error.  Unexpected '+'.
							   >	ERROR(43): Syntax error.  Unexpected ';'.  Expecting ')'
							   >	ERROR(44): Syntax error.  Unexpected ';'.  Expecting ')'
							   >	ERROR(45): Syntax error.  Unexpected ';'.  Expecting ')'
							   >	ERROR(48): Syntax error.  Unexpected '}'.  Expecting ')'
							   >	Number of warnings: 1
							   >	Number of errors: 47
------------------------------------				------------------------------------
====================================
FILE: errors.c-
-rw-r--r-- 1 heyan heyan  75 11月 20 21:16 errors.c-
-rw-r--r-- 1 heyan heyan 193 12月 10 18:12 errors.expected
-rw-r--r-- 1 heyan heyan   0 11月 14  2009 errors.in
-rw-rw-r-- 1 heyan heyan  37 12月 13 15:26 errors.out
errors.out ztmp9203.txt 不同：第 1 字节，第 1 行
errors (Output DIFF)
							   >	ERROR(4): Syntax error.  Unexpected ';'.  Expecting ')'.
							   >	ERROR(6): Syntax error.  Unexpected ')'.  Expecting ';'.
							   >	Number of warnings: 0
							   >	Number of errors: 2
------------------------------------				------------------------------------
====================================
FILE: everything.c-
-rw-r--r-- 1 heyan heyan  1698 11月 20 21:16 everything.c-
-rw-r--r-- 1 heyan heyan   210 12月 10 18:12 everything.expected
-rw-rw-r-- 1 heyan heyan   154 12月 13 15:26 everything.out
-rw-rw-r-- 1 heyan heyan 12288 12月 13 15:26 everything.tm
everything.out ztmp9203.txt 不同：第 1 字节，第 1 行
everything (Output DIFF)
							   >	Number of warnings: 0
							   >	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: everything.tm					Loading file: everything.tm
Halted							   |	ERROR: Division by 0
Bye.								Bye.
====================================
FILE: everythingUndef.c-
-rw-r--r-- 1 heyan heyan 1120 11月 20 21:16 everythingUndef.c-
-rw-r--r-- 1 heyan heyan 2305 12月 10 18:12 everythingUndef.expected
-rw-r--r-- 1 heyan heyan    0 11月 14  2009 everythingUndef.in
-rw-rw-r-- 1 heyan heyan  147 12月 13 15:26 everythingUndef.out
-rw-rw-r-- 1 heyan heyan 8192 12月 13 15:26 everythingUndef.tm
everythingUndef.out ztmp9203.txt 不同：第 1 字节，第 1 行
everythingUndef (Output DIFF)
							   >	ERROR(10): Symbol 'close' is not defined.
							   >	ERROR(11): Symbol 'close' is not defined.
							   >	ERROR(11): Symbol 'shave' is not defined.
							   >	ERROR(13): Symbol 'gromit' is not defined.
							   >	ERROR(13): Symbol 'gromit' is not defined.
							   >	ERROR(14): Symbol 'gromit' is not defined.
							   >	ERROR(15): Symbol 'gromit' is not defined.
							   >	ERROR(16): Symbol 'close' is not defined.
							   >	ERROR(16): Symbol 'gromit' is not defined.
							   >	ERROR(17): Symbol 'shave' is not defined.
							   >	ERROR(17): Symbol 'gromit' is not defined.
							   >	ERROR(19): Symbol 'a' is not defined.
							   >	ERROR(19): Symbol 'grand' is not defined.
							   >	ERROR(19): Symbol 'day' is not defined.
							   >	ERROR(19): Symbol 'out' is not defined.
							   >	ERROR(21): Symbol 'close' is not defined.
							   >	ERROR(22): Symbol 'shave' is not defined.
							   >	ERROR(23): Symbol 'shave' is not defined.
							   >	ERROR(23): Symbol 'close' is not defined.
							   >	ERROR(23): Symbol 'shave' is not defined.
							   >	ERROR(23): Symbol 'close' is not defined.
							   >	ERROR(24): Symbol 'shave' is not defined.
							   >	ERROR(24): Symbol 'close' is not defined.
							   >	ERROR(24): Symbol 'close' is not defined.
							   >	ERROR(24): Symbol 'shave' is not defined.
							   >	ERROR(25): Symbol 'close' is not defined.
							   >	ERROR(26): Symbol 'shave' is not defined.
							   >	ERROR(27): Symbol 'sheep' is not defined.
							   >	ERROR(28): Symbol 'sheep' is not defined.
							   >	ERROR(29): Symbol 'gromit' is not defined.
							   >	ERROR(29): Symbol 'were' is not defined.
							   >	ERROR(29): Symbol 'rabbit' is not defined.
							   >	ERROR(41): Symbol 'chicken' is not defined.
							   >	ERROR(41): Expecting array in parameter 3 of call to 'We
							   >	ERROR(41): Symbol 'run' is not defined.
							   >	ERROR(41): Expecting array in parameter 4 of call to 'We
							   >	ERROR(43): Cannot use function 'wallace' as a simple var
							   >	ERROR(43): Symbol 'gromit' is not defined.
							   >	ERROR(43): '>=' requires operands of type char or type i
							   >	ERROR(46): Symbol 'x' is not defined.
							   >	ERROR(46): Symbol 'y' is not defined.
							   >	ERROR(46): Symbol 'x' is not defined.
							   >	ERROR(46): Symbol 'x' is not defined.
							   >	ERROR(46): Symbol 'x' is not defined.
							   >	ERROR(46): Symbol 'y' is not defined.
							   >	ERROR(50): Too many parameters passed for function 'chee
							   >	ERROR(50): Symbol 'gromit' is not defined.
							   >	WARNING(48): Expecting to return type int but function '
							   >	Number of warnings: 1
							   >	Number of errors: 47
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: everythingUndef.tm			   <
====================================
FILE: examplearray2.c-
-rw-r--r-- 1 heyan heyan  112 11月 21 11:59 examplearray2.c-
-rw-r--r-- 1 heyan heyan  199 12月 10 18:12 examplearray2.expected
-rw-rw-r-- 1 heyan heyan  199 12月 13 15:26 examplearray2.out
-rw-rw-r-- 1 heyan heyan 3364 12月 13 15:26 examplearray2.tm
examplearray2 (Output OK)
====================================
FILE: examplearray3.c-
-rw-r--r-- 1 heyan heyan  192 11月 21 11:59 examplearray3.c-
-rw-r--r-- 1 heyan heyan  203 12月 10 18:12 examplearray3.expected
-rw-rw-r-- 1 heyan heyan  201 12月 13 15:26 examplearray3.out
-rw-rw-r-- 1 heyan heyan 4174 12月 13 15:26 examplearray3.tm
examplearray3.out ztmp9203.txt 不同：第 188 字节，第 7 行
examplearray3 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: examplearray3.tm					Loading file: examplearray3.tm
1 Halted						   |	777 Halted
Bye.								Bye.
====================================
FILE: examplearray.c-
-rw-r--r-- 1 heyan heyan  179 11月 21 11:59 examplearray.c-
-rw-r--r-- 1 heyan heyan  198 12月 10 18:12 examplearray.expected
-rw-rw-r-- 1 heyan heyan  198 12月 13 15:26 examplearray.out
-rw-rw-r-- 1 heyan heyan 4538 12月 13 15:26 examplearray.tm
examplearray (Output OK)
====================================
FILE: example.c-
-rw-r--r-- 1 heyan heyan  248 11月 21 11:59 example.c-
-rw-r--r-- 1 heyan heyan  193 12月 10 18:12 example.expected
-rw-rw-r-- 1 heyan heyan  193 12月 13 15:26 example.out
-rw-rw-r-- 1 heyan heyan 5220 12月 13 15:26 example.tm
example (Output OK)
====================================
FILE: exampleif.c-
-rw-r--r-- 1 heyan heyan   70 11月 21 11:59 exampleif.c-
-rw-r--r-- 1 heyan heyan  195 12月 10 18:12 exampleif.expected
-rw-rw-r-- 1 heyan heyan  195 12月 13 15:26 exampleif.out
-rw-rw-r-- 1 heyan heyan 2772 12月 13 15:26 exampleif.tm
exampleif (Output OK)
====================================
FILE: exampleinit.c-
-rw-r--r-- 1 heyan heyan  631 11月 21 11:59 exampleinit.c-
-rw-r--r-- 1 heyan heyan  197 12月 10 18:12 exampleinit.expected
-rw-rw-r-- 1 heyan heyan  197 12月 13 15:26 exampleinit.out
-rw-rw-r-- 1 heyan heyan 1941 12月 13 15:26 exampleinit.tm
exampleinit (Output OK)
====================================
FILE: exampleScope.c-
-rw-r--r-- 1 heyan heyan  190 11月 21 14:00 exampleScope.c-
-rw-r--r-- 1 heyan heyan  198 12月 10 18:12 exampleScope.expected
-rw-rw-r-- 1 heyan heyan  198 12月 13 15:26 exampleScope.out
-rw-rw-r-- 1 heyan heyan 2341 12月 13 15:26 exampleScope.tm
exampleScope (Output OK)
====================================
FILE: examplestatic.c-
-rw-r--r-- 1 heyan heyan  490 11月 21 11:59 examplestatic.c-
-rw-r--r-- 1 heyan heyan  199 12月 10 18:12 examplestatic.expected
-rw-rw-r-- 1 heyan heyan  199 12月 13 15:26 examplestatic.out
-rw-rw-r-- 1 heyan heyan 1943 12月 13 15:26 examplestatic.tm
examplestatic (Output OK)
====================================
FILE: examplewhile.c-
-rw-r--r-- 1 heyan heyan   65 11月 21 11:59 examplewhile.c-
-rw-r--r-- 1 heyan heyan  198 12月 10 18:12 examplewhile.expected
-rw-rw-r-- 1 heyan heyan  198 12月 13 15:26 examplewhile.out
-rw-rw-r-- 1 heyan heyan 2367 12月 13 15:26 examplewhile.tm
examplewhile (Output OK)
====================================
FILE: exp2.c-
-rw-r--r-- 1 heyan heyan   481 11月 20 21:16 exp2.c-
-rw-r--r-- 1 heyan heyan  3385 12月 10 18:12 exp2.expected
-rw-rw-r-- 1 heyan heyan  3496 12月 13 15:26 exp2.out
-rw-rw-r-- 1 heyan heyan 11082 12月 13 15:26 exp2.tm
exp2 (Output DIFF)
ERROR(11): '=' requires operands of the same type but lh	ERROR(11): '=' requires operands of the same type but lh
ERROR(12): '=' requires operands of the same type but lh	ERROR(12): '=' requires operands of the same type but lh
ERROR(13): '=' requires operands of the same type but lh	ERROR(13): '=' requires operands of the same type but lh
ERROR(15): '*' requires operands of type int but rhs is 	ERROR(15): '*' requires operands of type int but rhs is 
ERROR(15): '*' requires operands of type int but lhs is 	ERROR(15): '*' requires operands of type int but lhs is 
ERROR(15): '+' requires operands of type int but lhs is 	ERROR(15): '+' requires operands of type int but lhs is 
ERROR(15): '+' requires operands of type int but rhs is 	ERROR(15): '+' requires operands of type int but rhs is 
ERROR(15): '*' requires operands of type int but lhs is 	ERROR(15): '*' requires operands of type int but lhs is 
ERROR(15): '=' requires operands of the same type but lh	ERROR(15): '=' requires operands of the same type but lh
ERROR(16): '/' requires operands of type int but rhs is 	ERROR(16): '/' requires operands of type int but rhs is 
ERROR(16): '/' requires operands of type int but lhs is 	ERROR(16): '/' requires operands of type int but lhs is 
ERROR(16): '-' requires operands of type int but lhs is 	ERROR(16): '-' requires operands of type int but lhs is 
ERROR(16): '-' requires operands of type int but rhs is 	ERROR(16): '-' requires operands of type int but rhs is 
ERROR(16): '/' requires operands of type int but lhs is 	ERROR(16): '/' requires operands of type int but lhs is 
ERROR(16): '=' requires operands of the same type but lh	ERROR(16): '=' requires operands of the same type but lh
ERROR(17): '/' requires operands of type int but rhs is 	ERROR(17): '/' requires operands of type int but rhs is 
ERROR(17): '/' requires operands of type int but lhs is 	ERROR(17): '/' requires operands of type int but lhs is 
ERROR(17): '%' requires operands of type int but rhs is 	ERROR(17): '%' requires operands of type int but rhs is 
ERROR(17): '%' requires operands of type int but lhs is 	ERROR(17): '%' requires operands of type int but lhs is 
ERROR(17): '%' requires operands of type int but rhs is 	ERROR(17): '%' requires operands of type int but rhs is 
ERROR(17): '=' requires operands of the same type but lh	ERROR(17): '=' requires operands of the same type but lh
ERROR(22): '=' requires operands of the same type but lh	ERROR(22): '=' requires operands of the same type but lh
ERROR(23): '=' requires operands of the same type but lh	ERROR(23): '=' requires operands of the same type but lh
ERROR(25): 'and' requires operands of type bool but rhs 	ERROR(25): 'and' requires operands of type bool but rhs 
ERROR(25): 'and' requires operands of type bool but lhs 	ERROR(25): 'and' requires operands of type bool but lhs 
ERROR(25): 'and' requires operands of type bool but rhs 	ERROR(25): 'and' requires operands of type bool but rhs 
ERROR(25): 'or' requires operands of type bool but lhs i	ERROR(25): 'or' requires operands of type bool but lhs i
ERROR(25): 'and' requires operands of type bool but lhs 	ERROR(25): 'and' requires operands of type bool but lhs 
ERROR(25): '=' requires operands of the same type but lh	ERROR(25): '=' requires operands of the same type but lh
ERROR(26): Unary 'not' requires an operand of type bool 	ERROR(26): Unary 'not' requires an operand of type bool 
ERROR(26): '=' requires operands of the same type but lh	ERROR(26): '=' requires operands of the same type but lh
ERROR(36): Symbol 'x' is not defined.				ERROR(36): Symbol 'x' is not defined.
ERROR(37): Symbol 'x' is not defined.				ERROR(37): Symbol 'x' is not defined.
ERROR(39): '+' requires operands of type int but lhs is 	ERROR(39): '+' requires operands of type int but lhs is 
ERROR(39): '+' requires operands of type int but rhs is 	ERROR(39): '+' requires operands of type int but rhs is 
ERROR(39): '=' requires operands of the same type but lh	ERROR(39): '=' requires operands of the same type but lh
ERROR(40): Symbol 'x' is not defined.				ERROR(40): Symbol 'x' is not defined.
ERROR(40): '*' requires operands of type int but lhs is 	ERROR(40): '*' requires operands of type int but lhs is 
ERROR(40): '*' requires operands of type int but rhs is 	ERROR(40): '*' requires operands of type int but rhs is 
ERROR(40): '+' requires operands of type int but lhs is 	ERROR(40): '+' requires operands of type int but lhs is 
ERROR(40): '*' requires operands of type int but lhs is 	ERROR(40): '*' requires operands of type int but lhs is 
ERROR(40): Symbol 'x' is not defined.				ERROR(40): Symbol 'x' is not defined.
ERROR(40): '+' requires operands of type int but lhs is 	ERROR(40): '+' requires operands of type int but lhs is 
ERROR(40): '+' requires operands of type int but rhs is 	ERROR(40): '+' requires operands of type int but rhs is 
ERROR(43): '=' requires operands of the same type but lh	ERROR(43): '=' requires operands of the same type but lh
Number of warnings: 0						Number of warnings: 0
Number of errors: 45						Number of errors: 45
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: exp2.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: exp3.c-
-rw-r--r-- 1 heyan heyan  830 11月 20 21:16 exp3.c-
-rw-r--r-- 1 heyan heyan  231 12月 10 18:12 exp3.expected
-rw-rw-r-- 1 heyan heyan  231 12月 13 15:26 exp3.out
-rw-rw-r-- 1 heyan heyan 9993 12月 13 15:26 exp3.tm
exp3 (Output OK)
====================================
FILE: exp.c-
-rw-r--r-- 1 heyan heyan   698 11月 20 21:16 exp.c-
-rw-r--r-- 1 heyan heyan   606 12月 10 18:12 exp.expected
-rw-rw-r-- 1 heyan heyan   716 12月 13 15:26 exp.out
-rw-rw-r-- 1 heyan heyan 14375 12月 13 15:26 exp.tm
exp (Output DIFF)
ERROR(25): 'and' requires operands of type bool but rhs 	ERROR(25): 'and' requires operands of type bool but rhs 
ERROR(25): 'or' requires operands of type bool but rhs i	ERROR(25): 'or' requires operands of type bool but rhs i
ERROR(34): '+' requires operands of type int but lhs is 	ERROR(34): '+' requires operands of type int but lhs is 
ERROR(34): '+' requires operands of type int but rhs is 	ERROR(34): '+' requires operands of type int but rhs is 
ERROR(34): '=' requires operands of the same type but lh	ERROR(34): '=' requires operands of the same type but lh
ERROR(39): Symbol 'x' is not defined.				ERROR(39): Symbol 'x' is not defined.
ERROR(40): Symbol 'x' is not defined.				ERROR(40): Symbol 'x' is not defined.
ERROR(43): Symbol 'x' is not defined.				ERROR(43): Symbol 'x' is not defined.
ERROR(43): Symbol 'x' is not defined.				ERROR(43): Symbol 'x' is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 9						Number of errors: 9
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: exp.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: factor.c-
-rw-r--r-- 1 heyan heyan   680 11月 21 11:59 factor.c-
-rw-r--r-- 1 heyan heyan   327 12月 10 18:12 factor.expected
-rw-r--r-- 1 heyan heyan    39 11月 21 11:33 factor.in
-rw-rw-r-- 1 heyan heyan  5965 12月 13 15:26 factor.out
-rw-rw-r-- 1 heyan heyan 11779 12月 13 15:26 factor.tm
factor.out ztmp9203.txt 不同：第 194 字节，第 8 行
factor (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: factor.tm						Loading file: factor.tm
entered: 210							entered: 210
							   >	2 3 5 7 
							   >	entered: 666
							   >	2 3 3 37 
							   >	entered: 4096
							   >	2 2 2 2 2 2 2 2 2 2 2 2 
							   >	entered: 3331
							   >	3331 
							   >	entered: 343
							   >	7 7 7 
							   >	entered: 0
Halted								Halted
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: factorial2.c-
-rw-r--r-- 1 heyan heyan  339 11月 21 11:59 factorial2.c-
-rw-r--r-- 1 heyan heyan  256 12月 10 18:12 factorial2.expected
-rw-r--r-- 1 heyan heyan   17 11月 21 11:33 factorial2.in
-rw-rw-r-- 1 heyan heyan  208 12月 13 15:26 factorial2.out
-rw-rw-r-- 1 heyan heyan 5081 12月 13 15:26 factorial2.tm
factorial2.out ztmp9203.txt 不同：第 197 字节，第 8 行
factorial2 (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: factorial2.tm					Loading file: factorial2.tm
entered: 15							entered: 15
							   >	1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2004310016 
Halted								Halted
Bye.								Bye.
====================================
FILE: factorial.c-
-rw-r--r-- 1 heyan heyan  336 11月 20 21:16 factorial.c-
-rw-r--r-- 1 heyan heyan  255 12月 10 18:12 factorial.expected
-rw-r--r-- 1 heyan heyan   17 11月 21 11:33 factorial.in
-rw-rw-r-- 1 heyan heyan  207 12月 13 15:26 factorial.out
-rw-rw-r-- 1 heyan heyan 5044 12月 13 15:26 factorial.tm
factorial.out ztmp9203.txt 不同：第 196 字节，第 8 行
factorial (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: factorial.tm					Loading file: factorial.tm
entered: 15							entered: 15
							   >	1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2004310016 
Halted								Halted
Bye.								Bye.
====================================
FILE: factorialr.c-
-rw-r--r-- 1 heyan heyan  262 11月 21 11:59 factorialr.c-
-rw-r--r-- 1 heyan heyan  220 12月 10 18:12 factorialr.expected
-rw-r--r-- 1 heyan heyan   17 11月 21 11:33 factorialr.in
-rw-rw-r-- 1 heyan heyan  220 12月 13 15:26 factorialr.out
-rw-rw-r-- 1 heyan heyan 5146 12月 13 15:26 factorialr.tm
factorialr (Output OK)
====================================
FILE: fractal.c-
-rw-r--r-- 1 heyan heyan 3162 11月 20 21:16 fractal.c-
-rw-r--r-- 1 heyan heyan 6806 12月 10 18:12 fractal.expected
-rw-r--r-- 1 heyan heyan   17 11月 21 11:33 fractal.in
-rw-rw-r-- 1 heyan heyan 1147 12月 13 15:26 fractal.out
-rw-rw-r-- 1 heyan heyan 1782 12月 13 15:26 fractal.tm
fractal.out ztmp9203.txt 不同：第 1 字节，第 1 行
fractal (Output DIFF)
ERROR(114): Symbol 'HEIGHT' is not defined.		   <
ERROR(115): Symbol 'WIDTH' is not defined.		   <
ERROR(116): Symbol 'XStep' is not defined.		   <
ERROR(116): Symbol 'WIDTH' is not defined.		   <
ERROR(117): Symbol 'YStep' is not defined.		   <
ERROR(117): Symbol 'HEIGHT' is not defined.		   <
ERROR(118): Symbol 'XMax' is not defined.		   <
ERROR(118): Symbol 'WIDTH' is not defined.		   <
ERROR(119): Symbol 'YMax' is not defined.		   <
ERROR(119): Symbol 'HEIGHT' is not defined.		   <
ERROR(120): Symbol 'Mandelbrot' is not defined.		   <
ERROR(126): Symbol 'HEIGHT' is not defined.		   <
ERROR(127): Symbol 'WIDTH' is not defined.		   <
ERROR(128): Symbol 'XStep' is not defined.		   <
ERROR(128): Symbol 'WIDTH' is not defined.		   <
ERROR(129): Symbol 'YStep' is not defined.		   <
ERROR(129): Symbol 'HEIGHT' is not defined.		   <
ERROR(130): Symbol 'XMax' is not defined.		   <
ERROR(130): Symbol 'WIDTH' is not defined.		   <
ERROR(131): Symbol 'YMax' is not defined.		   <
ERROR(131): Symbol 'HEIGHT' is not defined.		   <
ERROR(132): Symbol 'Julia' is not defined.		   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 22					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: fractal.tm					Loading file: fractal.tm
							   >	0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 
							   >	0 0 0 0 0 0 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
							   >	0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 F 
							   >	0 0 0 0 0 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 4 6 
							   >	0 0 0 0 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 6 
							   >	0 0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 6 7 
							   >	0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 4 4 5 T T 
							   >	0 0 0 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 5 5 6 F T 
							   >	0 0 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 5 6 6 6 8 F T 
							   >	0 0 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 5 T T 9 T T T T 
							   >	0 0 1 2 2 2 2 2 2 2 2 2 2 3 3 4 4 4 4 5 6 9 T T T T T T 
							   >	0 0 2 2 2 2 2 2 2 2 2 3 3 4 4 4 4 4 5 5 7 F T T T T T T 
							   >	0 1 2 2 2 2 2 2 2 3 3 5 5 5 4 4 5 5 6 7 T T T T T T T T 
							   >	0 2 2 2 2 2 3 3 3 4 5 F 7 6 7 7 6 6 7 8 T T T T T T T T 
							   >	0 2 2 2 3 3 3 3 4 4 5 9 T F F T T 8 8 T T T T T T T T T 
							   >	0 2 3 3 3 3 3 4 4 4 6 8 T T T T T T F T T T T T T T T T 
							   >	0 3 3 3 3 3 4 4 4 6 7 T T T T T T T T T T T T T T T T T 
							   >	0 3 3 3 3 4 5 5 6 T T T T T T T T T T T T T T T T T T T 
							   >	1 4 5 6 6 6 6 7 9 T T T T T T T T T T T T T T T T T T T 
							   >	2 6 7 9 F F F F T T T T T T T T T T T T T T T T T T T T 
							   >	0 4 4 3 5 5 5 6 7 F T T T T T T T T T T T T T T T T T T 
							   >	0 3 3 3 3 4 4 5 6 T 8 T T T T T T T T T T T T T T T T T 
							   >	0 2 3 3 3 3 4 4 4 5 6 9 T T T T T T T T T T T T T T T T 
							   >	0 2 2 3 3 3 3 4 4 4 6 7 T T T T T T 9 T T T T T T T T T 
							   >	0 2 2 2 3 3 3 3 4 4 5 T 8 8 9 F 8 7 7 F T T T T T T T T 
							   >	0 1 2 2 2 2 2 3 3 3 5 T 6 5 6 6 6 6 6 7 T T T T T T T T 
							   >	0 1 2 2 2 2 2 2 2 2 3 4 4 4 4 4 4 5 5 6 T T T T T T T T 
							   >	0 0 2 2 2 2 2 2 2 2 2 2 3 4 4 4 4 4 5 5 7 9 T T T T T T 
							   >	0 0 1 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 5 6 T T T T T T T 
							   >	0 0 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 4 5 T T 8 9 T T T 
							   >	0 0 0 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 4 5 5 6 7 T T 
							   >	0 0 0 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 5 6 9 T 
							   >	0 0 0 0 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 5 7 F 
							   >	0 0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 5 7 
							   >	0 0 0 0 0 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 4 4 6 
							   >	0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 7 
							   >	0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 4 
							   >	0 0 0 0 0 0 0 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
							   >
							   >	0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
							   >	0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
							   >	0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 
							   >	0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 
							   >	0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 3 
							   >	0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 
							   >	0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 
							   >	0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 
							   >	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 
							   >	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 
							   >	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 
							   >	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 4 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 4 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 6 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 4 4 5 
							   >	1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 4 4 4 5 
							   >	1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 5 
							   >	0 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 4 4 4 4 5 6 
							   >	0 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 4 4 4 4 5 5 6 
							   >	0 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 4 4 4 5 5 5 6 
							   >	0 1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 4 4 5 5 5 5 6 8 
							   >	0 1 1 1 1 1 1 1 2 2 2 2 3 3 3 3 3 3 3 4 4 5 5 5 5 6 7 F 
							   >	0 1 1 1 1 1 1 1 2 2 2 3 3 3 3 3 3 3 4 4 6 7 6 6 6 7 8 T 
							   >	0 0 1 1 1 1 1 1 2 2 2 3 3 3 3 4 4 4 5 5 7 T 8 8 T 8 9 T 
							   >	0 0 1 1 1 1 1 1 2 2 3 4 4 4 4 4 5 5 5 7 8 T T T T T T 8 
							   >	0 0 1 1 1 1 1 1 2 2 4 7 6 5 5 6 6 6 7 F T 8 9 8 8 F F 7 
							   >	0 0 0 1 1 1 1 1 2 2 4 9 T T T 7 7 8 8 T 8 7 6 6 6 7 T 8 
							   >	0 0 0 1 1 1 1 1 1 2 3 5 5 6 7 T T F T 7 6 5 5 5 6 7 T F 
							   >	0 0 0 0 1 1 1 1 1 2 3 3 4 4 6 T 7 6 9 6 5 5 5 5 5 5 7 9 
							   >	0 0 0 0 1 1 1 1 1 2 2 3 3 4 5 F 5 5 4 4 4 3 4 4 4 4 5 6 
							   >	0 0 0 0 0 1 1 1 1 1 2 2 3 3 7 6 4 4 3 3 3 3 3 3 4 4 4 5 
							   >	0 0 0 0 0 1 1 1 1 1 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 
							   >	0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 
							   >	0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 
Halted								Halted
Bye.								Bye.
====================================
FILE: funcaa.c-
-rw-r--r-- 1 heyan heyan  249 11月 20 21:16 funcaa.c-
-rw-r--r-- 1 heyan heyan  192 12月 10 18:12 funcaa.expected
-rw-rw-r-- 1 heyan heyan  192 12月 13 15:26 funcaa.out
-rw-rw-r-- 1 heyan heyan 4522 12月 13 15:26 funcaa.tm
funcaa (Output OK)
====================================
FILE: func.c-
-rw-r--r-- 1 heyan heyan 451 11月 20 21:16 func.c-
-rw-r--r-- 1 heyan heyan 528 12月 10 18:12 func.expected
-rw-rw-r-- 1 heyan heyan 148 12月 13 15:26 func.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 func.tm
func.out ztmp9203.txt 不同：第 1 字节，第 1 行
func (Output DIFF)
							   >	ERROR(10): Function 'bat' at line 8 is expecting to retu
							   >	ERROR(56): Expecting type int in parameter 2 of call to 
							   >	ERROR(56): Expecting array in parameter 2 of call to 'do
							   >	ERROR(56): Expecting type bool in parameter 3 of call to
							   >	ERROR(56): Not expecting array in parameter 3 of call to
							   >	Number of warnings: 0
							   >	Number of errors: 5
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: func.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: funcdef.c-
-rw-r--r-- 1 heyan heyan 125 11月 20 21:16 funcdef.c-
-rw-r--r-- 1 heyan heyan 677 12月 10 18:12 funcdef.expected
-rw-rw-r-- 1 heyan heyan 533 12月 13 15:26 funcdef.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 funcdef.tm
funcdef.out ztmp9203.txt 不同：第 135 字节，第 3 行
funcdef (Output DIFF)
ERROR(5): Symbol 'z' is already defined at line 3.		ERROR(5): Symbol 'z' is already defined at line 3.
WARNING(5): Expecting to return type int but function 'z	WARNING(5): Expecting to return type int but function 'z
ERROR(25): Symbol 'x' is not defined.			   |	WARNING(9): Expecting to return type int but function 'y
ERROR(26): Symbol 'x' is not defined.			   |	ERROR(13): Symbol 'y' is already defined at line 9.
							   >	ERROR(20): 'x' is a simple variable and cannot be called
							   >	WARNING(15): Expecting to return type int but function '
							   >	ERROR(25): Cannot use function 'x' as a simple variable.
WARNING(23): Expecting to return type int but function '	WARNING(23): Expecting to return type int but function '
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 2					   |	Number of warnings: 4
Number of errors: 4					   |	Number of errors: 5
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: funcdef.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: gcd.c-
-rw-r--r-- 1 heyan heyan  321 11月 20 21:16 gcd.c-
-rw-r--r-- 1 heyan heyan  455 12月 10 18:12 gcd.expected
-rw-r--r-- 1 heyan heyan   74 11月 21 11:33 gcd.in
-rw-rw-r-- 1 heyan heyan  455 12月 13 15:26 gcd.out
-rw-rw-r-- 1 heyan heyan 5720 12月 13 15:26 gcd.tm
gcd (Output OK)
====================================
FILE: gcdsm.c-
-rw-r--r-- 1 heyan heyan  173 11月 20 21:16 gcdsm.c-
-rw-r--r-- 1 heyan heyan  460 12月 10 18:12 gcdsm.expected
-rw-r--r-- 1 heyan heyan   74 11月 21 11:33 gcdsm.in
-rw-rw-r-- 1 heyan heyan  460 12月 13 15:26 gcdsm.out
-rw-rw-r-- 1 heyan heyan 5333 12月 13 15:26 gcdsm.tm
gcdsm (Output OK)
====================================
FILE: globalArray.c-
-rw-r--r-- 1 heyan heyan  135 11月 20 21:16 globalArray.c-
-rw-r--r-- 1 heyan heyan  203 12月 10 18:12 globalArray.expected
-rw-rw-r-- 1 heyan heyan  197 12月 13 15:26 globalArray.out
-rw-rw-r-- 1 heyan heyan 2092 12月 13 15:26 globalArray.tm
globalArray.out ztmp9203.txt 不同：第 186 字节，第 7 行
globalArray (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: globalArray.tm					Loading file: globalArray.tm
Halted							   |	666 T Halted
Bye.								Bye.
====================================
FILE: global.c-
-rw-r--r-- 1 heyan heyan  122 11月 20 21:16 global.c-
-rw-r--r-- 1 heyan heyan  198 12月 10 18:12 global.expected
-rw-rw-r-- 1 heyan heyan  192 12月 13 15:26 global.out
-rw-rw-r-- 1 heyan heyan 1781 12月 13 15:26 global.tm
global.out ztmp9203.txt 不同：第 181 字节，第 7 行
global (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: global.tm						Loading file: global.tm
Halted							   |	666 T Halted
Bye.								Bye.
====================================
FILE: globals.c-
-rw-r--r-- 1 heyan heyan  52 11月 20 21:16 globals.c-
-rw-r--r-- 1 heyan heyan 125 12月 10 18:12 globals.expected
-rw-rw-r-- 1 heyan heyan 239 12月 13 15:26 globals.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 globals.tm
globals (Output DIFF)
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 1						Number of errors: 1
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: globals.tm				   <
Halted							   <
Bye.							   <
====================================
FILE: if.c-
-rw-r--r-- 1 heyan heyan  159 11月 20 21:16 if.c-
-rw-r--r-- 1 heyan heyan  196 12月 10 18:12 if.expected
-rw-rw-r-- 1 heyan heyan  196 12月 13 15:26 if.out
-rw-rw-r-- 1 heyan heyan 4345 12月 13 15:26 if.tm
if (Output OK)
====================================
FILE: init.c-
-rw-r--r-- 1 heyan heyan  746 12月 10 18:02 init.c-
-rw-r--r-- 1 heyan heyan  247 12月 10 18:12 init.expected
-rw-rw-r-- 1 heyan heyan  387 12月 13 15:26 init.out
-rw-rw-r-- 1 heyan heyan 1779 12月 13 15:26 init.tm
init.out ztmp9203.txt 不同：第 1 字节，第 1 行
init (Output DIFF)
ERROR(20): Symbol 'gc' is not defined.			   <
ERROR(20): The operation '*' only works with arrays.	   <
ERROR(44): Symbol 'y' is already defined at line 8.	   <
ERROR(47): The operation '*' only works with arrays.	   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 4					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: init.tm						Loading file: init.tm
							   >	111 
							   >	T 
							   >	13 
							   >	666 
							   >	a
							   >	T 
							   >	T 
							   >	T 
							   >	10 
							   >	26 
							   >	-46 
							   >	666 
							   >	15 
							   >	20 
							   >	F 
Halted								Halted
Bye.								Bye.
====================================
FILE: io.c-
-rw-r--r-- 1 heyan heyan   525 11月 20 21:16 io.c-
-rw-r--r-- 1 heyan heyan   305 12月 10 18:12 io.expected
-rw-r--r-- 1 heyan heyan    28 11月 21 11:33 io.in
-rw-rw-r-- 1 heyan heyan   305 12月 13 15:26 io.out
-rw-rw-r-- 1 heyan heyan 10535 12月 13 15:26 io.tm
io (Output OK)
====================================
FILE: localArray.c-
-rw-r--r-- 1 heyan heyan  148 11月 20 21:16 localArray.c-
-rw-r--r-- 1 heyan heyan  202 12月 10 18:12 localArray.expected
-rw-rw-r-- 1 heyan heyan  200 12月 13 15:26 localArray.out
-rw-rw-r-- 1 heyan heyan 3493 12月 13 15:26 localArray.tm
localArray.out ztmp9203.txt 不同：第 185 字节，第 7 行
localArray (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: localArray.tm					Loading file: localArray.tm
2 T Halted						   |	666 T Halted
Bye.								Bye.
====================================
FILE: local.c-
-rw-r--r-- 1 heyan heyan  123 11月 20 21:16 local.c-
-rw-r--r-- 1 heyan heyan  197 12月 10 18:12 local.expected
-rw-rw-r-- 1 heyan heyan  197 12月 13 15:26 local.out
-rw-rw-r-- 1 heyan heyan 3114 12月 13 15:26 local.tm
local (Output OK)
====================================
FILE: logic2.c-
-rw-r--r-- 1 heyan heyan  283 11月 21 12:21 logic2.c-
-rw-r--r-- 1 heyan heyan 1211 12月 10 18:12 logic2.expected
-rw-rw-r-- 1 heyan heyan 1352 12月 13 15:26 logic2.out
-rw-rw-r-- 1 heyan heyan 7133 12月 13 15:26 logic2.tm
logic2 (Output DIFF)
ERROR(6): Expecting type int in parameter 1 of call to '	ERROR(6): Expecting type int in parameter 1 of call to '
ERROR(7): Expecting type int in parameter 1 of call to '	ERROR(7): Expecting type int in parameter 1 of call to '
ERROR(10): Expecting type int in parameter 1 of call to 	ERROR(10): Expecting type int in parameter 1 of call to 
ERROR(11): Expecting type int in parameter 1 of call to 	ERROR(11): Expecting type int in parameter 1 of call to 
ERROR(12): Expecting type int in parameter 1 of call to 	ERROR(12): Expecting type int in parameter 1 of call to 
ERROR(14): Expecting type int in parameter 1 of call to 	ERROR(14): Expecting type int in parameter 1 of call to 
ERROR(15): Expecting type int in parameter 1 of call to 	ERROR(15): Expecting type int in parameter 1 of call to 
ERROR(16): Expecting type int in parameter 1 of call to 	ERROR(16): Expecting type int in parameter 1 of call to 
ERROR(17): Expecting type int in parameter 1 of call to 	ERROR(17): Expecting type int in parameter 1 of call to 
ERROR(18): Expecting type int in parameter 1 of call to 	ERROR(18): Expecting type int in parameter 1 of call to 
ERROR(19): Expecting type int in parameter 1 of call to 	ERROR(19): Expecting type int in parameter 1 of call to 
Number of warnings: 0						Number of warnings: 0
Number of errors: 11						Number of errors: 11
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: logic2.tm					   <
1 0 0 0 1 1 1 0 222 222 222 Halted			   <
Bye.							   <
====================================
FILE: logic.c-
-rw-r--r-- 1 heyan heyan  286 11月 20 21:16 logic.c-
-rw-r--r-- 1 heyan heyan  209 12月 10 18:12 logic.expected
-rw-rw-r-- 1 heyan heyan  209 12月 13 15:26 logic.out
-rw-rw-r-- 1 heyan heyan 6301 12月 13 15:26 logic.tm
logic.out ztmp9203.txt 不同：第 193 字节，第 8 行
logic (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: logic.tm						Loading file: logic.tm
F F F T 							F F F T 
F T F T 						   |	F T T T 
Halted								Halted
Bye.								Bye.
====================================
FILE: loop.c-
-rw-r--r-- 1 heyan heyan  109 11月 20 21:16 loop.c-
-rw-r--r-- 1 heyan heyan  190 12月 10 18:12 loop.expected
-rw-rw-r-- 1 heyan heyan  190 12月 13 15:26 loop.out
-rw-rw-r-- 1 heyan heyan 2545 12月 13 15:26 loop.tm
loop (Output OK)
====================================
FILE: main2.c-
-rw-r--r-- 1 heyan heyan  112 11月 20 21:16 main2.c-
-rw-r--r-- 1 heyan heyan  222 12月 10 18:12 main2.expected
-rw-r--r-- 1 heyan heyan   20 11月 21 11:33 main2.in
-rw-rw-r-- 1 heyan heyan  222 12月 13 15:26 main2.out
-rw-rw-r-- 1 heyan heyan 3653 12月 13 15:26 main2.tm
main2 (Output OK)
====================================
FILE: main3.c-
-rw-r--r-- 1 heyan heyan   85 11月 20 21:16 main3.c-
-rw-r--r-- 1 heyan heyan  284 12月 10 18:12 main3.expected
-rw-rw-r-- 1 heyan heyan  401 12月 13 15:26 main3.out
-rw-rw-r-- 1 heyan heyan 3168 12月 13 15:26 main3.tm
main3 (Output DIFF)
ERROR(4): Expecting type int in parameter 1 of call to '	ERROR(4): Expecting type int in parameter 1 of call to '
ERROR(5): Expecting type bool in parameter 1 of call to 	ERROR(5): Expecting type bool in parameter 1 of call to 
Number of warnings: 0						Number of warnings: 0
Number of errors: 2						Number of errors: 2
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: main3.tm					   <
1 T 							   <
Halted							   <
Bye.							   <
====================================
FILE: main4.c-
-rw-r--r-- 1 heyan heyan   24 11月 20 21:16 main4.c-
-rw-r--r-- 1 heyan heyan  277 12月 10 18:12 main4.expected
-rw-rw-r-- 1 heyan heyan  277 12月 13 15:26 main4.out
-rw-rw-r-- 1 heyan heyan 2125 12月 13 15:26 main4.tm
main4 (Output OK)
====================================
FILE: main5.c-
-rw-r--r-- 1 heyan heyan  78 11月 20 21:16 main5.c-
-rw-r--r-- 1 heyan heyan 125 12月 10 18:12 main5.expected
-rw-rw-r-- 1 heyan heyan 237 12月 13 15:26 main5.out
-rw-rw-r-- 1 heyan heyan   0 12月 13 15:26 main5.tm
main5 (Output DIFF)
ERROR(LINKER): Procedure main is not defined.			ERROR(LINKER): Procedure main is not defined.
Number of warnings: 0						Number of warnings: 0
Number of errors: 1						Number of errors: 1
------------------------------------				------------------------------------
							   <
Memory Configuration: Data Addresses: 0-9999  Instructio   <
Loading file: main5.tm					   <
Halted							   <
Bye.							   <
====================================
FILE: main.c-
-rw-r--r-- 1 heyan heyan   35 11月 20 21:16 main.c-
-rw-r--r-- 1 heyan heyan  190 12月 10 18:12 main.expected
-rw-rw-r-- 1 heyan heyan  190 12月 13 15:26 main.out
-rw-rw-r-- 1 heyan heyan 2286 12月 13 15:26 main.tm
main (Output OK)
====================================
FILE: massign.c-
-rw-r--r-- 1 heyan heyan  272 11月 20 21:16 massign.c-
-rw-r--r-- 1 heyan heyan  193 12月 10 18:12 massign.expected
-rw-rw-r-- 1 heyan heyan  193 12月 13 15:26 massign.out
-rw-rw-r-- 1 heyan heyan 4384 12月 13 15:26 massign.tm
massign (Output OK)
====================================
FILE: mastermind.c-
-rw-r--r-- 1 heyan heyan  3878 11月 20 21:16 mastermind.c-
-rw-r--r-- 1 heyan heyan  1373 12月 10 18:12 mastermind.expected
-rw-r--r-- 1 heyan heyan   252 11月 21 11:33 mastermind.in
-rw-rw-r-- 1 heyan heyan 93802 12月 13 15:26 mastermind.out
-rw-rw-r-- 1 heyan heyan  1785 12月 13 15:26 mastermind.tm
mastermind.out ztmp9203.txt 不同：第 1 字节，第 1 行
mastermind (Output DIFF)
ERROR(135): Symbol 'r' is not defined.			   <
ERROR(141): Symbol 'known' is not defined.		   <
ERROR(141): Symbol 'rand' is not defined.		   <
ERROR(147): Symbol 'turn' is not defined.		   <
ERROR(147): Expecting Boolean test condition in while st   <
ERROR(153): Symbol 'known' is not defined.		   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 6					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: mastermind.tm					Loading file: mastermind.tm
Halted							   |	entered: 333331
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <

Commands are:						   |	1 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	entered: 1 
 c(lear            Reset simulator for new execution of    |	entered: 2 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	entered: 3 
 e(xecStats        Print execution statistics since last   |	entered: 4 
 g(o               Execute TM instructions until HALT	   |	1 1 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	2 
 l(oad filename    Load filename into memory (default is   |	entered: 2 
 p(rint            Toggle printing of total number instr   |	entered: 3 
 q(uit             Terminate the simulation		   |	entered: 4 
 r(egs             Print the contents of the registers	   |	entered: 5 
 s(tep <n>         Execute n (default 1) TM instructions   |	2 0 
 t(race            Toggle instruction tracing (printing)   |	3 
 u(nprompt)        Unprompted for script input		   |	entered: 3 
 x(it              Terminate the simulation		   |	entered: 4 
 = <r> <n>         Set register number r to value n (e.g   |	entered: 5 
 < <addr> <value>  Set dMem at addr to value		   |	entered: 6
 (empty line does a step)				   |	1 0 
Also a # character placed after input will cause TM to h   |	4 
Command 3 unknown.					   |	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	5 
							   >	entered: 1 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	1 1 
							   >	6 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	2 0 
							   >	7 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	entered: 6
							   >	1 0 
							   >	8 
							   >	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	9 
							   >	entered: 1 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	1 1 
							   >	10 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	2 0 
							   >	11 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	entered: 6
							   >	1 0 
							   >	12 
							   >	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	13 
							   >	entered: 1 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	1 1 
							   >	14 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	2 0 
							   >	15 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	entered: 6
							   >	1 0 
							   >	16 
							   >	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	17 
							   >	entered: 1 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	1 1 
							   >	18 
							   >	entered: 2 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	2 0 
							   >	19 
							   >	entered: 3 
							   >	entered: 4 
							   >	entered: 5 
							   >	entered: 6
							   >	1 0 
							   >	20 
							   >	entered: 7 
							   >	entered: 8 
							   >	entered: 9 
							   >	entered: 0
							   >	2 0 
							   >	21 
							   >	F F F F F F F F F F 
							   >
							   >	0 
							   >	9 
							   >	3 
							   >	2 

Commands are:						   |	Halted
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 4 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 5 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 0 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: mem.c-
-rw-r--r-- 1 heyan heyan  238 11月 20 21:16 mem.c-
-rw-r--r-- 1 heyan heyan  189 12月 10 18:12 mem.expected
-rw-rw-r-- 1 heyan heyan  233 12月 13 15:26 mem.out
-rw-rw-r-- 1 heyan heyan 1931 12月 13 15:26 mem.tm
mem.out ztmp9203.txt 不同：第 1 字节，第 1 行
mem (Output DIFF)
ERROR(23): Symbol 'polgara' is not defined.		   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 1					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: mem.tm						Loading file: mem.tm
Halted								Halted
Bye.								Bye.
====================================
FILE: miller.c-
-rw-r--r-- 1 heyan heyan 1600 11月 20 21:16 miller.c-
-rw-r--r-- 1 heyan heyan  383 12月 10 18:12 miller.expected
-rw-rw-r-- 1 heyan heyan  612 12月 13 15:26 miller.out
-rw-rw-r-- 1 heyan heyan 1936 12月 13 15:26 miller.tm
miller.out ztmp9203.txt 不同：第 1 字节，第 1 行
miller (Output DIFF)
ERROR(46): Symbol 'dog' is not defined.			   |	WARNING(6): Expecting to return type int but function 's
ERROR(49): Symbol 'dog' is not defined.			   |	Number of warnings: 1
ERROR(54): Symbol 'dog' is not defined.			   |	Number of errors: 0
ERROR(59): Symbol 'dog' is not defined.			   <
ERROR(70): Symbol 'dog' is not defined.			   <
ERROR(86): Symbol 'dog' is not defined.			   <
ERROR(91): Symbol 'getnxtindex' is not defined.		   <
ERROR(93): Symbol 'dog' is not defined.			   <
ERROR(103): Symbol 'dog' is not defined.		   <
ERROR(115): Symbol 'showIntArray' is not defined.	   <
Number of warnings: 0					   <
Number of errors: 10					   <
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: miller.tm						Loading file: miller.tm
							   >	100 
							   >	50 
							   >	100 
							   >	12 
							   >	66 
							   >	25 
							   >	777 
							   >	123 
							   >	888 
							   >	777 
							   >	3 
							   >	987 
							   >	774 
							   >	987 
							   >	9 
							   >	66 
							   >	77 
							   >	10 9 8 7 6 5 4 3 2 1 
Halted								Halted
Bye.								Bye.
====================================
FILE: minesweeper.c-
-rw-r--r-- 1 heyan heyan  5620 12月 10 20:23 minesweeper.c-
-rw-r--r-- 1 heyan heyan  3026 12月 10 18:12 minesweeper.expected
-rw-r--r-- 1 heyan heyan    76 12月 10 20:24 minesweeper.in
-rw-rw-r-- 1 heyan heyan 31717 12月 13 15:26 minesweeper.out
-rw-rw-r-- 1 heyan heyan  1947 12月 13 15:26 minesweeper.tm
minesweeper.out ztmp9203.txt 不同：第 1 字节，第 1 行
minesweeper (Output DIFF)
ERROR(191): Symbol 'CreateBoard' is not defined.	   <
ERROR(196): Symbol 'PrintBoard' is not defined.		   <
ERROR(218): Symbol 'guess' is not defined.		   <
ERROR(222): Symbol 'PrintBoard' is not defined.		   <
ERROR(234): Symbol 'guess' is not defined.		   <
ERROR(234): '==' requires operands of the same type but    <
ERROR(240): Symbol 'PrintBoard' is not defined.		   <
ERROR(250): Symbol 'Move' is not defined.		   <
Number of warnings: 0						Number of warnings: 0
Number of errors: 8					   |	Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: minesweeper.tm					Loading file: minesweeper.tm
Halted							   |	entered: 331
Command 3 unknown.					   <

Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	F F F F F F F F F F 
 e(xecStats        Print execution statistics since last   |	F F F F F F F F F F 
 g(o               Execute TM instructions until HALT	   |	F F F F F F F F F F 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	F F F F F F F F F F 
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F F F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F F F F F F F F F 
 r(egs             Print the contents of the registers	   |
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 2
 t(race            Toggle instruction tracing (printing)   |	entered: 2
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F 2 F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F F F 
 (empty line does a step)				   |	F F F F F F F F F F 
Also a # character placed after input will cause TM to h   |	F F F F F F F F F F 
Command 2 unknown.					   |	F F F F F F F F F F 
							   |	F F F F F F F F F F 
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |
 e(xecStats        Print execution statistics since last   |	entered: 3
 g(o               Execute TM instructions until HALT	   |	entered: 3
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F 2 F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F 3 F F F F F F F 
 r(egs             Print the contents of the registers	   |	F F F F F F F F F F 
 s(tep <n>         Execute n (default 1) TM instructions   |	F F F F F F F F F F 
 t(race            Toggle instruction tracing (printing)   |	F F F F F F F F F F 
 u(nprompt)        Unprompted for script input		   |	F F F F F F F F F F 
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F F F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F F F 
 (empty line does a step)				   |
Also a # character placed after input will cause TM to h   |	entered: 4
Command 2 unknown.					   |	entered: 4
							   |
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F 2 F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F 3 F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	F F F 1 F F F F F F 
 e(xecStats        Print execution statistics since last   |	F F F F F F F F F F 
 g(o               Execute TM instructions until HALT	   |	F F F F F F F F F F 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	F F F F F F F F F F 
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F F F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F F F F F F F F F 
 r(egs             Print the contents of the registers	   |
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 5
 t(race            Toggle instruction tracing (printing)   |	entered: 5
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F 2 F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F 3 F F F F F F F 
 (empty line does a step)				   |	F F F 1 F F F F F F 
Also a # character placed after input will cause TM to h   |	F F F F 2 F F F F F 
Command 3 unknown.					   |	F F F F F F F F F F 
							   |	F F F F F F F F F F 
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |
 e(xecStats        Print execution statistics since last   |	entered: 6
 g(o               Execute TM instructions until HALT	   |	entered: 6
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F 2 F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F 3 F F F F F F F 
 r(egs             Print the contents of the registers	   |	F F F 1 F F F F F F 
 s(tep <n>         Execute n (default 1) TM instructions   |	F F F F 2 F F F F F 
 t(race            Toggle instruction tracing (printing)   |	F F F F F 2 F F F F 
 u(nprompt)        Unprompted for script input		   |	F F F F F F F F F F 
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F F F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F F F 
 (empty line does a step)				   |
Also a # character placed after input will cause TM to h   |	entered: 7
Command 3 unknown.					   |	entered: 7
							   |
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F 2 F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F 3 F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	F F F 1 F F F F F F 
 e(xecStats        Print execution statistics since last   |	F F F F 2 F F F F F 
 g(o               Execute TM instructions until HALT	   |	F F F F F 2 F F F F 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	F F F F F F 3 F F F 
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F F F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F F F F F F F F F 
 r(egs             Print the contents of the registers	   |
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 8
 t(race            Toggle instruction tracing (printing)   |	entered: 8
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F 2 F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F 3 F F F F F F F 
 (empty line does a step)				   |	F F F 1 F F F F F F 
Also a # character placed after input will cause TM to h   |	F F F F 2 F F F F F 
Command 4 unknown.					   |	F F F F F 2 F F F F 
							   |	F F F F F F 3 F F F 
Commands are:						   |	F F F F F F F 2 F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |
 e(xecStats        Print execution statistics since last   |	entered: 9
 g(o               Execute TM instructions until HALT	   |	entered: 9
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F 2 F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F 3 F F F F F F F 
 r(egs             Print the contents of the registers	   |	F F F 1 F F F F F F 
 s(tep <n>         Execute n (default 1) TM instructions   |	F F F F 2 F F F F F 
 t(race            Toggle instruction tracing (printing)   |	F F F F F 2 F F F F 
 u(nprompt)        Unprompted for script input		   |	F F F F F F 3 F F F 
 x(it              Terminate the simulation		   |	F F F F F F F 2 F F 
 = <r> <n>         Set register number r to value n (e.g   |	F F F F F F F F 1 F 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F F F 
 (empty line does a step)				   |
Also a # character placed after input will cause TM to h   |	entered: 10
Command 4 unknown.					   |	entered: 10
							   |
Commands are:						   |	F F F F F F F F F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F 2 F F F F F F F F 
 c(lear            Reset simulator for new execution of    |	F F 3 F F F F F F F 
 d(Mem <b <n>>     Print n dMem locations (counting down   |	F F F 1 F F F F F F 
 e(xecStats        Print execution statistics since last   |	F F F F 2 F F F F F 
 g(o               Execute TM instructions until HALT	   |	F F F F F 2 F F F F 
 i(Mem <b <n>>     Print n iMem locations (counting up)    |	F F F F F F 3 F F F 
 l(oad filename    Load filename into memory (default is   |	F F F F F F F 2 F F 
 p(rint            Toggle printing of total number instr   |	F F F F F F F F 1 0 
 q(uit             Terminate the simulation		   |	F F F F F F F F F 0 
 r(egs             Print the contents of the registers	   |
 s(tep <n>         Execute n (default 1) TM instructions   |	entered: 9
 t(race            Toggle instruction tracing (printing)   |	entered: 10
 u(nprompt)        Unprompted for script input		   |
 x(it              Terminate the simulation		   |	F F F F F F F F F F 
 = <r> <n>         Set register number r to value n (e.g   |	F 2 F F F F F F F F 
 < <addr> <value>  Set dMem at addr to value		   |	F F 3 F F F F F F F 
 (empty line does a step)				   |	F F F 1 F F F F F F 
Also a # character placed after input will cause TM to h   |	F F F F 2 F F F F F 
Command 5 unknown.					   |	F F F F F 2 F F F F 
							   |	F F F F F F 3 F F F 
Commands are:						   |	F F F F F F F 2 F F 
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   |	F F F F F F F F 1 0 
 c(lear            Reset simulator for new execution of    |	F F F F F F F F 1 0 
 d(Mem <b <n>>     Print n dMem locations (counting down   |
 e(xecStats        Print execution statistics since last   |	entered: 10
 g(o               Execute TM instructions until HALT	   |	entered: 9
 i(Mem <b <n>>     Print n iMem locations (counting up)    |
 l(oad filename    Load filename into memory (default is   |	F F F F F F F F F F 
 p(rint            Toggle printing of total number instr   |	F 2 F F F F F F F F 
 q(uit             Terminate the simulation		   |	F F 3 F F F F F F F 
 r(egs             Print the contents of the registers	   |	F F F 1 F F F F F F 
 s(tep <n>         Execute n (default 1) TM instructions   |	F F F F 2 F F F F F 
 t(race            Toggle instruction tracing (printing)   |	F F F F F 2 F F F F 
 u(nprompt)        Unprompted for script input		   |	F F F F F F 3 F F F 
 x(it              Terminate the simulation		   |	F F F F F F F 2 F F 
 = <r> <n>         Set register number r to value n (e.g   |	F F F F F F F F 1 0 
 < <addr> <value>  Set dMem at addr to value		   |	F F F F F F F F 1 0 
 (empty line does a step)				   |
Also a # character placed after input will cause TM to h   |	entered: 0
Command 5 unknown.					   |	entered: 0
							   |	BYE
Commands are:						   |	Halted
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 6 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 7 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 8 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 9 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 1 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 2 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Command 3 unknown.					   <
							   <
Commands are:						   <
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n m   <
 c(lear            Reset simulator for new execution of    <
 d(Mem <b <n>>     Print n dMem locations (counting down   <
 e(xecStats        Print execution statistics since last   <
 g(o               Execute TM instructions until HALT	   <
 i(Mem <b <n>>     Print n iMem locations (counting up)    <
 l(oad filename    Load filename into memory (default is   <
 p(rint            Toggle printing of total number instr   <
 q(uit             Terminate the simulation		   <
 r(egs             Print the contents of the registers	   <
 s(tep <n>         Execute n (default 1) TM instructions   <
 t(race            Toggle instruction tracing (printing)   <
 u(nprompt)        Unprompted for script input		   <
 x(it              Terminate the simulation		   <
 = <r> <n>         Set register number r to value n (e.g   <
 < <addr> <value>  Set dMem at addr to value		   <
 (empty line does a step)				   <
Also a # character placed after input will cause TM to h   <
Bye.								Bye.
====================================
FILE: mod.c-
-rw-r--r-- 1 heyan heyan   498 12月 10 18:17 mod.c-
-rw-r--r-- 1 heyan heyan   243 12月 10 18:19 mod.expected
-rw-rw-r-- 1 heyan heyan   242 12月 13 15:26 mod.out
-rw-rw-r-- 1 heyan heyan 12297 12月 13 15:26 mod.tm
mod.out ztmp9203.txt 不同：第 178 字节，第 7 行
mod (Output DIFF)
Number of warnings: 0						Number of warnings: 0
Number of errors: 0						Number of errors: 0
------------------------------------				------------------------------------

Memory Configuration: Data Addresses: 0-9999  Instructio	Memory Configuration: Data Addresses: 0-9999  Instructio
Loading file: mod.tm						Loading file: mod.tm
1 2 3 4 5 						   |	0 0 1 2 0 
10 11 							   |	0 10 
1 							   |	0 
1 2 3 4 5 						   |	0 0 -1 -2 0 
10 11 							   |	0 -10 
31 -31 31 -31 Halted					   |	21 21 -21 -21 Halted
Bye.								Bye.
====================================
FILE: negTest.c-
