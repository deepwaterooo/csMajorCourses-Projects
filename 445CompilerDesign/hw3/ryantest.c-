// Author: Ryan Sacksteder
//
main()
{
    int x;
    char c;
    char x:c;

    return;
}

bool test()
{
    char c;
    int arr[3];
    bool barr[1];

    if (arr[1] == "testing") {
        return arr and c;
    }
    else {
        return barr[0];
    }
}

int check(int x, y)
{
    bool b;

    x =
        2 + (y =
             x = 2);
    x =
        2 + (y =
             b = x);
    x =
        2 + (y =
             b = undef);
    x =
        2 + (y =
             undef = x);
    x =
        2 + (y =
             undef = main());
    x =
        true + (y =
                b = x);
    x =
        true + (y =
                undef = x);
    x =
        true + (y =
                b = undef);
    x =
        true + (y =
                b = main());

    return 2;
}

func(int x; int xarr[]) {
    char cc;
    char str[3]:"string";
    foo();
    foo = x;
    x = foo;
    x = foo();
    x = foo(foo());
    x(3, 'c'*5, test);
    check(2,3);
    check = x;
    check = x();
    x = c;
    xarr = c;
    x = *xarr - 5;
    foo[5];
    xarr[x];
    x = x[3];
    check(x, x[1]);
    check(y, xarr[1*2]);
    check(xarr[1], check(2, 3));
    x = check[3];
    check(x, x());
    check(x =
          xarr[1] = 3,
          x = 'c');
    check(x = x, cc = x);
    check(check(check(check(x, y), x), 2, 3, 4));
    func(1, 2);
    func(xarr, xarr);
    func(xarr[1],
         xarr[2] - 'c',
         3);
    func(str);
}

init (int x; char c; int xarr[])
{
    int x:x;
    int x:2;
    char x:2;
    int x;
    int z;
    int z:666;
    int y:x;
    int a:xarr;
    int b:xarr[2];
    int d:check(2, 3);
    int e:"string";
    int f[3]:"string";
    char g:"string";
    char h[2]:"string";
    int i:3*x;
    int j:x;
    int k:x == 3;
    bool j:x == 3;
    bool j1:4 > 3;
    bool j2:x > 3;
}

noComp (int x) return;

comp (int y) { return; return; return; }

int retCheck (int x; int y[])
{
    return;
    return x;
    return retCheck(1, 2);
    return y;
    return y[x];
}
