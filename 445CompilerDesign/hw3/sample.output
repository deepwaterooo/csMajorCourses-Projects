Var gromit of type int [line: 6]
Func wallace returns type void [line: 8]
Child: 1
|   Param wrong of type int [line: 8]
Sibling: 1
|   Param trousers of type int [line: 8]
Child: 2
|   Compound [line: 9]
|   Child: 1
|   |   Var close of type bool [line: 10]
|   Sibling: 1
|   |   Var shave of type bool [line: 10]
|   |   Child: 1
|   |   |   Const: false [line: 10]
|   Child: 2
|   |   Id: close [line: 12]
|   Sibling: 1
|   |   Assign: = [line: 13]
|   |   Child: 1
|   |   |   Id: close [line: 13]
|   |   Child: 2
|   |   |   Id: shave [line: 13]
|   Sibling: 2
|   |   Assign: = [line: 14]
|   |   Child: 1
|   |   |   Id: wrong [line: 14]
|   |   Child: 2
|   |   |   Op: % [line: 14]
|   |   |   Child: 1
|   |   |   |   Id: trousers [line: 14]
|   |   |   Child: 2
|   |   |   |   Op: / [line: 14]
|   |   |   |   Child: 1
|   |   |   |   |   Const: 666 [line: 14]
|   |   |   |   Child: 2
|   |   |   |   |   Id: wrong [line: 14]
|   Sibling: 3
|   |   Assign: = [line: 15]
|   |   Child: 1
|   |   |   Id: gromit [line: 15]
|   |   Child: 2
|   |   |   Op: + [line: 15]
|   |   |   Child: 1
|   |   |   |   Op: - [line: 15]
|   |   |   |   Child: 1
|   |   |   |   |   Op: * [line: 15]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: wrong [line: 15]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Id: trousers [line: 15]
|   |   |   |   Child: 2
|   |   |   |   |   Id: gromit [line: 15]
|   |   |   Child: 2
|   |   |   |   Op: - [line: 15]
|   |   |   |   Child: 1
|   |   |   |   |   Const: 42 [line: 15]
|   Sibling: 4
|   |   Assign: += [line: 16]
|   |   Child: 1
|   |   |   Id: gromit [line: 16]
|   |   Child: 2
|   |   |   Const: 27182818 [line: 16]
|   Sibling: 5
|   |   Assign: -= [line: 17]
|   |   Child: 1
|   |   |   Id: gromit [line: 17]
|   |   Child: 2
|   |   |   Const: 31415927 [line: 17]
|   Sibling: 6
|   |   Assign: = [line: 18]
|   |   Child: 1
|   |   |   Id: close [line: 18]
|   |   Child: 2
|   |   |   Op: and [line: 18]
|   |   |   Child: 1
|   |   |   |   Op: < [line: 18]
|   |   |   |   Child: 1
|   |   |   |   |   Id: wrong [line: 18]
|   |   |   |   Child: 2
|   |   |   |   |   Id: trousers [line: 18]
|   |   |   Child: 2
|   |   |   |   Op: <= [line: 18]
|   |   |   |   Child: 1
|   |   |   |   |   Id: trousers [line: 18]
|   |   |   |   Child: 2
|   |   |   |   |   Id: gromit [line: 18]
|   Sibling: 7
|   |   Assign: = [line: 19]
|   |   Child: 1
|   |   |   Id: shave [line: 19]
|   |   Child: 2
|   |   |   Op: and [line: 19]
|   |   |   Child: 1
|   |   |   |   Op: > [line: 19]
|   |   |   |   Child: 1
|   |   |   |   |   Id: wrong [line: 19]
|   |   |   |   Child: 2
|   |   |   |   |   Id: trousers [line: 19]
|   |   |   Child: 2
|   |   |   |   Op: >= [line: 19]
|   |   |   |   Child: 1
|   |   |   |   |   Id: trousers [line: 19]
|   |   |   |   Child: 2
|   |   |   |   |   Id: gromit [line: 19]
|   Sibling: 8
|   |   Compound [line: 20]
|   |   Child: 1
|   |   |   Var a of type int [line: 21]
|   |   Sibling: 1
|   |   |   Var grand of type int [line: 21]
|   |   Sibling: 2
|   |   |   Var day of type int [line: 21]
|   |   Sibling: 3
|   |   |   Var out of type int [line: 21]
|   |   Child: 2
|   |   |   Assign: = [line: 22]
|   |   |   Child: 1
|   |   |   |   Id: a [line: 22]
|   |   |   Child: 2
|   |   |   |   Assign: += [line: 22]
|   |   |   |   Child: 1
|   |   |   |   |   Id: grand [line: 22]
|   |   |   |   Child: 2
|   |   |   |   |   Assign: -= [line: 22]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: day [line: 22]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Id: out [line: 22]
|   Sibling: 9
|   |   Assign: = [line: 24]
|   |   Child: 1
|   |   |   Id: close [line: 24]
|   |   Child: 2
|   |   |   Op: and [line: 24]
|   |   |   Child: 1
|   |   |   |   Op: < [line: 24]
|   |   |   |   Child: 1
|   |   |   |   |   Op: + [line: 24]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Op: * [line: 24]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Op: - [line: 24]
|   |   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   |   Const: 1 [line: 24]
|   |   |   |   |   |   Child: 2
|   |   |   |   |   |   |   Const: 2 [line: 24]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 3 [line: 24]
|   |   |   |   Child: 2
|   |   |   |   |   Op: * [line: 24]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: 4 [line: 24]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 5 [line: 24]
|   |   |   Child: 2
|   |   |   |   Op: > [line: 24]
|   |   |   |   Child: 1
|   |   |   |   |   Op: + [line: 24]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: 6 [line: 24]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 7 [line: 24]
|   |   |   |   Child: 2
|   |   |   |   |   Op: - [line: 24]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: 3 [line: 24]
|   Sibling: 10
|   |   Assign: = [line: 25]
|   |   Child: 1
|   |   |   Id: shave [line: 25]
|   |   Child: 2
|   |   |   Op: or [line: 25]
|   |   |   Child: 1
|   |   |   |   Const: true [line: 25]
|   |   |   Child: 2
|   |   |   |   Op: and [line: 25]
|   |   |   |   Child: 1
|   |   |   |   |   Op: < [line: 25]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Op: - [line: 25]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Op: * [line: 25]
|   |   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   |   Const: 1 [line: 25]
|   |   |   |   |   |   |   Child: 2
|   |   |   |   |   |   |   |   Op: + [line: 25]
|   |   |   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   |   |   Const: 2 [line: 25]
|   |   |   |   |   |   |   |   Child: 2
|   |   |   |   |   |   |   |   |   Const: 3 [line: 25]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Op: * [line: 25]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Const: 4 [line: 25]
|   |   |   |   |   |   Child: 2
|   |   |   |   |   |   |   Const: 5 [line: 25]
|   |   |   |   Child: 2
|   |   |   |   |   Op: > [line: 25]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Op: + [line: 25]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Const: 6 [line: 25]
|   |   |   |   |   |   Child: 2
|   |   |   |   |   |   |   Const: 7 [line: 25]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Op: - [line: 25]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Const: 3 [line: 25]
|   Sibling: 11
|   |   If [line: 26]
|   |   Child: 1
|   |   |   Op: != [line: 26]
|   |   |   Child: 1
|   |   |   |   Id: shave [line: 26]
|   |   |   Child: 2
|   |   |   |   Id: close [line: 26]
|   |   Child: 2
|   |   |   Assign: = [line: 26]
|   |   |   Child: 1
|   |   |   |   Id: shave [line: 26]
|   |   |   Child: 2
|   |   |   |   Op: not [line: 26]
|   |   |   |   Child: 1
|   |   |   |   |   Id: close [line: 26]
|   Sibling: 12
|   |   If [line: 27]
|   |   Child: 1
|   |   |   Op: or [line: 27]
|   |   |   Child: 1
|   |   |   |   Op: not [line: 27]
|   |   |   |   Child: 1
|   |   |   |   |   Op: == [line: 27]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: shave [line: 27]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Id: close [line: 27]
|   |   |   Child: 2
|   |   |   |   Op: not [line: 27]
|   |   |   |   Child: 1
|   |   |   |   |   Id: close [line: 27]
|   |   Child: 2
|   |   |   Assign: = [line: 27]
|   |   |   Child: 1
|   |   |   |   Id: shave [line: 27]
|   |   |   Child: 2
|   |   |   |   Const: true [line: 27]
|   |   Child: 3
|   |   |   Assign: = [line: 28]
|   |   |   Child: 1
|   |   |   |   Id: close [line: 28]
|   |   |   Child: 2
|   |   |   |   Const: false [line: 28]
|   Sibling: 13
|   |   While [line: 29]
|   |   Child: 1
|   |   |   Id: shave [line: 29]
|   |   Child: 2
|   |   |   Compound [line: 29]
|   |   |   Child: 1
|   |   |   |   Var were of type int [line: 30]
|   |   |   Sibling: 1
|   |   |   |   Var rabbit of type int [line: 30]
|   |   |   Sibling: 2
|   |   |   |   Var sheep is array of type int [line: 31]
|   |   |   Child: 2
|   |   |   |   Assign: = [line: 33]
|   |   |   |   Child: 1
|   |   |   |   |   Id: sheep [line: 33]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: 2 [line: 33]
|   |   |   |   Child: 2
|   |   |   |   |   Const: 1618 [line: 33]
|   |   |   Sibling: 1
|   |   |   |   If [line: 34]
|   |   |   |   Child: 1
|   |   |   |   |   Op: < [line: 34]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: sheep [line: 34]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Const: 2 [line: 34]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 496 [line: 34]
|   |   |   |   Child: 2
|   |   |   |   |   Break [line: 34]
|   |   |   Sibling: 2
|   |   |   |   Call: wallace [line: 35]
|   |   |   |   Child: 1
|   |   |   |   |   Assign: -- [line: 35]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: gromit [line: 35]
|   |   |   |   Sibling: 1
|   |   |   |   |   Op: - [line: 35]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: were [line: 35]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Id: rabbit [line: 35]
|   |   |   Sibling: 3
|   |   |   |   Compound [line: 36]
|   |   |   |   Child: 1
|   |   |   |   |   Var the of type int [line: 37]
|   |   |   |   Sibling: 1
|   |   |   |   |   Var wrong of type int [line: 37]
|   |   |   |   Sibling: 2
|   |   |   |   |   Var trousers of type int [line: 37]
|   |   |   |   Child: 2
|   |   |   |   |   Assign: = [line: 39]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: the [line: 39]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Assign: += [line: 39]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Id: wrong [line: 39]
|   |   |   |   |   |   Child: 2
|   |   |   |   |   |   |   Assign: ++ [line: 39]
|   |   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   |   Id: trousers [line: 39]
|   |   |   |   Sibling: 1
|   |   |   |   |   If [line: 40]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Op: == [line: 40]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Id: were [line: 40]
|   |   |   |   |   |   Child: 2
|   |   |   |   |   |   |   Id: rabbit [line: 40]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Assign: = [line: 40]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Id: were [line: 40]
|   |   |   |   |   |   Child: 2
|   |   |   |   |   |   |   Assign: -- [line: 40]
|   |   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   |   Id: wrong [line: 40]
|   Sibling: 14
|   |   Return [line: 43]
Func penguin returns type bool [line: 47]
Child: 1
|   Param Feathers of type char [line: 47]
Sibling: 1
|   Param McGraw is array of type char [line: 47]
Child: 2
|   Compound [line: 48]
|   Child: 1
|   |   Var tottington of type char [line: 49]
|   |   Child: 1
|   |   |   Const: 'x' [line: 49]
|   Sibling: 1
|   |   Var Wensleydale is array of type char [line: 50]
|   |   Child: 1
|   |   |   Const: "cheeeeeese" [line: 50]
|   Child: 2
|   |   Assign: = [line: 52]
|   |   Child: 1
|   |   |   Id: tottington [line: 52]
|   |   Child: 2
|   |   |   Id: Feathers [line: 52]
|   Sibling: 1
|   |   Assign: = [line: 53]
|   |   Child: 1
|   |   |   Id: McGraw [line: 53]
|   |   Child: 2
|   |   |   Id: Feathers [line: 53]
|   Sibling: 2
|   |   Assign: = [line: 54]
|   |   Child: 1
|   |   |   Id: Wensleydale [line: 54]
|   |   Child: 2
|   |   |   Id: McGraw [line: 54]
|   Sibling: 3
|   |   Assign: = [line: 55]
|   |   Child: 1
|   |   |   Id: Wensleydale [line: 55]
|   |   |   Child: 1
|   |   |   |   Op: * [line: 55]
|   |   |   |   Child: 1
|   |   |   |   |   Id: McGraw [line: 55]
|   |   Child: 2
|   |   |   Const: '*' [line: 55]
|   Sibling: 4
|   |   Assign: = [line: 56]
|   |   Child: 1
|   |   |   Id: McGraw [line: 56]
|   |   Child: 2
|   |   |   Const: "A Matter of Loaf and Death" [line: 56]
|   Sibling: 5
|   |   Compound [line: 58]
|   |   Child: 1
|   |   |   Var c of type char [line: 58]
|   |   Child: 2
|   |   |   Foreach [line: 59]
|   |   |   Child: 1
|   |   |   |   Id: c [line: 59]
|   |   |   Child: 2
|   |   |   |   Id: McGraw [line: 59]
|   |   |   Child: 3
|   |   |   |   If [line: 59]
|   |   |   |   Child: 1
|   |   |   |   |   Op: == [line: 59]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: McGraw [line: 59]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Id: c [line: 59]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 'f' [line: 59]
|   |   |   |   Child: 2
|   |   |   |   |   Return [line: 59]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: true [line: 59]
Func Wendolene returns type int [line: 63]
Child: 1
|   Param wool of type int [line: 63]
Sibling: 1
|   Param shaun of type bool [line: 63]
Sibling: 2
|   Param yarn is array of type int [line: 63]
Sibling: 3
|   Param preston is array of type bool [line: 63]
Child: 2
|   Compound [line: 64]
|   Child: 1
|   |   Var void of type int [line: 65]
|   |   Child: 1
|   |   |   Op: - [line: 65]
|   |   |   Child: 1
|   |   |   |   Op: + [line: 65]
|   |   |   |   Child: 1
|   |   |   |   |   Const: 3 [line: 65]
|   |   |   |   Child: 2
|   |   |   |   |   Op: * [line: 65]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: 8 [line: 65]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 8 [line: 65]
|   Child: 2
|   |   Assign: = [line: 66]
|   |   Child: 1
|   |   |   Id: void [line: 66]
|   |   Child: 2
|   |   |   Op: - [line: 66]
|   |   |   Child: 1
|   |   |   |   Assign: = [line: 66]
|   |   |   |   Child: 1
|   |   |   |   |   Id: void [line: 66]
|   |   |   |   Child: 2
|   |   |   |   |   Op: - [line: 66]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: void [line: 66]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 1 [line: 66]
|   |   |   Child: 2
|   |   |   |   Const: 3 [line: 66]
|   Sibling: 1
|   |   Assign: = [line: 67]
|   |   Child: 1
|   |   |   Id: void [line: 67]
|   |   Child: 2
|   |   |   Op: - [line: 67]
|   |   |   Child: 1
|   |   |   |   Assign: -- [line: 67]
|   |   |   |   Child: 1
|   |   |   |   |   Id: void [line: 67]
|   |   |   Child: 2
|   |   |   |   Const: 3 [line: 67]
|   Sibling: 2
|   |   Return [line: 68]
|   |   Child: 1
|   |   |   Op: + [line: 68]
|   |   |   Child: 1
|   |   |   |   Op: + [line: 68]
|   |   |   |   Child: 1
|   |   |   |   |   Op: + [line: 68]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: wool [line: 68]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Id: yarn [line: 68]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Const: 0 [line: 68]
|   |   |   |   Child: 2
|   |   |   |   |   Op: * [line: 68]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: yarn [line: 68]
|   |   |   Child: 2
|   |   |   |   Id: yarn [line: 68]
|   |   |   |   Child: 1
|   |   |   |   |   Op: * [line: 68]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: 7 [line: 68]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Id: wool [line: 68]
Func ramsBottom returns type bool [line: 72]
Child: 2
|   Compound [line: 73]
|   Child: 1
|   |   Var chicken is array of type int [line: 74]
|   Sibling: 1
|   |   Var run is array of type bool [line: 75]
|   Sibling: 2
|   |   Var wallace is array of type int [line: 76]
|   Sibling: 3
|   |   Var gromit is array of type int [line: 76]
|   Child: 2
|   |   Op: * [line: 78]
|   |   Child: 1
|   |   |   Const: 42 [line: 78]
|   |   Child: 2
|   |   |   Call: Wendolene [line: 78]
|   |   |   Child: 1
|   |   |   |   Op: + [line: 78]
|   |   |   |   Child: 1
|   |   |   |   |   Op: + [line: 78]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: 1 [line: 78]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 2 [line: 78]
|   |   |   |   Child: 2
|   |   |   |   |   Const: 3 [line: 78]
|   |   |   Sibling: 1
|   |   |   |   Op: or [line: 78]
|   |   |   |   Child: 1
|   |   |   |   |   Op: not [line: 78]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: true [line: 78]
|   |   |   |   Child: 2
|   |   |   |   |   Op: and [line: 78]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: true [line: 78]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: false [line: 78]
|   |   |   Sibling: 2
|   |   |   |   Id: chicken [line: 78]
|   |   |   Sibling: 3
|   |   |   |   Id: run [line: 78]
|   Sibling: 1
|   |   Id: run [line: 79]
|   |   Child: 1
|   |   |   Op: - [line: 79]
|   |   |   Child: 1
|   |   |   |   Op: * [line: 79]
|   |   |   |   Child: 1
|   |   |   |   |   Id: run [line: 79]
|   |   |   Child: 2
|   |   |   |   Const: 1 [line: 79]
|   Sibling: 2
|   |   Return [line: 81]
|   |   Child: 1
|   |   |   Op: not [line: 81]
|   |   |   Child: 1
|   |   |   |   Op: >= [line: 81]
|   |   |   |   Child: 1
|   |   |   |   |   Id: wallace [line: 81]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Const: 1 [line: 81]
|   |   |   |   Child: 2
|   |   |   |   |   Op: * [line: 81]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Op: - [line: 81]
|   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   Id: gromit [line: 81]
|   |   |   |   |   |   |   Child: 1
|   |   |   |   |   |   |   |   Const: 2 [line: 81]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Const: 3 [line: 81]
Func cheese returns type int [line: 84]
Child: 1
|   Param x of type int [line: 84]
Sibling: 1
|   Param y of type int [line: 84]
Child: 2
|   While [line: 84]
|   Child: 1
|   |   Op: > [line: 84]
|   |   Child: 1
|   |   |   Id: x [line: 84]
|   |   Child: 2
|   |   |   Const: 0 [line: 84]
|   Child: 2
|   |   If [line: 84]
|   |   Child: 1
|   |   |   Op: > [line: 84]
|   |   |   Child: 1
|   |   |   |   Id: y [line: 84]
|   |   |   Child: 2
|   |   |   |   Const: 3 [line: 84]
|   |   Child: 2
|   |   |   Assign: -- [line: 84]
|   |   |   Child: 1
|   |   |   |   Id: x [line: 84]
|   |   Child: 3
|   |   |   Return [line: 84]
|   |   |   Child: 1
|   |   |   |   Op: % [line: 84]
|   |   |   |   Child: 1
|   |   |   |   |   Op: * [line: 84]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: x [line: 84]
|   |   |   |   |   Child: 2
|   |   |   |   |   |   Id: x [line: 84]
|   |   |   |   Child: 2
|   |   |   |   |   Id: y [line: 84]
Func Wensleydale returns type int [line: 86]
Child: 1
|   Param x of type int [line: 86]
Sibling: 1
|   Param y of type int [line: 86]
Child: 2
|   Return [line: 86]
|   Child: 1
|   |   Call: cheese [line: 86]
|   |   Child: 1
|   |   |   Id: x [line: 86]
|   |   Sibling: 1
|   |   |   Id: gromit [line: 86]
Func main returns type int [line: 88]
Child: 2
|   Compound [line: 89]
|   Child: 1
|   |   Var wool of type int [line: 90]
|   Sibling: 1
|   |   Var yarn is array of type int [line: 90]
|   Sibling: 2
|   |   Var shaun of type bool [line: 91]
|   Sibling: 3
|   |   Var preston is array of type bool [line: 91]
|   Child: 2
|   |   Call: wallace [line: 93]
|   |   Child: 1
|   |   |   Call: cheese [line: 93]
|   |   |   Child: 1
|   |   |   |   Const: 62 [line: 93]
|   |   |   Sibling: 1
|   |   |   |   Op: - [line: 93]
|   |   |   |   Child: 1
|   |   |   |   |   Const: 311 [line: 93]
|   |   Sibling: 1
|   |   |   Id: gromit [line: 93]
|   Sibling: 1
|   |   Return [line: 94]
|   |   Child: 1
|   |   |   Call: Wendolene [line: 94]
|   |   |   Child: 1
|   |   |   |   Op: * [line: 94]
|   |   |   |   Child: 1
|   |   |   |   |   Op: * [line: 94]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: preston [line: 94]
|   |   |   |   Child: 2
|   |   |   |   |   Op: * [line: 94]
|   |   |   |   |   Child: 1
|   |   |   |   |   |   Id: yarn [line: 94]
|   |   |   Sibling: 1
|   |   |   |   Id: shaun [line: 94]
|   |   |   Sibling: 2
|   |   |   |   Id: yarn [line: 94]
|   |   |   Sibling: 3
|   |   |   |   Id: preston [line: 94]
Var aBig_LongVariableName_6__ of type bool [line: 97]
